
module.exports = plop => {
  plop.setGenerator("lazy module", {

    // Succintly describes what generator does.
    description: "Create a new lazy module with route",

    // Get inputs from the user.
    // That's Inquirer.js doing the job behind the hood.
    prompts: [
      {
        type: "input",
        name: "name",
        message: "What is your module name?"
      },
      {
        type: "input",
        name: "componentname",
        message: "What is your component name?"
      },
      {
        type: "input",
        name: "routename",
        message: "What is your routepath name?"
      }

    ],

    // List of actions to take.
    // Here we "add" new files from our templates.
    actions: [
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase name}}.module.ts",
        templateFile: "templates/lazymodules/lazy.module.hbs"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.ts",
        templateFile: "templates/component/test.component.hbs"
      },

      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.spec.ts",
        templateFile: "templates/component/test.component.spec.hbs"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.html",
        templateFile: "templates/component/test.component.html"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.scss",
        templateFile: "templates/component/test.component.css"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase name}}.routing.ts",
        templateFile: "templates/lazymodules/lazy.routing.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/app-routing.module.ts',
        pattern: "/** Generator:End of Routes */",
        templateFile: "templates/router/router.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/app-routing.module.ts',
        pattern: "/** Generator:Add Routes */",
        templateFile: "templates/router/routerinitial.hbs"
      }


    ]

  });


  plop.setGenerator("module", {

    // Succintly describes what generator does.
    description: "Create a new module with route",

    // Get inputs from the user.
    // That's Inquirer.js doing the job behind the hood.
    prompts: [
      {
        type: "input",
        name: "name",
        message: "What is your module name?"
      },
      {
        type: "input",
        name: "componentname",
        message: "What is your component name?"
      },
      {
        type: "input",
        name: "routename",
        message: "What is your routepath name?"
      }

    ],

    // List of actions to take.
    // Here we "add" new files from our templates.
    actions: [
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase name}}.module.ts",
        templateFile: "templates/modules/xyz.module.hbs"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.ts",
        templateFile: "templates/component/test.component.hbs"
      },

      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.spec.ts",
        templateFile: "templates/component/test.component.spec.hbs"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.html",
        templateFile: "templates/component/test.component.html"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase componentname}}/{{camelCase componentname}}.component.scss",
        templateFile: "templates/component/test.component.css"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase name}}/{{camelCase name}}-routing.module.ts",
        templateFile: "templates/modules/xyz-routing.module.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/app.module.ts',
        pattern: "AppRoutingModule/** Generator: End of Imports */",
        templateFile: "templates/rootmodule/app.module.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/app.module.ts',
        pattern: "import { AppRoutingModule } from './app-routing.module';",
        templateFile: "templates/rootmodule/imports.hbs"
      }

    ]

  });



  plop.setGenerator("dataservice", {

    // Succintly describes what generator does.
    description: "Create a data service",

    // Get inputs from the user.
    // That's Inquirer.js doing the job behind the hood.
    prompts: [
      {
        type: "input",
        name: "servicename",
        message: "What is the name of your service?"
      },
      {
        type: "input",
        name: "path",
        message: "What is the path of the service?"
      },
      {
        type: "input",
        name: "modelname",
        message: "What is the name of your domain model"
      },
      {
        type: "input",
        name: "modulename",
        message: "in what feature module do you want to add your service"
      },
      {
        type: "confirm",
        name: "resolver",
        message: "do you want service to have resolver"
      }

    ],

    // List of actions to take.
    // Here we "add" new files from our templates.
    actions: function (data) {
      var actions = [{
        type: "add",
        path: "../../../../../src/app/{{camelCase modulename}}/api/{{camelCase servicename}}/{{camelCase servicename}}.service.ts",
        templateFile: "templates/dataservice/demo.service.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
        pattern: "/** Generator: End of imports */",
        templateFile: "templates/dataservice/servicemoduleimport.hbs"

      },
      {
        type: 'modify',
        path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
        pattern: "/** Generator: End of providers */",
        templateFile: "templates/dataservice/providersupdate2.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
        pattern: "/** Generator: Add provider */",
        templateFile: "templates/dataservice/providersupdate.hbs"
      }
      ];

      if (data.resolver) {
        actions.push({
          type: 'add',
          path: "../../../../../src/app/{{camelCase modulename}}/api/{{camelCase servicename}}/{{camelCase servicename}}-resolver.service.ts",
          templateFile: 'templates/dataservice/demo-resolver.service.hbs'
        },
          {
            type: 'modify',
            path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
            pattern: "/** Generator: End of imports */",
            templateFile: "templates/dataservice/resolvermoduleimport.hbs"

          },

          {
            type: 'modify',
            path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
            pattern: "/** Generator: End of providers */",
            templateFile: "templates/dataservice/providersresolverupdate.hbs"
          },
          {
            type: 'modify',
            path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}-routing.module.ts',
            pattern: "/** Generator: End of imports */",
            templateFile: "templates/dataservice/resolvermoduleimport.hbs"
          }



        );
      } else {

      }

      return actions;
    }

  });

  plop.setGenerator("componentroute", {

    // Succintly describes what generator does.
    description: "Create a component with route",

    // Get inputs from the user.
    // That's Inquirer.js doing the job behind the hood.
    prompts: [
      {
        type: "input",
        name: "componentname",
        message: "What is the name of your component?"
      },
      {
        type: "input",
        name: "modulename",
        message: "What is the name of the module you want to create this component?"
      },
      {
        type: "input",
        name: "path",
        message:"what is the path of this component?"
      },
      {
        type: "confirm",
        name: "lazy",
        message: "is the module a lazy module ?"
      }

    ],

    // List of actions to take.
    // Here we "add" new files from our templates.
    actions: function (data) {
      var actions = [{
        type: "add",
        path: "../../../../../src/app/{{camelCase modulename}}/{{camelCase componentname}}/{{camelCase componentname}}.component.ts",
        templateFile: "templates/component/test.component.hbs"
      },

      {
        type: "add",
        path: "../../../../../src/app/{{camelCase modulename}}/{{camelCase componentname}}/{{camelCase componentname}}.component.spec.ts",
        templateFile: "templates/component/test.component.spec.hbs"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase modulename}}/{{camelCase componentname}}/{{camelCase componentname}}.component.html",
        templateFile: "templates/component/test.component.html"
      },
      {
        type: "add",
        path: "../../../../../src/app/{{camelCase modulename}}/{{camelCase componentname}}/{{camelCase componentname}}.component.scss",
        templateFile: "templates/component/test.component.css"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
        pattern: "/** Generator: End of imports */",
        templateFile: "templates/component/import.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}.module.ts',
        pattern: "/** Generator: End of declarations */",
        templateFile: "templates/component/declarations.hbs"
      }
      ];

      if (data.lazy) {
        actions.push();
      } else {
        actions.push(
           {
            type: 'modify',
            path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}-routing.module.ts',
            pattern: "/** Generator: End of imports */",
            templateFile: "templates/component/modulesroutesimport.hbs"
          },
          {
            type: 'modify',
            path: '../../../../../src/app/{{camelCase modulename}}/{{camelCase modulename}}-routing.module.ts',
            pattern: "/** Generator:End of Routes */",
            templateFile: "templates/component/modulesroutes.hbs"
          }
        );

      }

      return actions;
    }

  });

   plop.setGenerator("Generated Service", {

    // Succintly describes what generator does.
    description: "Imported swagger generated service into the project please run npm install after this command",

    // Get inputs from the user.
    // That's Inquirer.js doing the job behind the hood.
    prompts: [
      {
        type: "input",
        name: "packagename",
        message: "service npm package name example @tranzform/client-authorization"
      },
      {
        type: "input",
        name: "version",
        message: "What is the version of this service"
      },
       {
        type: "input",
        name: "servicename",
        message: "Name of the service you are import example auth"
      }

    ],

    // List of actions to take.
    // Here we "add" new files from our templates.
    actions: [
  
      {
        type: 'modify',
        path: '../../../../../package.json',
        pattern: '"@angular/animations": "4.0.3",',
        templateFile: "templates/package/packageimport.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/client/client.module.ts',
        pattern: "/** Generator: End of providers*/",
        templateFile: "templates/client/addprovider.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/client/client.module.ts',
        pattern: "/**Generator: Add providers */",
        templateFile: "templates/client/newprovider.hbs"
      },
      {
        type: 'modify',
        path: '../../../../../src/app/client/client.module.ts',
        pattern: "/** Generator: end of imports  */",
        templateFile: "templates/client/imports.hbs"
      }


    ]

  });

};
