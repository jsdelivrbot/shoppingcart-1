/**
 * TranZform Eligibility - Business Services
 * The YAML consists fo the following Service definitions.    1. Get Member Eligibility.
 *
 * OpenAPI spec version: 5.00.004.004
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var EligibilityApi = (function () {
    function EligibilityApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/eligibility-web';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    * Get Member Eligibility Information
    * The GetMemberEligibility API, is used to get member eligibility information.
    * @param params Parameters.
    */
    EligibilityApi.prototype.eligibilityGet = function (params, extraHttpRequestParams) {
        return this.eligibilityGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get Member Eligibility Information
     * The GetMemberEligibility API, is used to get member eligibility information.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberfirstname Member&#39;s first name
     * @param params.memberlastname Member&#39;s last name
     * @param params.dateofbirth Member&#39;s last name
     * @param params.servicefromdate Service from date
     * @param params.servicetodate Service to date
     * @param params.membermiddlename Member&#39;s middle name
     */
    EligibilityApi.prototype.eligibilityGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/eligibility';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantenrollmentid' is not null or undefined
        if (params.tenantenrollmentid === null || params.tenantenrollmentid === undefined) {
            throw new Error('Required parameter params.tenantenrollmentid was null or undefined when calling eligibilityGet.');
        }
        // verify required parameter 'params.memberfirstname' is not null or undefined
        if (params.memberfirstname === null || params.memberfirstname === undefined) {
            throw new Error('Required parameter params.memberfirstname was null or undefined when calling eligibilityGet.');
        }
        // verify required parameter 'params.memberlastname' is not null or undefined
        if (params.memberlastname === null || params.memberlastname === undefined) {
            throw new Error('Required parameter params.memberlastname was null or undefined when calling eligibilityGet.');
        }
        // verify required parameter 'params.dateofbirth' is not null or undefined
        if (params.dateofbirth === null || params.dateofbirth === undefined) {
            throw new Error('Required parameter params.dateofbirth was null or undefined when calling eligibilityGet.');
        }
        // verify required parameter 'params.servicefromdate' is not null or undefined
        if (params.servicefromdate === null || params.servicefromdate === undefined) {
            throw new Error('Required parameter params.servicefromdate was null or undefined when calling eligibilityGet.');
        }
        // verify required parameter 'params.servicetodate' is not null or undefined
        if (params.servicetodate === null || params.servicetodate === undefined) {
            throw new Error('Required parameter params.servicetodate was null or undefined when calling eligibilityGet.');
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.memberfirstname !== undefined) {
            queryParameters.set('memberfirstname', params.memberfirstname);
        }
        if (params.memberlastname !== undefined) {
            queryParameters.set('memberlastname', params.memberlastname);
        }
        if (params.membermiddlename !== undefined) {
            queryParameters.set('membermiddlename', params.membermiddlename);
        }
        if (params.dateofbirth !== undefined) {
            queryParameters.set('dateofbirth', params.dateofbirth);
        }
        if (params.servicefromdate !== undefined) {
            queryParameters.set('servicefromdate', params.servicefromdate);
        }
        if (params.servicetodate !== undefined) {
            queryParameters.set('servicetodate', params.servicetodate);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return EligibilityApi;
}());
export { EligibilityApi };
EligibilityApi.decorators = [
    { type: Injectable },
];
/** @nocollapse */
EligibilityApi.ctorParameters = function () { return [
    { type: Http, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
    { type: Configuration, decorators: [{ type: Optional },] },
]; };
//# sourceMappingURL=EligibilityApi.js.map