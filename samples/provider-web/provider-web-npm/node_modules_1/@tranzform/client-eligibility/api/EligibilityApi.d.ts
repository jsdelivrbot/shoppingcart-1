import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IeligibilityGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantenrollmentid: string;
    /** Member&#39;s first name  */
    memberfirstname: string;
    /** Member&#39;s last name  */
    memberlastname: string;
    /** Member&#39;s last name  */
    dateofbirth: string;
    /** Service from date  */
    servicefromdate: string;
    /** Service to date  */
    servicetodate: string;
    /** Member&#39;s middle name  */
    membermiddlename?: string;
}
export declare class EligibilityApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    * Get Member Eligibility Information
    * The GetMemberEligibility API, is used to get member eligibility information.
    * @param params Parameters.
    */
    eligibilityGet(params: IeligibilityGetParams, extraHttpRequestParams?: any): Observable<models.MemberEligibility>;
    /**
     * Get Member Eligibility Information
     * The GetMemberEligibility API, is used to get member eligibility information.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberfirstname Member&#39;s first name
     * @param params.memberlastname Member&#39;s last name
     * @param params.dateofbirth Member&#39;s last name
     * @param params.servicefromdate Service from date
     * @param params.servicetodate Service to date
     * @param params.membermiddlename Member&#39;s middle name
     */
    eligibilityGetWithHttpInfo(params: IeligibilityGetParams, extraHttpRequestParams?: any): Observable<Response>;
}
