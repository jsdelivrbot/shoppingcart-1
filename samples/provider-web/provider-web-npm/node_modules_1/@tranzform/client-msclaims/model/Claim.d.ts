export interface Claim {
    /**
     * Unique ID of the claim from the system of the payer.
     */
    claimId?: string;
    /**
     * Type of claim.  Examples are 'Medical', 'Dental'. Values are validated against MDM (Master Data Management).
     */
    claimType?: string;
    /**
     * Subtype of the claim.  Valid values are 'Medical' for Medical Claim (claimType = Medical), 'Hospital' for Hospital Claim (claimType = Medical), 'Dental' for Dental Claim (claimType = Dental)
     */
    claimSubType?: Claim.ClaimSubTypeEnum;
    /**
     * Subscriber identifier for an individual or family plan.
     */
    subscriberId?: string;
    /**
     * Unique ID assigned by the payer to the member; internal Member ID; not external facing.
     */
    tenantEnrollmentId?: string;
    /**
     * First name of the member.
     */
    memberFirstName?: string;
    /**
     * Middle name of the member.
     */
    memberMiddleName?: string;
    /**
     * Last name of the member.
     */
    memberLastName?: string;
    /**
     * Place of service.
     */
    placeOfService?: string;
    /**
     * Indicates whether the claim contains HIPAA Sensitive restricted Health Diagnosis Information.  This prevents some claim information from showing on the Claim Summary screen; such as Provider information.  In addition, unless the member requesting is the same as the member for whom the claim is for, the user is not able to click into the claim detail.
     */
    hipaaSensitive?: string;
    /**
     * Status of the claim.  Valid values are 'Received', 'Pending', 'Finalized'. Values are validated against MDM (Master Data Management).
     */
    claimStatus?: string;
    /**
     * Date claim was received at payer.
     */
    claimReceivedDate?: string;
    /**
     * Date claim was paid by payer.
     */
    claimPaidDate?: string;
    /**
     * Lowest service date on the claim.
     */
    lowServiceDate?: string;
    /**
     * Highest service date on the claim.
     */
    highServiceDate?: string;
    /**
     * Pay to provider ID.
     */
    payeeProviderId?: string;
    /**
     * Service/rendering provider ID.
     */
    serviceProviderId?: string;
    /**
     * Service/rendering provider name.
     */
    serviceProviderName?: string;
    /**
     * Indicates if provider was in network.  'In Network' for In Network or 'Out-of-Network' for Out of Network
     */
    networkIndicator?: Claim.NetworkIndicatorEnum;
    /**
     * The account number of the patient in the provider system.
     */
    patientAccountNumber?: string;
    /**
     * Amount charged by the provider.
     */
    totalChargedAmount?: number;
    /**
     * Amount allowed by the payer.
     */
    totalAllowedAmount?: number;
    /**
     * Amount difference between Charged Amount and Allowed amount that is usually attributed to a provider who is In-Network that is considered a \"Network Savings\" amount.
     */
    totalPlanDiscount?: number;
    /**
     * Amount paid by the payer.
     */
    totalPaidAmount?: number;
    /**
     * Amount applied to the deductible of the member.
     */
    totalDeductibleAmount?: number;
    /**
     * Amount applied to the copay of the member.
     */
    totalCopay?: number;
    /**
     * Amount applied to coinsurance of the member.
     */
    totalCoinsurance?: number;
    /**
     * Amount considered not covered by the payer. This is the patient portion.
     */
    totalNotCovered?: number;
    /**
     * Amount of patient responsibility for the claim - Deductible + Copay + Coinsurance + Not Covered.
     */
    totalPatientResponsibility?: number;
    /**
     * The amount that an HRA contributed to payment of the patient portion.
     */
    totalHRAPaidAmount?: number;
    /**
     * Reason code for Not Covered or other detailed message.
     */
    claimMessageCode?: string;
    /**
     * Description of why it is not covered or other detailed message.
     */
    claimMessageDescription?: string;
    /**
     * Value representing the Document ID of the EOB to link to the actual EOB on tenant system or local document source.
     */
    documentId?: string;
    /**
     *  The claimProtected flag will be applicable for Member context (not for Provider context).    The Value is true if the claim status is Pending or HIPAA sensitive.
     */
    claimProtected?: boolean;
}
export declare namespace Claim {
    enum ClaimSubTypeEnum {
        Medical,
        Hospital,
        Dental,
    }
    enum NetworkIndicatorEnum {
        InNetwork,
        OutOfNetwork,
    }
}
