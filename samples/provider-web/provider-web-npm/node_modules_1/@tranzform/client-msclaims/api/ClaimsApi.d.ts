import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IclaimEstimatePostParams {
    /** category details for which MDM data is required.   */
    claimRequest: models.ClaimRequest;
}
export interface IclaimPostParams {
    /** category details for which MDM data is required.   */
    claimRequest: models.ClaimRequest;
}
export interface IclaimsCategoryGetParams {
    /** category details for which MDM data is required.   */
    category: string;
}
export interface IclaimsClaimidDownloadTypeGetParams {
    /** ID of the claim to retrieve */
    claimid: string;
    /** The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;. */
    type: string;
    /** Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.  */
    claimtype: string;
}
export interface IclaimsClaimidGetParams {
    /** ID of the claim to retrieve */
    claimid: string;
    /** Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.  */
    claimtype: string;
}
export interface IclaimsDocumentDocidGetParams {
    /** ID of the document to retrieve */
    docid: string;
    /** Unique ID of the claim from the system of the payer. */
    claimid: string;
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantenrollmentid: string;
}
export interface IclaimsDownloadTypeGetParams {
    /** The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;. */
    type: string;
    /** Unique ID of the claim from the system of the payer. */
    claimid?: string;
    /** Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.  */
    tenantenrollmentid?: string;
    /** Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY.  */
    fromdate?: string;
    /** Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY  */
    todate?: string;
    /** Status of the claim.  Examles are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.  */
    claimstatus?: string;
    /** Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.  */
    claimtype?: string;
    /** Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.  */
    claimsubtype?: string;
    /** Member First Name */
    memberfirstname?: string;
    /** Member Last Name */
    memberlastname?: string;
    /** Member Middle Name */
    membermiddlename?: string;
    /** Provider ID */
    providerid?: string;
    /** Place Of Service */
    placeofservice?: string;
    /** Attribute name that the current set of claims are sorted by */
    sortby?: string;
    /** Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default. */
    orderby?: string;
    /** Navigate to a specific page in the claims records.  If no value is passed, the first page is returned. */
    pagenumber?: number;
    /** If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply. */
    pagesize?: number;
}
export interface IclaimsGetParams {
    /** Unique ID of the claim from the system of the payer. */
    claimid?: string;
    /** Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.  */
    tenantenrollmentid?: string;
    /** Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY  */
    fromdate?: string;
    /** Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY  */
    todate?: string;
    /** Status of the claim.  Examples are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.  */
    claimstatus?: string;
    /** Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.  */
    claimtype?: string;
    /** Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.  */
    claimsubtype?: string;
    /** Member First Name */
    memberfirstname?: string;
    /** Member Last Name */
    memberlastname?: string;
    /** Member Middle Name */
    membermiddlename?: string;
    /** Provider ID */
    providerid?: string;
    /** Place Of Service */
    placeofservice?: string;
    /** Attribute name that the current set of claims are sorted by */
    sortby?: string;
    /** Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default. */
    orderby?: string;
    /** Navigate to a specific page in the claims records.  If no value is passed, the first page is returned. */
    pagenumber?: number;
    /** If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply. */
    pagesize?: number;
}
export interface IclaimsQuickviewViewsGetParams {
    /** Unique ID assigned for the specific tenant.   */
    tenantid: string;
    /** User ID assigned for the specific member.   */
    userid?: string;
}
export interface IclaimsTaxstatementTypeGetParams {
    /** The format type of the download. Valid values is \&quot;pdf\&quot; */
    type: string;
    /** Search From Date.  The format is MM/DD/YYYY  */
    fromdate: string;
    /** Search To Date.    Default is the current date. The format is MM/DD/YYYY  */
    todate: string;
    /** Status of the claim.  Sample value is &#39;Finalized&#39;.   If you do not include this query parameter in the request, then all claims in Received, Pending, and Finalized status are returned.   Values are validated against MDM (Master Data Management).  */
    claimstatus: string;
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantenrollmentid?: string;
    /** Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.  */
    claimtype?: string;
}
export interface IdiagnosiscodesGetParams {
    /** Diagnosis type (ICD-9 / ICD-10) */
    diagnotype: string;
    /** Diagnosis Code */
    diagnocode?: string;
    /** Diagnosis Code Description */
    diagnocodedesc?: string;
}
export interface ImemberClaimsGetParams {
    /** Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.  */
    tenantenrollmentid: string;
    /** DOB of the member  */
    memberdob?: string;
}
export interface IprocedurecodesGetParams {
    /** Procedure Code */
    procedurecode?: string;
    /** Procedure Code Description */
    procedurecodedesc?: string;
}
export declare class ClaimsApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    * Estimation Creation
    * Estimation Creation
    * @param params Parameters.
    */
    claimEstimatePost(params: IclaimEstimatePostParams, extraHttpRequestParams?: any): Observable<models.ClaimDetail>;
    /**
    * Claim Creation
    * Claim Creation
    * @param params Parameters.
    */
    claimPost(params: IclaimPostParams, extraHttpRequestParams?: any): Observable<models.ClaimDetail>;
    /**
    * Get Master data details
    * Retrieve Master details
    * @param params Parameters.
    */
    claimsCategoryGet(params: IclaimsCategoryGetParams, extraHttpRequestParams?: any): Observable<any>;
    /**
    * Export Claim Details
    * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; and claimSubType is \&quot;Hospital\&quot; (Hospital Claim). The response is a byte array.
    * @param params Parameters.
    */
    claimsClaimidDownloadTypeGet(params: IclaimsClaimidDownloadTypeGetParams, extraHttpRequestParams?: any): Observable<{}>;
    /**
    * Get Claim Details
    * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; (Medical) and claimSubType is \&quot;Hospital\&quot; (Hospital Claim).
    * @param params Parameters.
    */
    claimsClaimidGet(params: IclaimsClaimidGetParams, extraHttpRequestParams?: any): Observable<models.ClaimDetail>;
    /**
    * Get Claim EOB Details
    * Retrieve explanation of benefits details for the specified claim.  Response is a byte array.
    * @param params Parameters.
    */
    claimsDocumentDocidGet(params: IclaimsDocumentDocidGetParams, extraHttpRequestParams?: any): Observable<{}>;
    /**
    * Export Claim Summary List
    * Retrieve claims based on input provided from query parameters. There is no request payload required to be passed while calling this service.   However, one of the following combination of query parameters must be passed.   Response is a byte array.
    * @param params Parameters.
    */
    claimsDownloadTypeGet(params: IclaimsDownloadTypeGetParams, extraHttpRequestParams?: any): Observable<{}>;
    /**
    * Get Summary List of Claims
    * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.  Conditions:                      * If the user context is \&quot;Provider\&quot; then &#39;providerid  / EXTU_ID&#39; is mandatory parameter                      * If the user context is \&quot;Member\&quot;, then &#39;tenantenrollmentid&#39; can be optional              in the case of viewing all family members summary view.             Note: Subsriber ID will be passed from login context                        * claim ID is not present in the query param then &#39;fromdate&#39; and &#39;todate&#39; is mandatory
    * @param params Parameters.
    */
    claimsGet(params: IclaimsGetParams, extraHttpRequestParams?: any): Observable<models.ClaimResponse>;
    /**
    * Get Claim Details for Quick View
    * Retrieve Claim details for Quick View
    * @param params Parameters.
    */
    claimsQuickviewViewsGet(params: IclaimsQuickviewViewsGetParams, extraHttpRequestParams?: any): Observable<Array<models.QuickViewDetail>>;
    /**
    * Get Claim Details for Tax Purpose
    * Retrieve Claim details for tax purpose.
    * @param params Parameters.
    */
    claimsTaxstatementTypeGet(params: IclaimsTaxstatementTypeGetParams, extraHttpRequestParams?: any): Observable<{}>;
    /**
    * Get List of diagnosis codes
    * Retrieve List Of diagnosis details
    * @param params Parameters.
    */
    diagnosiscodesGet(params: IdiagnosiscodesGetParams, extraHttpRequestParams?: any): Observable<Array<models.DiagnosisDetails>>;
    /**
    * Get List of Claims for the Member
    * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.
    * @param params Parameters.
    */
    memberClaimsGet(params: ImemberClaimsGetParams, extraHttpRequestParams?: any): Observable<models.MemberClaimResponse>;
    /**
    * Get List of procedure codes
    * Retrieve List of procedure details Conditions:                    * Either procedure code or procedure code description is mandatory parameter
    * @param params Parameters.
    */
    procedurecodesGet(params: IprocedurecodesGetParams, extraHttpRequestParams?: any): Observable<Array<models.ProcedureDetails>>;
    /**
     * Estimation Creation
     * Estimation Creation
     * @param params.claimRequest category details for which MDM data is required.
     */
    claimEstimatePostWithHttpInfo(params: IclaimEstimatePostParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Claim Creation
     * Claim Creation
     * @param params.claimRequest category details for which MDM data is required.
     */
    claimPostWithHttpInfo(params: IclaimPostParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Master data details
     * Retrieve Master details
     * @param params.category category details for which MDM data is required.
     */
    claimsCategoryGetWithHttpInfo(params: IclaimsCategoryGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Export Claim Details
     * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; and claimSubType is \&quot;Hospital\&quot; (Hospital Claim). The response is a byte array.
     * @param params.claimid ID of the claim to retrieve
     * @param params.type The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    claimsClaimidDownloadTypeGetWithHttpInfo(params: IclaimsClaimidDownloadTypeGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Claim Details
     * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; (Medical) and claimSubType is \&quot;Hospital\&quot; (Hospital Claim).
     * @param params.claimid ID of the claim to retrieve
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    claimsClaimidGetWithHttpInfo(params: IclaimsClaimidGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Claim EOB Details
     * Retrieve explanation of benefits details for the specified claim.  Response is a byte array.
     * @param params.docid ID of the document to retrieve
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    claimsDocumentDocidGetWithHttpInfo(params: IclaimsDocumentDocidGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Export Claim Summary List
     * Retrieve claims based on input provided from query parameters. There is no request payload required to be passed while calling this service.   However, one of the following combination of query parameters must be passed.   Response is a byte array.
     * @param params.type The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;.
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.fromdate Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY.
     * @param params.todate Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Examles are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     * @param params.claimsubtype Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.
     * @param params.memberfirstname Member First Name
     * @param params.memberlastname Member Last Name
     * @param params.membermiddlename Member Middle Name
     * @param params.providerid Provider ID
     * @param params.placeofservice Place Of Service
     * @param params.sortby Attribute name that the current set of claims are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the claims records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    claimsDownloadTypeGetWithHttpInfo(params: IclaimsDownloadTypeGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Summary List of Claims
     * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.  Conditions:                      * If the user context is \&quot;Provider\&quot; then &#39;providerid  / EXTU_ID&#39; is mandatory parameter                      * If the user context is \&quot;Member\&quot;, then &#39;tenantenrollmentid&#39; can be optional              in the case of viewing all family members summary view.             Note: Subsriber ID will be passed from login context                        * claim ID is not present in the query param then &#39;fromdate&#39; and &#39;todate&#39; is mandatory
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.fromdate Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY
     * @param params.todate Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Examples are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     * @param params.claimsubtype Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.
     * @param params.memberfirstname Member First Name
     * @param params.memberlastname Member Last Name
     * @param params.membermiddlename Member Middle Name
     * @param params.providerid Provider ID
     * @param params.placeofservice Place Of Service
     * @param params.sortby Attribute name that the current set of claims are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the claims records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    claimsGetWithHttpInfo(params: IclaimsGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Claim Details for Quick View
     * Retrieve Claim details for Quick View
     * @param params.tenantid Unique ID assigned for the specific tenant.
     * @param params.userid User ID assigned for the specific member.
     */
    claimsQuickviewViewsGetWithHttpInfo(params: IclaimsQuickviewViewsGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Claim Details for Tax Purpose
     * Retrieve Claim details for tax purpose.
     * @param params.type The format type of the download. Valid values is \&quot;pdf\&quot;
     * @param params.fromdate Search From Date.  The format is MM/DD/YYYY
     * @param params.todate Search To Date.    Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Sample value is &#39;Finalized&#39;.   If you do not include this query parameter in the request, then all claims in Received, Pending, and Finalized status are returned.   Values are validated against MDM (Master Data Management).
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    claimsTaxstatementTypeGetWithHttpInfo(params: IclaimsTaxstatementTypeGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of diagnosis codes
     * Retrieve List Of diagnosis details
     * @param params.diagnotype Diagnosis type (ICD-9 / ICD-10)
     * @param params.diagnocode Diagnosis Code
     * @param params.diagnocodedesc Diagnosis Code Description
     */
    diagnosiscodesGetWithHttpInfo(params: IdiagnosiscodesGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of Claims for the Member
     * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.memberdob DOB of the member
     */
    memberClaimsGetWithHttpInfo(params: ImemberClaimsGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of procedure codes
     * Retrieve List of procedure details Conditions:                    * Either procedure code or procedure code description is mandatory parameter
     * @param params.procedurecode Procedure Code
     * @param params.procedurecodedesc Procedure Code Description
     */
    procedurecodesGetWithHttpInfo(params: IprocedurecodesGetParams, extraHttpRequestParams?: any): Observable<Response>;
}
