/**
 * TranZform Claims API - Business Service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.00.005.001
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var ClaimsApi = /** @class */ (function () {
    function ClaimsApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/msclaims';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    * Estimation Creation
    * Estimation Creation
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimEstimatePost = function (params, extraHttpRequestParams) {
        return this.claimEstimatePostWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Claim Creation
    * Claim Creation
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimPost = function (params, extraHttpRequestParams) {
        return this.claimPostWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Master data details
    * Retrieve Master details
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsCategoryGet = function (params, extraHttpRequestParams) {
        return this.claimsCategoryGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Export Claim Details
    * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; and claimSubType is \&quot;Hospital\&quot; (Hospital Claim). The response is a byte array.
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsClaimidDownloadTypeGet = function (params, extraHttpRequestParams) {
        return this.claimsClaimidDownloadTypeGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Claim Details
    * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; (Medical) and claimSubType is \&quot;Hospital\&quot; (Hospital Claim).
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsClaimidGet = function (params, extraHttpRequestParams) {
        return this.claimsClaimidGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Claim EOB Details
    * Retrieve explanation of benefits details for the specified claim.  Response is a byte array.
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsDocumentDocidGet = function (params, extraHttpRequestParams) {
        return this.claimsDocumentDocidGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Export Claim Summary List
    * Retrieve claims based on input provided from query parameters. There is no request payload required to be passed while calling this service.   However, one of the following combination of query parameters must be passed.   Response is a byte array.
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsDownloadTypeGet = function (params, extraHttpRequestParams) {
        return this.claimsDownloadTypeGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Summary List of Claims
    * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.  Conditions:                      * If the user context is \&quot;Provider\&quot; then &#39;providerid  / EXTU_ID&#39; is mandatory parameter                      * If the user context is \&quot;Member\&quot;, then &#39;tenantenrollmentid&#39; can be optional              in the case of viewing all family members summary view.             Note: Subsriber ID will be passed from login context                        * claim ID is not present in the query param then &#39;fromdate&#39; and &#39;todate&#39; is mandatory
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsGet = function (params, extraHttpRequestParams) {
        return this.claimsGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Claim Details for Quick View
    * Retrieve Claim details for Quick View
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsQuickviewViewsGet = function (params, extraHttpRequestParams) {
        return this.claimsQuickviewViewsGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Claim Details for Tax Purpose
    * Retrieve Claim details for tax purpose.
    * @param params Parameters.
    */
    ClaimsApi.prototype.claimsTaxstatementTypeGet = function (params, extraHttpRequestParams) {
        return this.claimsTaxstatementTypeGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of diagnosis codes
    * Retrieve List Of diagnosis details
    * @param params Parameters.
    */
    ClaimsApi.prototype.diagnosiscodesGet = function (params, extraHttpRequestParams) {
        return this.diagnosiscodesGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of Claims for the Member
    * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.
    * @param params Parameters.
    */
    ClaimsApi.prototype.memberClaimsGet = function (params, extraHttpRequestParams) {
        return this.memberClaimsGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of procedure codes
    * Retrieve List of procedure details Conditions:                    * Either procedure code or procedure code description is mandatory parameter
    * @param params Parameters.
    */
    ClaimsApi.prototype.procedurecodesGet = function (params, extraHttpRequestParams) {
        return this.procedurecodesGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Estimation Creation
     * Estimation Creation
     * @param params.claimRequest category details for which MDM data is required.
     */
    ClaimsApi.prototype.claimEstimatePostWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claim/estimate';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.claimRequest' is not null or undefined
        if (params.claimRequest === null || params.claimRequest === undefined) {
            throw new Error('Required parameter params.claimRequest was null or undefined when calling claimEstimatePost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: params.claimRequest == null ? '' : JSON.stringify(params.claimRequest),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Claim Creation
     * Claim Creation
     * @param params.claimRequest category details for which MDM data is required.
     */
    ClaimsApi.prototype.claimPostWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claim';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.claimRequest' is not null or undefined
        if (params.claimRequest === null || params.claimRequest === undefined) {
            throw new Error('Required parameter params.claimRequest was null or undefined when calling claimPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: params.claimRequest == null ? '' : JSON.stringify(params.claimRequest),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Master data details
     * Retrieve Master details
     * @param params.category category details for which MDM data is required.
     */
    ClaimsApi.prototype.claimsCategoryGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/category';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.category' is not null or undefined
        if (params.category === null || params.category === undefined) {
            throw new Error('Required parameter params.category was null or undefined when calling claimsCategoryGet.');
        }
        if (params.category !== undefined) {
            queryParameters.set('category', params.category);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Export Claim Details
     * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; and claimSubType is \&quot;Hospital\&quot; (Hospital Claim). The response is a byte array.
     * @param params.claimid ID of the claim to retrieve
     * @param params.type The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    ClaimsApi.prototype.claimsClaimidDownloadTypeGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/${claimid}/download/${type}'
            .replace('${' + 'claimid' + '}', String(params.claimid))
            .replace('${' + 'type' + '}', String(params.type));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.claimid' is not null or undefined
        if (params.claimid === null || params.claimid === undefined) {
            throw new Error('Required parameter params.claimid was null or undefined when calling claimsClaimidDownloadTypeGet.');
        }
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling claimsClaimidDownloadTypeGet.');
        }
        // verify required parameter 'params.claimtype' is not null or undefined
        if (params.claimtype === null || params.claimtype === undefined) {
            throw new Error('Required parameter params.claimtype was null or undefined when calling claimsClaimidDownloadTypeGet.');
        }
        if (params.claimtype !== undefined) {
            queryParameters.set('claimtype', params.claimtype);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Claim Details
     * Retrieve a claim by its ID.  The hospitalDetail section is only included in the response if the claimType is \&quot;Medical\&quot; (Medical) and claimSubType is \&quot;Hospital\&quot; (Hospital Claim).
     * @param params.claimid ID of the claim to retrieve
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    ClaimsApi.prototype.claimsClaimidGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/${claimid}'
            .replace('${' + 'claimid' + '}', String(params.claimid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.claimid' is not null or undefined
        if (params.claimid === null || params.claimid === undefined) {
            throw new Error('Required parameter params.claimid was null or undefined when calling claimsClaimidGet.');
        }
        // verify required parameter 'params.claimtype' is not null or undefined
        if (params.claimtype === null || params.claimtype === undefined) {
            throw new Error('Required parameter params.claimtype was null or undefined when calling claimsClaimidGet.');
        }
        if (params.claimtype !== undefined) {
            queryParameters.set('claimtype', params.claimtype);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Claim EOB Details
     * Retrieve explanation of benefits details for the specified claim.  Response is a byte array.
     * @param params.docid ID of the document to retrieve
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ClaimsApi.prototype.claimsDocumentDocidGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/document/${docid}'
            .replace('${' + 'docid' + '}', String(params.docid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.docid' is not null or undefined
        if (params.docid === null || params.docid === undefined) {
            throw new Error('Required parameter params.docid was null or undefined when calling claimsDocumentDocidGet.');
        }
        // verify required parameter 'params.claimid' is not null or undefined
        if (params.claimid === null || params.claimid === undefined) {
            throw new Error('Required parameter params.claimid was null or undefined when calling claimsDocumentDocidGet.');
        }
        // verify required parameter 'params.tenantenrollmentid' is not null or undefined
        if (params.tenantenrollmentid === null || params.tenantenrollmentid === undefined) {
            throw new Error('Required parameter params.tenantenrollmentid was null or undefined when calling claimsDocumentDocidGet.');
        }
        if (params.claimid !== undefined) {
            queryParameters.set('claimid', params.claimid);
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Export Claim Summary List
     * Retrieve claims based on input provided from query parameters. There is no request payload required to be passed while calling this service.   However, one of the following combination of query parameters must be passed.   Response is a byte array.
     * @param params.type The format type of the download. Valid values are \&quot;pdf\&quot; and \&quot;excel\&quot;.
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.fromdate Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY.
     * @param params.todate Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Examles are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     * @param params.claimsubtype Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.
     * @param params.memberfirstname Member First Name
     * @param params.memberlastname Member Last Name
     * @param params.membermiddlename Member Middle Name
     * @param params.providerid Provider ID
     * @param params.placeofservice Place Of Service
     * @param params.sortby Attribute name that the current set of claims are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the claims records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    ClaimsApi.prototype.claimsDownloadTypeGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/download/${type}'
            .replace('${' + 'type' + '}', String(params.type));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling claimsDownloadTypeGet.');
        }
        if (params.claimid !== undefined) {
            queryParameters.set('claimid', params.claimid);
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.fromdate !== undefined) {
            queryParameters.set('fromdate', params.fromdate); //.toISOString());
        }
        if (params.todate !== undefined) {
            queryParameters.set('todate', params.todate); //.toISOString());
        }
        if (params.claimstatus !== undefined) {
            queryParameters.set('claimstatus', params.claimstatus);
        }
        if (params.claimtype !== undefined) {
            queryParameters.set('claimtype', params.claimtype);
        }
        if (params.claimsubtype !== undefined) {
            queryParameters.set('claimsubtype', params.claimsubtype);
        }
        if (params.memberfirstname !== undefined) {
            queryParameters.set('memberfirstname', params.memberfirstname);
        }
        if (params.memberlastname !== undefined) {
            queryParameters.set('memberlastname', params.memberlastname);
        }
        if (params.membermiddlename !== undefined) {
            queryParameters.set('membermiddlename', params.membermiddlename);
        }
        if (params.providerid !== undefined) {
            queryParameters.set('providerid', params.providerid);
        }
        if (params.placeofservice !== undefined) {
            queryParameters.set('placeofservice', params.placeofservice);
        }
        if (params.sortby !== undefined) {
            queryParameters.set('sortby', params.sortby);
        }
        if (params.orderby !== undefined) {
            queryParameters.set('orderby', params.orderby);
        }
        if (params.pagenumber !== undefined) {
            queryParameters.set('pagenumber', params.pagenumber);
        }
        if (params.pagesize !== undefined) {
            queryParameters.set('pagesize', params.pagesize);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Summary List of Claims
     * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.  Conditions:                      * If the user context is \&quot;Provider\&quot; then &#39;providerid  / EXTU_ID&#39; is mandatory parameter                      * If the user context is \&quot;Member\&quot;, then &#39;tenantenrollmentid&#39; can be optional              in the case of viewing all family members summary view.             Note: Subsriber ID will be passed from login context                        * claim ID is not present in the query param then &#39;fromdate&#39; and &#39;todate&#39; is mandatory
     * @param params.claimid Unique ID of the claim from the system of the payer.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.fromdate Search From Date. This is optional but if you set a value for it you must also set a value for toDate. Default is current date - 30 days. The format is MM/DD/YYYY
     * @param params.todate Search To Date.    This is optional but if you set a value for it you must also set a value for fromDate.  Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Examples are  &#39;Received&#39;, &#39;Pending&#39;, &#39;Finalized&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claims in Received, Pending, Finalized, and Deleted status are returned.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     * @param params.claimsubtype Subtype of the claim.  Valid values are &#39;Medical&#39; for Medical Claim (claimType &#x3D; Medical), &#39;Hospital&#39; for Hospital Claim (claimType &#x3D; Medical), &#39;Dental&#39; for Dental Claim (claimType &#x3D; Dental).   If you do not include this query parameter in the request, then all claim subtypes are returned.
     * @param params.memberfirstname Member First Name
     * @param params.memberlastname Member Last Name
     * @param params.membermiddlename Member Middle Name
     * @param params.providerid Provider ID
     * @param params.placeofservice Place Of Service
     * @param params.sortby Attribute name that the current set of claims are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the claims records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    ClaimsApi.prototype.claimsGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.claimid !== undefined) {
            queryParameters.set('claimid', params.claimid);
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.fromdate !== undefined) {
            queryParameters.set('fromdate', params.fromdate); //.toISOString());
        }
        if (params.todate !== undefined) {
            queryParameters.set('todate', params.todate); //.toISOString());
        }
        if (params.claimstatus !== undefined) {
            queryParameters.set('claimstatus', params.claimstatus);
        }
        if (params.claimtype !== undefined) {
            queryParameters.set('claimtype', params.claimtype);
        }
        if (params.claimsubtype !== undefined) {
            queryParameters.set('claimsubtype', params.claimsubtype);
        }
        if (params.memberfirstname !== undefined) {
            queryParameters.set('memberfirstname', params.memberfirstname);
        }
        if (params.memberlastname !== undefined) {
            queryParameters.set('memberlastname', params.memberlastname);
        }
        if (params.membermiddlename !== undefined) {
            queryParameters.set('membermiddlename', params.membermiddlename);
        }
        if (params.providerid !== undefined) {
            queryParameters.set('providerid', params.providerid);
        }
        if (params.placeofservice !== undefined) {
            queryParameters.set('placeofservice', params.placeofservice);
        }
        if (params.sortby !== undefined) {
            queryParameters.set('sortby', params.sortby);
        }
        if (params.orderby !== undefined) {
            queryParameters.set('orderby', params.orderby);
        }
        if (params.pagenumber !== undefined) {
            queryParameters.set('pagenumber', params.pagenumber);
        }
        if (params.pagesize !== undefined) {
            queryParameters.set('pagesize', params.pagesize);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Claim Details for Quick View
     * Retrieve Claim details for Quick View
     * @param params.tenantid Unique ID assigned for the specific tenant.
     * @param params.userid User ID assigned for the specific member.
     */
    ClaimsApi.prototype.claimsQuickviewViewsGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/quickview/views';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantid' is not null or undefined
        if (params.tenantid === null || params.tenantid === undefined) {
            throw new Error('Required parameter params.tenantid was null or undefined when calling claimsQuickviewViewsGet.');
        }
        if (params.tenantid !== undefined) {
            queryParameters.set('tenantid', params.tenantid);
        }
        if (params.userid !== undefined) {
            queryParameters.set('userid', params.userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Claim Details for Tax Purpose
     * Retrieve Claim details for tax purpose.
     * @param params.type The format type of the download. Valid values is \&quot;pdf\&quot;
     * @param params.fromdate Search From Date.  The format is MM/DD/YYYY
     * @param params.todate Search To Date.    Default is the current date. The format is MM/DD/YYYY
     * @param params.claimstatus Status of the claim.  Sample value is &#39;Finalized&#39;.   If you do not include this query parameter in the request, then all claims in Received, Pending, and Finalized status are returned.   Values are validated against MDM (Master Data Management).
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.claimtype Type of the claim.  Examples are  &#39;Medical&#39;, &#39;Dental&#39;. Values are validated against MDM (Master Data Management).  If you do not include this query parameter in the request, then all claim types are returned.
     */
    ClaimsApi.prototype.claimsTaxstatementTypeGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/claims/taxstatement/${type}'
            .replace('${' + 'type' + '}', String(params.type));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling claimsTaxstatementTypeGet.');
        }
        // verify required parameter 'params.fromdate' is not null or undefined
        if (params.fromdate === null || params.fromdate === undefined) {
            throw new Error('Required parameter params.fromdate was null or undefined when calling claimsTaxstatementTypeGet.');
        }
        // verify required parameter 'params.todate' is not null or undefined
        if (params.todate === null || params.todate === undefined) {
            throw new Error('Required parameter params.todate was null or undefined when calling claimsTaxstatementTypeGet.');
        }
        // verify required parameter 'params.claimstatus' is not null or undefined
        if (params.claimstatus === null || params.claimstatus === undefined) {
            throw new Error('Required parameter params.claimstatus was null or undefined when calling claimsTaxstatementTypeGet.');
        }
        if (params.fromdate !== undefined) {
            queryParameters.set('fromdate', params.fromdate); //.toISOString());
        }
        if (params.todate !== undefined) {
            queryParameters.set('todate', params.todate); //.toISOString());
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.claimstatus !== undefined) {
            queryParameters.set('claimstatus', params.claimstatus);
        }
        if (params.claimtype !== undefined) {
            queryParameters.set('claimtype', params.claimtype);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of diagnosis codes
     * Retrieve List Of diagnosis details
     * @param params.diagnotype Diagnosis type (ICD-9 / ICD-10)
     * @param params.diagnocode Diagnosis Code
     * @param params.diagnocodedesc Diagnosis Code Description
     */
    ClaimsApi.prototype.diagnosiscodesGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/diagnosiscodes';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.diagnotype' is not null or undefined
        if (params.diagnotype === null || params.diagnotype === undefined) {
            throw new Error('Required parameter params.diagnotype was null or undefined when calling diagnosiscodesGet.');
        }
        if (params.diagnotype !== undefined) {
            queryParameters.set('diagnotype', params.diagnotype);
        }
        if (params.diagnocode !== undefined) {
            queryParameters.set('diagnocode', params.diagnocode);
        }
        if (params.diagnocodedesc !== undefined) {
            queryParameters.set('diagnocodedesc', params.diagnocodedesc);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of Claims for the Member
     * Retrieve claims based on input given from query parameters. There is no request payload required to be passed while calling this service.
     * @param params.tenantenrollmentid Unique ID assigned by the payer to the member; internal Member ID; not external facing.  This element is required if only a single member&#39;s claims are requested.
     * @param params.memberdob DOB of the member
     */
    ClaimsApi.prototype.memberClaimsGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/claims';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantenrollmentid' is not null or undefined
        if (params.tenantenrollmentid === null || params.tenantenrollmentid === undefined) {
            throw new Error('Required parameter params.tenantenrollmentid was null or undefined when calling memberClaimsGet.');
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.memberdob !== undefined) {
            queryParameters.set('memberdob', params.memberdob); //.toISOString());
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of procedure codes
     * Retrieve List of procedure details Conditions:                    * Either procedure code or procedure code description is mandatory parameter
     * @param params.procedurecode Procedure Code
     * @param params.procedurecodedesc Procedure Code Description
     */
    ClaimsApi.prototype.procedurecodesGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/procedurecodes';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.procedurecode !== undefined) {
            queryParameters.set('procedurecode', params.procedurecode);
        }
        if (params.procedurecodedesc !== undefined) {
            queryParameters.set('procedurecodedesc', params.procedurecodedesc);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    ClaimsApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ClaimsApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return ClaimsApi;
}());
export { ClaimsApi };
//# sourceMappingURL=ClaimsApi.js.map