/**
 * TranZform Auths and Referrals API - Get All Auth Referrals Export
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.00.004.004
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var AuthorizationsAndReferralsApi = (function () {
    function AuthorizationsAndReferralsApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/authreferral-web';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    * Get Master data details
    * Retrieve Master details
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsCategoryGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsCategoryGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Export Group Auths and Referrals
    * The GetAllAuthsReferralsExport API is invoked to download a summary of all authorization and referrals of member along with its dependents, who have provided access in either PDF or Excel format, based on user selection.  The filters which can be used are memberId, productCategory, status, startDate and endDate.  The default date range is 30 days passed and 30 days into the future. However, you can override the date range.  There are no page filters included with this API, as this is intended for downloading to PDF or Excel.
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsDownloadGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsDownloadGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Group Auths and Referrals
    * The GetAllAuthReferrals API lists the authorization/referrals of logged in member and its dependents who have provided him/her access, if the logged in member is a Subscriber/Spouse. But if the logged in member is a major dependent who is not a Spouse, he/she will be able to see only his/her data.  Since this API is intended for use by the UI, page filters are included as query parameters.  The filters which can be used are memberId, productCategory, status, startDate and endDate.  The default date range is 30 days passed and 30 days into the future, however, you can override the date range.
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Auths and Referral Details
    * The GetAuthReferralDetail API fetches the details of the authorization and referral based on the reference Id
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsReferenceIdGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsReferenceIdGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Export Auth and Referral Summary
    * The GetIndividualAuthReferralsExport API is invoked to download the individual authorization and referral summary of an individual member, based on the reference ID and the sequence ID. Export is in PDF.
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsReferenceIdSequenceSequenceNoDownloadGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsReferenceIdSequenceSequenceNoDownloadGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Auths and Referrals
    * The GetAllAuthReferrals API lists the authorization/referrals based on the search parameters entered    The filters which can be used are memberId, memberfirstname,memberlastname,membermiddlename,productcategory, servicestartdate,serviceenddate,status, authorizationid,servicetype, submissionstartdate,submissionenddate,requestingprovider,renderingprovider.    The submission default date range is 30 days passed and 30 days into the future, however, you can override the date range.
    * @param params Parameters.
    */
    AuthorizationsAndReferralsApi.prototype.authnreferralsSearchGet = function (params, extraHttpRequestParams) {
        return this.authnreferralsSearchGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get Master data details
     * Retrieve Master details
     * @param params.category category details for which MDM data is required.
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsCategoryGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals/category';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.category' is not null or undefined
        if (params.category === null || params.category === undefined) {
            throw new Error('Required parameter params.category was null or undefined when calling authnreferralsCategoryGet.');
        }
        if (params.category !== undefined) {
            queryParameters.set('category', params.category);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Export Group Auths and Referrals
     * The GetAllAuthsReferralsExport API is invoked to download a summary of all authorization and referrals of member along with its dependents, who have provided access in either PDF or Excel format, based on user selection.  The filters which can be used are memberId, productCategory, status, startDate and endDate.  The default date range is 30 days passed and 30 days into the future. However, you can override the date range.  There are no page filters included with this API, as this is intended for downloading to PDF or Excel.
     * @param params.type Specifies the format of the output in which the summary is downloaed.
     * @param params.tenantenrollmentid Filter data on the basis of memberId provided by the payer to uniquely identify the member. This can be either subscriber or dependent memberId
     * @param params.productcategory Filter data on the basis of the broad category to which the Product belongs.
     * @param params.startdate Filter on the basis of Requested Service Start Date of the authorization request. Date is in MM/dd/yyyy format.
     * @param params.enddate Filter data on the basis of Requested End Date of authorization request. Date is in MM/dd/yyyy format
     * @param params.status Filter data on the basis of Status of the authorization request
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsDownloadGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals/download';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling authnreferralsDownloadGet.');
        }
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        if (params.startdate !== undefined) {
            queryParameters.set('startdate', params.startdate);
        }
        if (params.enddate !== undefined) {
            queryParameters.set('enddate', params.enddate);
        }
        if (params.status !== undefined) {
            queryParameters.set('status', params.status);
        }
        if (params.type !== undefined) {
            queryParameters.set('type', params.type);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Group Auths and Referrals
     * The GetAllAuthReferrals API lists the authorization/referrals of logged in member and its dependents who have provided him/her access, if the logged in member is a Subscriber/Spouse. But if the logged in member is a major dependent who is not a Spouse, he/she will be able to see only his/her data.  Since this API is intended for use by the UI, page filters are included as query parameters.  The filters which can be used are memberId, productCategory, status, startDate and endDate.  The default date range is 30 days passed and 30 days into the future, however, you can override the date range.
     * @param params.tenantenrollmentid Filter data on the basis of memberId provided by the payer to uniquely identify the member.
     * @param params.productcategory Filter data on the basis of the broad category to which the Product belongs
     * @param params.startdate Filter data on the basis of Requested Service End Date of the authorization request. Date in MM/dd/yyyy format format
     * @param params.enddate Filter data on the basis of Requested Service End Date of the authorization request. Date in MM/dd/yyyy format
     * @param params.status Filter data on the basis of Status of the authorization request.
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        if (params.startdate !== undefined) {
            queryParameters.set('startdate', params.startdate);
        }
        if (params.enddate !== undefined) {
            queryParameters.set('enddate', params.enddate);
        }
        if (params.status !== undefined) {
            queryParameters.set('status', params.status);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Auths and Referral Details
     * The GetAuthReferralDetail API fetches the details of the authorization and referral based on the reference Id
     * @param params.referenceId Unique Id the authorization and referral for which details will be fetched.
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsReferenceIdGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals/${referenceId}'
            .replace('${' + 'referenceId' + '}', String(params.referenceId));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.referenceId' is not null or undefined
        if (params.referenceId === null || params.referenceId === undefined) {
            throw new Error('Required parameter params.referenceId was null or undefined when calling authnreferralsReferenceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Export Auth and Referral Summary
     * The GetIndividualAuthReferralsExport API is invoked to download the individual authorization and referral summary of an individual member, based on the reference ID and the sequence ID. Export is in PDF.
     * @param params.type Specifies the format of the output in which the summary is downloaded.
     * @param params.sequenceNo Sequence Number for a particular Reference ID in case there are multiple iterations associated with the same Reference ID
     * @param params.referenceId The unique Identification used to reference a particular Authorization or Referral
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsReferenceIdSequenceSequenceNoDownloadGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals/${referenceId}/sequence/${sequenceNo}/download'
            .replace('${' + 'sequenceNo' + '}', String(params.sequenceNo))
            .replace('${' + 'referenceId' + '}', String(params.referenceId));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling authnreferralsReferenceIdSequenceSequenceNoDownloadGet.');
        }
        // verify required parameter 'params.sequenceNo' is not null or undefined
        if (params.sequenceNo === null || params.sequenceNo === undefined) {
            throw new Error('Required parameter params.sequenceNo was null or undefined when calling authnreferralsReferenceIdSequenceSequenceNoDownloadGet.');
        }
        // verify required parameter 'params.referenceId' is not null or undefined
        if (params.referenceId === null || params.referenceId === undefined) {
            throw new Error('Required parameter params.referenceId was null or undefined when calling authnreferralsReferenceIdSequenceSequenceNoDownloadGet.');
        }
        if (params.type !== undefined) {
            queryParameters.set('type', params.type);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Auths and Referrals
     * The GetAllAuthReferrals API lists the authorization/referrals based on the search parameters entered    The filters which can be used are memberId, memberfirstname,memberlastname,membermiddlename,productcategory, servicestartdate,serviceenddate,status, authorizationid,servicetype, submissionstartdate,submissionenddate,requestingprovider,renderingprovider.    The submission default date range is 30 days passed and 30 days into the future, however, you can override the date range.
     * @param params.tenantenrollmentid Filter data on the basis of memberId provided by the payer to uniquely identify the member.
     * @param params.memberfirstname Filter data on the basis of memberFirstName provided
     * @param params.memberlastname Filter data on the basis of memberLastName provided
     * @param params.membermiddlename Filter data on the basis of memberMiddleName provided
     * @param params.productcategory Filter data on the basis of the broad category to which the Product belongs
     * @param params.startdate Filter data on the basis of Requested Service End Date of the authorization request. Date in MM/dd/yyyy format format
     * @param params.enddate Filter data on the basis of Requested Service End Date of the authorization request. Date in MM/dd/yyyy format
     * @param params.status Filter data on the basis of Status of the authorization request.
     * @param params.authorizationid Filter data on the basis of authorization id
     * @param params.authreferraltype Filter data on the basis of authorization/referral type
     * @param params.servicetype Filter data on the basis of service type
     * @param params.submissionstartdate Filter data on the basis of Submission Date of the authorization request. Start date of the search range for submission date.Date in MM/dd/yyyy format
     * @param params.submissionenddate Filter data on the basis of Submission Date of the authorization request. End Date of the search range for submission date. Date in MM/dd/yyyy format
     * @param params.requestingprovider Filter data on the basis of name or npi of the requesting provider
     * @param params.renderingprovider Filter data on the basis of name or npi of the rendering provider
     * @param params.sortby Attribute name that the current set of authorization and referrals are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the authorization and referral records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    AuthorizationsAndReferralsApi.prototype.authnreferralsSearchGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/authnreferrals/search';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        if (params.memberfirstname !== undefined) {
            queryParameters.set('memberfirstname', params.memberfirstname);
        }
        if (params.memberlastname !== undefined) {
            queryParameters.set('memberlastname', params.memberlastname);
        }
        if (params.membermiddlename !== undefined) {
            queryParameters.set('membermiddlename', params.membermiddlename);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        if (params.startdate !== undefined) {
            queryParameters.set('startdate', params.startdate); //.toISOString());
        }
        if (params.enddate !== undefined) {
            queryParameters.set('enddate', params.enddate); //.toISOString());
        }
        if (params.status !== undefined) {
            queryParameters.set('status', params.status);
        }
        if (params.authorizationid !== undefined) {
            queryParameters.set('authorizationid', params.authorizationid);
        }
        if (params.authreferraltype !== undefined) {
            queryParameters.set('authreferraltype', params.authreferraltype);
        }
        if (params.servicetype !== undefined) {
            queryParameters.set('servicetype', params.servicetype);
        }
        if (params.submissionstartdate !== undefined) {
            queryParameters.set('submissionstartdate', params.submissionstartdate); //.toISOString());
        }
        if (params.submissionenddate !== undefined) {
            queryParameters.set('submissionenddate', params.submissionenddate); //.toISOString());
        }
        if (params.requestingprovider !== undefined) {
            queryParameters.set('requestingprovider', params.requestingprovider);
        }
        if (params.renderingprovider !== undefined) {
            queryParameters.set('renderingprovider', params.renderingprovider);
        }
        if (params.sortby !== undefined) {
            queryParameters.set('sortby', params.sortby);
        }
        if (params.orderby !== undefined) {
            queryParameters.set('orderby', params.orderby);
        }
        if (params.pagenumber !== undefined) {
            queryParameters.set('pagenumber', params.pagenumber);
        }
        if (params.pagesize !== undefined) {
            queryParameters.set('pagesize', params.pagesize);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    AuthorizationsAndReferralsApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AuthorizationsAndReferralsApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return AuthorizationsAndReferralsApi;
}());
export { AuthorizationsAndReferralsApi };
//# sourceMappingURL=AuthorizationsAndReferralsApi.js.map