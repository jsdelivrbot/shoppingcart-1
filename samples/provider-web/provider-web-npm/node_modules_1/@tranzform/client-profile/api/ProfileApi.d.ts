import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IgetMemberValidateParams {
    /** External MemberId */
    externalmemberid: string;
    /** Date of Birth in mm/dd/yyyy format */
    dateofbirth: string;
    /** Mobile Phone */
    phone?: string;
    /** Valid Email */
    email?: string;
}
export interface ImemberCoverageProductcategoriesGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantenrollmentid?: string;
}
export interface ImemberEnrollmentGetParams {
    /** The subscriber ID assigned to the subscriber. */
    subscriberId: string;
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentId?: string;
    /** Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;. */
    productcategory?: string;
    /** The name of the plan in which the subscriber is enrolled. */
    planid?: string;
    /** Coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy. */
    coverageeffectivedate?: string;
    /** Coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy. */
    coverageterminationdate?: string;
    /** Based on isactivecoverage, active coverage records are returned.Valid value is \&quot;yes\&quot; */
    isactivecoverage?: string;
}
export interface ImemberInfoGetParams {
    /** Unique ID assigned to the member; external Member ID  */
    memberid?: string;
    /** First name of the member  */
    firstname?: string;
    /** Middle name of the member  */
    middlename?: string;
    /** Last name of the member  */
    lastname?: string;
    /** Date of birth of the member  */
    dob?: string;
    /** Gender of the member  */
    gender?: string;
    /** Based on Type, the specified element is returned.  If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.  */
    type?: Array<string>;
}
export interface ImemberInformationGetParams {
    /** Subscriber Id  */
    subscriberid?: string;
    /** First name of the member  */
    firstname?: string;
    /** Middle name of the member  */
    middlename?: string;
    /** Last name of the member  */
    lastname?: string;
    /** Date of birth of the member  */
    dob?: string;
    /** Gender of the member  */
    gender?: string;
}
export interface ImemberTenantEnrollmentIDAccessGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
}
export interface ImemberTenantEnrollmentIDAdditionalinsuranceGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantEnrollmentID: string;
}
export interface ImemberTenantEnrollmentIDAdditionalinsurancePutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** The member additional insurance information being updated. */
    memberAdditionalInsurance: models.MemberAdditionalInsurance;
}
export interface ImemberTenantEnrollmentIDAddressPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** It will contains addresses details which modified by the user.   */
    memberAddressDetails: models.MemberAddressDetails;
}
export interface ImemberTenantEnrollmentIDContactEmergencyPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Contains the emegency contact details being modified by the user. */
    emergencyContactDetails: models.EmergencyContactDetails;
}
export interface ImemberTenantEnrollmentIDContactsPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    contactDetails: models.ContactDetails;
}
export interface ImemberTenantEnrollmentIDCoverageFamilyGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Valid values are &#39;Benefits&#39; */
    modulename: string;
    /** Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot; */
    isactivecoverage?: string;
    /** Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39; */
    productcategory?: string;
}
export interface ImemberTenantEnrollmentIDCoverageIndividualGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot;  */
    isactivecoverage?: string;
}
export interface ImemberTenantEnrollmentIDCoverageValidateGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** valid values are Active or Valid.  */
    validationflag: string;
    /** Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;.  */
    productcategory: string;
    /** for every plan have a plan id.  */
    planid?: string;
    /** coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy  */
    coverageeffectivedate?: string;
    /** coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy  */
    coverageterminationdate?: string;
}
export interface ImemberTenantEnrollmentIDGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantEnrollmentID: string;
    /** Based on Type, the specified element is returned.   If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.  */
    type?: Array<string>;
}
export interface ImemberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Unique ID for a specific group details; internal group ID; not external facing. */
    groupId: string;
    /** Unique ID for a specific attribute details; internal attribute ID; not external facing. */
    attributeId: string;
}
export interface ImemberTenantEnrollmentIDIsminorGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantEnrollmentID: string;
}
export interface ImemberTenantEnrollmentIDPcpGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.  */
    tenantEnrollmentID: string;
}
export interface ImemberTenantEnrollmentIDPcpPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** The member PCP information being updated. */
    memberPCP: models.MemberPCP;
}
export interface ImemberTenantEnrollmentIDProfilePersonaldetailsPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    memberPersonalData: models.MemberPersonalData;
}
export interface ImemberTenantEnrollmentIDPutParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.   */
    tenantEnrollmentID: string;
    /** The new value of the Member Profile based on TennantEnrollmentId. */
    updatedMemberProfile: models.UpdatedMemberProfile;
}
export interface IsubscriberSubscriberIdDependentsGetParams {
    /** The subscriber (Policy, Contract, and so on) ID assigned to the subscriber. This is the ID that is shown on insurance cards.   */
    subscriberId: string;
}
export interface IsubscriberSubscriberIdGetParams {
    /** The subscriber ID assigned to the subscriber.  */
    subscriberId: string;
}
export interface IuserTenantEnrollmentIDContactTemporaryActionGetParams {
    /** Unique ID assigned by the Tenant to the member; internal Member ID; not external facing. */
    tenantEnrollmentID: string;
    /** contactdetails - To get the contact details associated with the specific member.  emailotp - To generate the OPT while updating new Email Id associated with the specific member.  smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.  */
    action: string;
    /** Contact is the updated value(email or phone number) passed as a String. */
    contact?: string;
}
export declare class ProfileApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    *
    * Member validate based on external MemberID,DOB
    * @param params Parameters.
    */
    getMemberValidate(params: IgetMemberValidateParams, extraHttpRequestParams?: any): Observable<models.MemberDetails>;
    /**
    * Get Product Categories
    * The getProductCategories API, is used to get member specific or family product categories information.
    * @param params Parameters.
    */
    memberCoverageProductcategoriesGet(params: ImemberCoverageProductcategoriesGetParams, extraHttpRequestParams?: any): Observable<models.ProductCategoriesList>;
    /**
    * Get Member EnrollmentID Details
    * The GetMemberEnrollmentIDs API is used to get the enrollment Ids for the member/subscriber.
    * @param params Parameters.
    */
    memberEnrollmentGet(params: ImemberEnrollmentGetParams, extraHttpRequestParams?: any): Observable<models.EnrollmentIdList>;
    /**
    * Get Member Information
    * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  external member Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    memberInfoGet(params: ImemberInfoGetParams, extraHttpRequestParams?: any): Observable<Array<models.MemberProfileInfo>>;
    /**
    * Get Member Information
    * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  subscriber Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters.
    * @param params Parameters.
    */
    memberInformationGet(params: ImemberInformationGetParams, extraHttpRequestParams?: any): Observable<Array<models.MemberAndSubscriberDetail>>;
    /**
    * Get Member Access Details
    * The GetMemberAccessDetails API is used to other member access details of the specified member.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDAccessGet(params: ImemberTenantEnrollmentIDAccessGetParams, extraHttpRequestParams?: any): Observable<models.MemberInformationList>;
    /**
    * Get Member Additional Insurance Information
    * The GetAdditionalInsurance API, is used to get member-specific additional insurance profile information.    This record can repeat multiple times for a member, based on their additional insurance details.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDAdditionalinsuranceGet(params: ImemberTenantEnrollmentIDAdditionalinsuranceGetParams, extraHttpRequestParams?: any): Observable<models.MemberAdditionalInsurance>;
    /**
    * Update Member Additional Insurance
    * The UpdateMemberAdditionalInsurance API, is used to update member-specific Additional Insurance information into the TranZform platform.    A check is done for required elements. If there is no value passed in the required element, then the service throws the appropriate error.   The following elements are required in the request body:  - tenantEnrollmentID
    * @param params Parameters.
    */
    memberTenantEnrollmentIDAdditionalinsurancePut(params: ImemberTenantEnrollmentIDAdditionalinsurancePutParams, extraHttpRequestParams?: any): Observable<models.MemberAdditionalInsurance>;
    /**
    * Update Member Address Details
    * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDAddressPut(params: ImemberTenantEnrollmentIDAddressPutParams, extraHttpRequestParams?: any): Observable<models.UpdatedMemberAddressDetails>;
    /**
    * Update Member Emergency Contact Details
    * The updateMemberEmergencyContactDetails API, is used to update member-specific emergency contact details information.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDContactEmergencyPut(params: ImemberTenantEnrollmentIDContactEmergencyPutParams, extraHttpRequestParams?: any): Observable<models.UpdatedEmergencyContactDetails>;
    /**
    * Update Member Contact Details
    * The updateTemporaryContactDetails API is used to update member-specific contact details information.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDContactsPut(params: ImemberTenantEnrollmentIDContactsPutParams, extraHttpRequestParams?: any): Observable<models.MemberProfileContactDetails>;
    /**
    * Get Family Coverage Details
    * The Family Level Coverage API returns the list of coverage details of family
    * @param params Parameters.
    */
    memberTenantEnrollmentIDCoverageFamilyGet(params: ImemberTenantEnrollmentIDCoverageFamilyGetParams, extraHttpRequestParams?: any): Observable<models.FamilyCoverageDetails>;
    /**
    * Get Member Coverage Details
    * The GetCoverageDetails API retrieves a list of all of the member-specific coverage details.    The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDCoverageIndividualGet(params: ImemberTenantEnrollmentIDCoverageIndividualGetParams, extraHttpRequestParams?: any): Observable<models.CoverageDetails>;
    /**
    * Validate Coverage Details
    * The validateMemberCoverage API is used to validate the coverage details.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDCoverageValidateGet(params: ImemberTenantEnrollmentIDCoverageValidateGetParams, extraHttpRequestParams?: any): Observable<models.ResponseDetails>;
    /**
    * Get Member Profile
    * The Get Member Profile API retrieves member-specific profile information from the TranZform platform. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDGet(params: ImemberTenantEnrollmentIDGetParams, extraHttpRequestParams?: any): Observable<models.MemberProfile>;
    /**
    * Get Member Profile Group Attribute Details
    * The Get Member Profile Group attribute Details API retrieves member-specific attribute value from the TranZform platform.    The input parameter tenantEnrollmentId,groupId and attributeId is required.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGet(params: ImemberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetParams, extraHttpRequestParams?: any): Observable<models.Response>;
    /**
    * Check Member is minor
    * The Check Is minor API is helpfull get the information whether the particular member is minor or not.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDIsminorGet(params: ImemberTenantEnrollmentIDIsminorGetParams, extraHttpRequestParams?: any): Observable<models.CheckIsMinor>;
    /**
    * Get Member Primary Care Physicians(PCP)
    * The GetMemberPCP API is used to get member-specific primary care Physicians (PCP) information in the TranZform platform.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDPcpGet(params: ImemberTenantEnrollmentIDPcpGetParams, extraHttpRequestParams?: any): Observable<models.MemberPCP>;
    /**
    * Update Member PCP
    * The UpdateMemberPCP API, is used to update member-specific Primary Care Physicians(PCP) information into the TranZform platform.   A requestor should send all required fields to update the PCP.   A check is done for required elements. If there is no value passed in  the required element, then the service throws the appropriate error.  The following elements are required in the request body:  - tenantEnrollmentID  - subscriberId  - pcpProviderId  - pcpProviderFullName   - changeReason  - effectiveDate  - terminationDate  - productCategory  - planName  - planId  - pcpType  - pcpPhoneNumber  - providerNPI  - panelCode  - changeRequestedDate
    * @param params Parameters.
    */
    memberTenantEnrollmentIDPcpPut(params: ImemberTenantEnrollmentIDPcpPutParams, extraHttpRequestParams?: any): Observable<models.MemberPCP>;
    /**
    * Update Member Personal Details
    * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDProfilePersonaldetailsPut(params: ImemberTenantEnrollmentIDProfilePersonaldetailsPutParams, extraHttpRequestParams?: any): Observable<models.UpdatedMemberPersonalData>;
    /**
    * Update Member Profile
    * The Update Member Profile API updates member-specific profile information. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.  This API is used for both internal (i.e UI) as well as external (B2B) services.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    memberTenantEnrollmentIDPut(params: ImemberTenantEnrollmentIDPutParams, extraHttpRequestParams?: any): Observable<models.UpdatedMemberProfile>;
    /**
    * Get Subscriber Dependent Details
    * The Get Subscriber Dependents API retrieves all of the dependents for a subscriber from the TranZform platform.    The input parameter subscriberId is required. The output of this service is a list of multiple member records.
    * @param params Parameters.
    */
    subscriberSubscriberIdDependentsGet(params: IsubscriberSubscriberIdDependentsGetParams, extraHttpRequestParams?: any): Observable<Array<models.MemberInformationSubscriberDependant>>;
    /**
    * Get Subscriber Details by ID
    * Get the Subscriber Details based on Subscriber ID.
    * @param params Parameters.
    */
    subscriberSubscriberIdGet(params: IsubscriberSubscriberIdGetParams, extraHttpRequestParams?: any): Observable<models.SubsciberDetails>;
    /**
    * Get Member Temporary Contact Details
    * The Get Member Temporary Contact Details API retrieves specific member contact details from the TranZform platform.   action - contactdetails - To get the contact details associated with the specific member.   action - smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.   action - emailotp - To generate the OPT while updating new Email Id associated with the specific member. The input parameters tenantEnrollmentId and action is required.
    * @param params Parameters.
    */
    userTenantEnrollmentIDContactTemporaryActionGet(params: IuserTenantEnrollmentIDContactTemporaryActionGetParams, extraHttpRequestParams?: any): Observable<models.TemporaryContactDetails>;
    /**
     *
     * Member validate based on external MemberID,DOB
     * @param params.externalmemberid External MemberId
     * @param params.dateofbirth Date of Birth in mm/dd/yyyy format
     * @param params.phone Mobile Phone
     * @param params.email Valid Email
     */
    getMemberValidateWithHttpInfo(params: IgetMemberValidateParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Product Categories
     * The getProductCategories API, is used to get member specific or family product categories information.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberCoverageProductcategoriesGetWithHttpInfo(params: ImemberCoverageProductcategoriesGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member EnrollmentID Details
     * The GetMemberEnrollmentIDs API is used to get the enrollment Ids for the member/subscriber.
     * @param params.subscriberId The subscriber ID assigned to the subscriber.
     * @param params.tenantEnrollmentId Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;.
     * @param params.planid The name of the plan in which the subscriber is enrolled.
     * @param params.coverageeffectivedate Coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy.
     * @param params.coverageterminationdate Coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy.
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned.Valid value is \&quot;yes\&quot;
     */
    memberEnrollmentGetWithHttpInfo(params: ImemberEnrollmentGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Information
     * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  external member Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
     * @param params.memberid Unique ID assigned to the member; external Member ID
     * @param params.firstname First name of the member
     * @param params.middlename Middle name of the member
     * @param params.lastname Last name of the member
     * @param params.dob Date of birth of the member
     * @param params.gender Gender of the member
     * @param params.type Based on Type, the specified element is returned.  If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.
     */
    memberInfoGetWithHttpInfo(params: ImemberInfoGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Information
     * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  subscriber Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters.
     * @param params.subscriberid Subscriber Id
     * @param params.firstname First name of the member
     * @param params.middlename Middle name of the member
     * @param params.lastname Last name of the member
     * @param params.dob Date of birth of the member
     * @param params.gender Gender of the member
     */
    memberInformationGetWithHttpInfo(params: ImemberInformationGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Access Details
     * The GetMemberAccessDetails API is used to other member access details of the specified member.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDAccessGetWithHttpInfo(params: ImemberTenantEnrollmentIDAccessGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Additional Insurance Information
     * The GetAdditionalInsurance API, is used to get member-specific additional insurance profile information.    This record can repeat multiple times for a member, based on their additional insurance details.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDAdditionalinsuranceGetWithHttpInfo(params: ImemberTenantEnrollmentIDAdditionalinsuranceGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Additional Insurance
     * The UpdateMemberAdditionalInsurance API, is used to update member-specific Additional Insurance information into the TranZform platform.    A check is done for required elements. If there is no value passed in the required element, then the service throws the appropriate error.   The following elements are required in the request body:  - tenantEnrollmentID
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberAdditionalInsurance The member additional insurance information being updated.
     */
    memberTenantEnrollmentIDAdditionalinsurancePutWithHttpInfo(params: ImemberTenantEnrollmentIDAdditionalinsurancePutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Address Details
     * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberAddressDetails It will contains addresses details which modified by the user.
     */
    memberTenantEnrollmentIDAddressPutWithHttpInfo(params: ImemberTenantEnrollmentIDAddressPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Emergency Contact Details
     * The updateMemberEmergencyContactDetails API, is used to update member-specific emergency contact details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.emergencyContactDetails Contains the emegency contact details being modified by the user.
     */
    memberTenantEnrollmentIDContactEmergencyPutWithHttpInfo(params: ImemberTenantEnrollmentIDContactEmergencyPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Contact Details
     * The updateTemporaryContactDetails API is used to update member-specific contact details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.contactDetails Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDContactsPutWithHttpInfo(params: ImemberTenantEnrollmentIDContactsPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Family Coverage Details
     * The Family Level Coverage API returns the list of coverage details of family
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.modulename Valid values are &#39;Benefits&#39;
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot;
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;
     */
    memberTenantEnrollmentIDCoverageFamilyGetWithHttpInfo(params: ImemberTenantEnrollmentIDCoverageFamilyGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Coverage Details
     * The GetCoverageDetails API retrieves a list of all of the member-specific coverage details.    The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot;
     */
    memberTenantEnrollmentIDCoverageIndividualGetWithHttpInfo(params: ImemberTenantEnrollmentIDCoverageIndividualGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Validate Coverage Details
     * The validateMemberCoverage API is used to validate the coverage details.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.validationflag valid values are Active or Valid.
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;.
     * @param params.planid for every plan have a plan id.
     * @param params.coverageeffectivedate coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy
     * @param params.coverageterminationdate coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy
     */
    memberTenantEnrollmentIDCoverageValidateGetWithHttpInfo(params: ImemberTenantEnrollmentIDCoverageValidateGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Profile
     * The Get Member Profile API retrieves member-specific profile information from the TranZform platform. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.type Based on Type, the specified element is returned.   If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.
     */
    memberTenantEnrollmentIDGetWithHttpInfo(params: ImemberTenantEnrollmentIDGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Profile Group Attribute Details
     * The Get Member Profile Group attribute Details API retrieves member-specific attribute value from the TranZform platform.    The input parameter tenantEnrollmentId,groupId and attributeId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.groupId Unique ID for a specific group details; internal group ID; not external facing.
     * @param params.attributeId Unique ID for a specific attribute details; internal attribute ID; not external facing.
     */
    memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetWithHttpInfo(params: ImemberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Check Member is minor
     * The Check Is minor API is helpfull get the information whether the particular member is minor or not.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDIsminorGetWithHttpInfo(params: ImemberTenantEnrollmentIDIsminorGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Primary Care Physicians(PCP)
     * The GetMemberPCP API is used to get member-specific primary care Physicians (PCP) information in the TranZform platform.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDPcpGetWithHttpInfo(params: ImemberTenantEnrollmentIDPcpGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member PCP
     * The UpdateMemberPCP API, is used to update member-specific Primary Care Physicians(PCP) information into the TranZform platform.   A requestor should send all required fields to update the PCP.   A check is done for required elements. If there is no value passed in  the required element, then the service throws the appropriate error.  The following elements are required in the request body:  - tenantEnrollmentID  - subscriberId  - pcpProviderId  - pcpProviderFullName   - changeReason  - effectiveDate  - terminationDate  - productCategory  - planName  - planId  - pcpType  - pcpPhoneNumber  - providerNPI  - panelCode  - changeRequestedDate
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberPCP The member PCP information being updated.
     */
    memberTenantEnrollmentIDPcpPutWithHttpInfo(params: ImemberTenantEnrollmentIDPcpPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Personal Details
     * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberPersonalData Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    memberTenantEnrollmentIDProfilePersonaldetailsPutWithHttpInfo(params: ImemberTenantEnrollmentIDProfilePersonaldetailsPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Member Profile
     * The Update Member Profile API updates member-specific profile information. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.  This API is used for both internal (i.e UI) as well as external (B2B) services.  The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.updatedMemberProfile The new value of the Member Profile based on TennantEnrollmentId.
     */
    memberTenantEnrollmentIDPutWithHttpInfo(params: ImemberTenantEnrollmentIDPutParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Subscriber Dependent Details
     * The Get Subscriber Dependents API retrieves all of the dependents for a subscriber from the TranZform platform.    The input parameter subscriberId is required. The output of this service is a list of multiple member records.
     * @param params.subscriberId The subscriber (Policy, Contract, and so on) ID assigned to the subscriber. This is the ID that is shown on insurance cards.
     */
    subscriberSubscriberIdDependentsGetWithHttpInfo(params: IsubscriberSubscriberIdDependentsGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Subscriber Details by ID
     * Get the Subscriber Details based on Subscriber ID.
     * @param params.subscriberId The subscriber ID assigned to the subscriber.
     */
    subscriberSubscriberIdGetWithHttpInfo(params: IsubscriberSubscriberIdGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Member Temporary Contact Details
     * The Get Member Temporary Contact Details API retrieves specific member contact details from the TranZform platform.   action - contactdetails - To get the contact details associated with the specific member.   action - smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.   action - emailotp - To generate the OPT while updating new Email Id associated with the specific member. The input parameters tenantEnrollmentId and action is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.action contactdetails - To get the contact details associated with the specific member.  emailotp - To generate the OPT while updating new Email Id associated with the specific member.  smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.
     * @param params.contact Contact is the updated value(email or phone number) passed as a String.
     */
    userTenantEnrollmentIDContactTemporaryActionGetWithHttpInfo(params: IuserTenantEnrollmentIDContactTemporaryActionGetParams, extraHttpRequestParams?: any): Observable<Response>;
}
