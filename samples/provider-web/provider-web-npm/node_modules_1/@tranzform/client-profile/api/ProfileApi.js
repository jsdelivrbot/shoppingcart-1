/**
 * TranZform Profile - Business Services
 * The YAML consists fo the following Service definitions.    1. Get Member Additional Insurance.   2. Update Member Additional Insurance.   3. Get Member Access Details.   4. Get Member Coverage Details.   5. Get Member Primary Care Physicians(PCP).   6. Update Member Primary Care Physicians(PCP).   7. Get Member Profile Group Attribute Details.   8. Get Subscriber Dependents.   9. Get Temporary Contact Details.   10. Update Member Address Details.   11. Update Member Emegency Contact Details.   12. Update Member Personal Details.   13. Update Member Contact Details Rest API.   14. Get Family Coverage Details.   15. Update Member Profile Details.   16. Get Member Profile Details.   17. Get Member Product Category Details.   18. Get Subscriber Details based on SubsciberID.   19. Validate Coverage Details.   20. Check Member Is Minor.   21. Get Member EnrollmentID details.   22. Validate Member for Registration.   23. Get Member info for Member Search
 *
 * OpenAPI spec version: 5.00.005.001
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
var ProfileApi = /** @class */ (function () {
    function ProfileApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/profile-web';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    *
    * Member validate based on external MemberID,DOB
    * @param params Parameters.
    */
    ProfileApi.prototype.getMemberValidate = function (params, extraHttpRequestParams) {
        return this.getMemberValidateWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Product Categories
    * The getProductCategories API, is used to get member specific or family product categories information.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberCoverageProductcategoriesGet = function (params, extraHttpRequestParams) {
        return this.memberCoverageProductcategoriesGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member EnrollmentID Details
    * The GetMemberEnrollmentIDs API is used to get the enrollment Ids for the member/subscriber.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberEnrollmentGet = function (params, extraHttpRequestParams) {
        return this.memberEnrollmentGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Information
    * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  external member Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberInfoGet = function (params, extraHttpRequestParams) {
        return this.memberInfoGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Information
    * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  subscriber Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberInformationGet = function (params, extraHttpRequestParams) {
        return this.memberInformationGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Access Details
    * The GetMemberAccessDetails API is used to other member access details of the specified member.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDAccessGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDAccessGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Additional Insurance Information
    * The GetAdditionalInsurance API, is used to get member-specific additional insurance profile information.    This record can repeat multiple times for a member, based on their additional insurance details.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDAdditionalinsuranceGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDAdditionalinsuranceGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Additional Insurance
    * The UpdateMemberAdditionalInsurance API, is used to update member-specific Additional Insurance information into the TranZform platform.    A check is done for required elements. If there is no value passed in the required element, then the service throws the appropriate error.   The following elements are required in the request body:  - tenantEnrollmentID
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDAdditionalinsurancePut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDAdditionalinsurancePutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Address Details
    * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDAddressPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDAddressPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Emergency Contact Details
    * The updateMemberEmergencyContactDetails API, is used to update member-specific emergency contact details information.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDContactEmergencyPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDContactEmergencyPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Contact Details
    * The updateTemporaryContactDetails API is used to update member-specific contact details information.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDContactsPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDContactsPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Family Coverage Details
    * The Family Level Coverage API returns the list of coverage details of family
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageFamilyGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDCoverageFamilyGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Coverage Details
    * The GetCoverageDetails API retrieves a list of all of the member-specific coverage details.    The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageIndividualGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDCoverageIndividualGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Validate Coverage Details
    * The validateMemberCoverage API is used to validate the coverage details.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageValidateGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDCoverageValidateGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Profile
    * The Get Member Profile API retrieves member-specific profile information from the TranZform platform. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Profile Group Attribute Details
    * The Get Member Profile Group attribute Details API retrieves member-specific attribute value from the TranZform platform.    The input parameter tenantEnrollmentId,groupId and attributeId is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Check Member is minor
    * The Check Is minor API is helpfull get the information whether the particular member is minor or not.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDIsminorGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDIsminorGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Primary Care Physicians(PCP)
    * The GetMemberPCP API is used to get member-specific primary care Physicians (PCP) information in the TranZform platform.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDPcpGet = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDPcpGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member PCP
    * The UpdateMemberPCP API, is used to update member-specific Primary Care Physicians(PCP) information into the TranZform platform.   A requestor should send all required fields to update the PCP.   A check is done for required elements. If there is no value passed in  the required element, then the service throws the appropriate error.  The following elements are required in the request body:  - tenantEnrollmentID  - subscriberId  - pcpProviderId  - pcpProviderFullName   - changeReason  - effectiveDate  - terminationDate  - productCategory  - planName  - planId  - pcpType  - pcpPhoneNumber  - providerNPI  - panelCode  - changeRequestedDate
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDPcpPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDPcpPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Personal Details
    * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDProfilePersonaldetailsPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDProfilePersonaldetailsPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Member Profile
    * The Update Member Profile API updates member-specific profile information. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.  This API is used for both internal (i.e UI) as well as external (B2B) services.  The input parameter tenantEnrollmentId is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.memberTenantEnrollmentIDPut = function (params, extraHttpRequestParams) {
        return this.memberTenantEnrollmentIDPutWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Subscriber Dependent Details
    * The Get Subscriber Dependents API retrieves all of the dependents for a subscriber from the TranZform platform.    The input parameter subscriberId is required. The output of this service is a list of multiple member records.
    * @param params Parameters.
    */
    ProfileApi.prototype.subscriberSubscriberIdDependentsGet = function (params, extraHttpRequestParams) {
        return this.subscriberSubscriberIdDependentsGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Subscriber Details by ID
    * Get the Subscriber Details based on Subscriber ID.
    * @param params Parameters.
    */
    ProfileApi.prototype.subscriberSubscriberIdGet = function (params, extraHttpRequestParams) {
        return this.subscriberSubscriberIdGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Member Temporary Contact Details
    * The Get Member Temporary Contact Details API retrieves specific member contact details from the TranZform platform.   action - contactdetails - To get the contact details associated with the specific member.   action - smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.   action - emailotp - To generate the OPT while updating new Email Id associated with the specific member. The input parameters tenantEnrollmentId and action is required.
    * @param params Parameters.
    */
    ProfileApi.prototype.userTenantEnrollmentIDContactTemporaryActionGet = function (params, extraHttpRequestParams) {
        return this.userTenantEnrollmentIDContactTemporaryActionGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * Member validate based on external MemberID,DOB
     * @param params.externalmemberid External MemberId
     * @param params.dateofbirth Date of Birth in mm/dd/yyyy format
     * @param params.phone Mobile Phone
     * @param params.email Valid Email
     */
    ProfileApi.prototype.getMemberValidateWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/validate/${externalmemberid}'
            .replace('${' + 'externalmemberid' + '}', String(params.externalmemberid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.externalmemberid' is not null or undefined
        if (params.externalmemberid === null || params.externalmemberid === undefined) {
            throw new Error('Required parameter params.externalmemberid was null or undefined when calling getMemberValidate.');
        }
        // verify required parameter 'params.dateofbirth' is not null or undefined
        if (params.dateofbirth === null || params.dateofbirth === undefined) {
            throw new Error('Required parameter params.dateofbirth was null or undefined when calling getMemberValidate.');
        }
        if (params.dateofbirth !== undefined) {
            queryParameters.set('dateofbirth', params.dateofbirth);
        }
        if (params.phone !== undefined) {
            queryParameters.set('phone', params.phone);
        }
        if (params.email !== undefined) {
            queryParameters.set('email', params.email);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Product Categories
     * The getProductCategories API, is used to get member specific or family product categories information.
     * @param params.tenantenrollmentid Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberCoverageProductcategoriesGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/coverage/productcategories';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.tenantenrollmentid !== undefined) {
            queryParameters.set('tenantenrollmentid', params.tenantenrollmentid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member EnrollmentID Details
     * The GetMemberEnrollmentIDs API is used to get the enrollment Ids for the member/subscriber.
     * @param params.subscriberId The subscriber ID assigned to the subscriber.
     * @param params.tenantEnrollmentId Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;.
     * @param params.planid The name of the plan in which the subscriber is enrolled.
     * @param params.coverageeffectivedate Coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy.
     * @param params.coverageterminationdate Coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy.
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned.Valid value is \&quot;yes\&quot;
     */
    ProfileApi.prototype.memberEnrollmentGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/enrollment';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.subscriberId' is not null or undefined
        if (params.subscriberId === null || params.subscriberId === undefined) {
            throw new Error('Required parameter params.subscriberId was null or undefined when calling memberEnrollmentGet.');
        }
        if (params.tenantEnrollmentId !== undefined) {
            queryParameters.set('tenantEnrollmentId', params.tenantEnrollmentId);
        }
        if (params.subscriberId !== undefined) {
            queryParameters.set('subscriberId', params.subscriberId);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        if (params.planid !== undefined) {
            queryParameters.set('planid', params.planid);
        }
        if (params.coverageeffectivedate !== undefined) {
            queryParameters.set('coverageeffectivedate', params.coverageeffectivedate);
        }
        if (params.coverageterminationdate !== undefined) {
            queryParameters.set('coverageterminationdate', params.coverageterminationdate);
        }
        if (params.isactivecoverage !== undefined) {
            queryParameters.set('isactivecoverage', params.isactivecoverage);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Information
     * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  external member Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
     * @param params.memberid Unique ID assigned to the member; external Member ID
     * @param params.firstname First name of the member
     * @param params.middlename Middle name of the member
     * @param params.lastname Last name of the member
     * @param params.dob Date of birth of the member
     * @param params.gender Gender of the member
     * @param params.type Based on Type, the specified element is returned.  If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.
     */
    ProfileApi.prototype.memberInfoGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/info';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.memberid !== undefined) {
            queryParameters.set('memberid', params.memberid);
        }
        if (params.firstname !== undefined) {
            queryParameters.set('firstname', params.firstname);
        }
        if (params.middlename !== undefined) {
            queryParameters.set('middlename', params.middlename);
        }
        if (params.lastname !== undefined) {
            queryParameters.set('lastname', params.lastname);
        }
        if (params.dob !== undefined) {
            queryParameters.set('dob', params.dob);
        }
        if (params.gender !== undefined) {
            queryParameters.set('gender', params.gender);
        }
        if (params.type) {
            queryParameters.set('type', params.type.join(COLLECTION_FORMATS['csv']));
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Information
     * The Get Member Information API retrieves member-specific profile information from the TranZform platform. Either  subscriber Id needs to be passed as query paramter or combination of first name, last name, dob, gender needs to be passed as query parameters.
     * @param params.subscriberid Subscriber Id
     * @param params.firstname First name of the member
     * @param params.middlename Middle name of the member
     * @param params.lastname Last name of the member
     * @param params.dob Date of birth of the member
     * @param params.gender Gender of the member
     */
    ProfileApi.prototype.memberInformationGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/information';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.subscriberid !== undefined) {
            queryParameters.set('subscriberid', params.subscriberid);
        }
        if (params.firstname !== undefined) {
            queryParameters.set('firstname', params.firstname);
        }
        if (params.middlename !== undefined) {
            queryParameters.set('middlename', params.middlename);
        }
        if (params.lastname !== undefined) {
            queryParameters.set('lastname', params.lastname);
        }
        if (params.dob !== undefined) {
            queryParameters.set('dob', params.dob);
        }
        if (params.gender !== undefined) {
            queryParameters.set('gender', params.gender);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Access Details
     * The GetMemberAccessDetails API is used to other member access details of the specified member.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDAccessGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/access'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDAccessGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Additional Insurance Information
     * The GetAdditionalInsurance API, is used to get member-specific additional insurance profile information.    This record can repeat multiple times for a member, based on their additional insurance details.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDAdditionalinsuranceGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/additionalinsurance'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDAdditionalinsuranceGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Additional Insurance
     * The UpdateMemberAdditionalInsurance API, is used to update member-specific Additional Insurance information into the TranZform platform.    A check is done for required elements. If there is no value passed in the required element, then the service throws the appropriate error.   The following elements are required in the request body:  - tenantEnrollmentID
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberAdditionalInsurance The member additional insurance information being updated.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDAdditionalinsurancePutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/additionalinsurance'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDAdditionalinsurancePut.');
        }
        // verify required parameter 'params.memberAdditionalInsurance' is not null or undefined
        if (params.memberAdditionalInsurance === null || params.memberAdditionalInsurance === undefined) {
            throw new Error('Required parameter params.memberAdditionalInsurance was null or undefined when calling memberTenantEnrollmentIDAdditionalinsurancePut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.memberAdditionalInsurance == null ? '' : JSON.stringify(params.memberAdditionalInsurance),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Address Details
     * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberAddressDetails It will contains addresses details which modified by the user.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDAddressPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/address'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDAddressPut.');
        }
        // verify required parameter 'params.memberAddressDetails' is not null or undefined
        if (params.memberAddressDetails === null || params.memberAddressDetails === undefined) {
            throw new Error('Required parameter params.memberAddressDetails was null or undefined when calling memberTenantEnrollmentIDAddressPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.memberAddressDetails == null ? '' : JSON.stringify(params.memberAddressDetails),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Emergency Contact Details
     * The updateMemberEmergencyContactDetails API, is used to update member-specific emergency contact details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.emergencyContactDetails Contains the emegency contact details being modified by the user.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDContactEmergencyPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/contact/emergency'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDContactEmergencyPut.');
        }
        // verify required parameter 'params.emergencyContactDetails' is not null or undefined
        if (params.emergencyContactDetails === null || params.emergencyContactDetails === undefined) {
            throw new Error('Required parameter params.emergencyContactDetails was null or undefined when calling memberTenantEnrollmentIDContactEmergencyPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.emergencyContactDetails == null ? '' : JSON.stringify(params.emergencyContactDetails),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Contact Details
     * The updateTemporaryContactDetails API is used to update member-specific contact details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.contactDetails Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDContactsPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/contacts'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDContactsPut.');
        }
        // verify required parameter 'params.contactDetails' is not null or undefined
        if (params.contactDetails === null || params.contactDetails === undefined) {
            throw new Error('Required parameter params.contactDetails was null or undefined when calling memberTenantEnrollmentIDContactsPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.contactDetails == null ? '' : JSON.stringify(params.contactDetails),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Family Coverage Details
     * The Family Level Coverage API returns the list of coverage details of family
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.modulename Valid values are &#39;Benefits&#39;
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot;
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;
     */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageFamilyGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/coverage/family'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDCoverageFamilyGet.');
        }
        // verify required parameter 'params.modulename' is not null or undefined
        if (params.modulename === null || params.modulename === undefined) {
            throw new Error('Required parameter params.modulename was null or undefined when calling memberTenantEnrollmentIDCoverageFamilyGet.');
        }
        if (params.isactivecoverage !== undefined) {
            queryParameters.set('isactivecoverage', params.isactivecoverage);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        if (params.modulename !== undefined) {
            queryParameters.set('modulename', params.modulename);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Coverage Details
     * The GetCoverageDetails API retrieves a list of all of the member-specific coverage details.    The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.isactivecoverage Based on isactivecoverage, active coverage records are returned. Valid value is \&quot;yes\&quot;
     */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageIndividualGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/coverage/individual'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDCoverageIndividualGet.');
        }
        if (params.isactivecoverage !== undefined) {
            queryParameters.set('isactivecoverage', params.isactivecoverage);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Validate Coverage Details
     * The validateMemberCoverage API is used to validate the coverage details.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.validationflag valid values are Active or Valid.
     * @param params.productcategory Valid values are &#39;Medical&#39;, &#39;Dental&#39;, &#39;Vision&#39;.
     * @param params.planid for every plan have a plan id.
     * @param params.coverageeffectivedate coverage Effective Date for a particular plan. Format should be in MM/dd/yyyy
     * @param params.coverageterminationdate coverage Termination Date for a particular plan. Format should be in MM/dd/yyyy
     */
    ProfileApi.prototype.memberTenantEnrollmentIDCoverageValidateGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/coverage/validate'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDCoverageValidateGet.');
        }
        // verify required parameter 'params.validationflag' is not null or undefined
        if (params.validationflag === null || params.validationflag === undefined) {
            throw new Error('Required parameter params.validationflag was null or undefined when calling memberTenantEnrollmentIDCoverageValidateGet.');
        }
        // verify required parameter 'params.productcategory' is not null or undefined
        if (params.productcategory === null || params.productcategory === undefined) {
            throw new Error('Required parameter params.productcategory was null or undefined when calling memberTenantEnrollmentIDCoverageValidateGet.');
        }
        if (params.validationflag !== undefined) {
            queryParameters.set('validationflag', params.validationflag);
        }
        if (params.planid !== undefined) {
            queryParameters.set('planid', params.planid);
        }
        if (params.coverageeffectivedate !== undefined) {
            queryParameters.set('coverageeffectivedate', params.coverageeffectivedate);
        }
        if (params.coverageterminationdate !== undefined) {
            queryParameters.set('coverageterminationdate', params.coverageterminationdate);
        }
        if (params.productcategory !== undefined) {
            queryParameters.set('productcategory', params.productcategory);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Profile
     * The Get Member Profile API retrieves member-specific profile information from the TranZform platform. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.   When multiple values are specified for the Type query parameter in the request, the service returns data for each of the specified types. For example, if the values Subscriber and Group are passed in the Type field, then the response includes only the data for those two groups.   If you do not include the Type query parameter in the request, then all groups are required to be returned in the response.  The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.type Based on Type, the specified element is returned.   If Type is empty, then all of the elements are returned. When specifying more than one value for Type, use a comma between each value.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDGet.');
        }
        if (params.type) {
            queryParameters.set('type', params.type.join(COLLECTION_FORMATS['csv']));
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Profile Group Attribute Details
     * The Get Member Profile Group attribute Details API retrieves member-specific attribute value from the TranZform platform.    The input parameter tenantEnrollmentId,groupId and attributeId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.groupId Unique ID for a specific group details; internal group ID; not external facing.
     * @param params.attributeId Unique ID for a specific attribute details; internal attribute ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/group/${groupId}/attribute/${attributeId}'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID))
            .replace('${' + 'groupId' + '}', String(params.groupId))
            .replace('${' + 'attributeId' + '}', String(params.attributeId));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGet.');
        }
        // verify required parameter 'params.groupId' is not null or undefined
        if (params.groupId === null || params.groupId === undefined) {
            throw new Error('Required parameter params.groupId was null or undefined when calling memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGet.');
        }
        // verify required parameter 'params.attributeId' is not null or undefined
        if (params.attributeId === null || params.attributeId === undefined) {
            throw new Error('Required parameter params.attributeId was null or undefined when calling memberTenantEnrollmentIDGroupGroupIdAttributeAttributeIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Check Member is minor
     * The Check Is minor API is helpfull get the information whether the particular member is minor or not.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDIsminorGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/isminor'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDIsminorGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Primary Care Physicians(PCP)
     * The GetMemberPCP API is used to get member-specific primary care Physicians (PCP) information in the TranZform platform.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDPcpGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/pcp'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDPcpGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member PCP
     * The UpdateMemberPCP API, is used to update member-specific Primary Care Physicians(PCP) information into the TranZform platform.   A requestor should send all required fields to update the PCP.   A check is done for required elements. If there is no value passed in  the required element, then the service throws the appropriate error.  The following elements are required in the request body:  - tenantEnrollmentID  - subscriberId  - pcpProviderId  - pcpProviderFullName   - changeReason  - effectiveDate  - terminationDate  - productCategory  - planName  - planId  - pcpType  - pcpPhoneNumber  - providerNPI  - panelCode  - changeRequestedDate
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberPCP The member PCP information being updated.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDPcpPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/pcp'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDPcpPut.');
        }
        // verify required parameter 'params.memberPCP' is not null or undefined
        if (params.memberPCP === null || params.memberPCP === undefined) {
            throw new Error('Required parameter params.memberPCP was null or undefined when calling memberTenantEnrollmentIDPcpPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.memberPCP == null ? '' : JSON.stringify(params.memberPCP),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Personal Details
     * The updateMemberPersonalDetails API, is used to update member-specific personal details information.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.memberPersonalData Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDProfilePersonaldetailsPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}/profile/personaldetails'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDProfilePersonaldetailsPut.');
        }
        // verify required parameter 'params.memberPersonalData' is not null or undefined
        if (params.memberPersonalData === null || params.memberPersonalData === undefined) {
            throw new Error('Required parameter params.memberPersonalData was null or undefined when calling memberTenantEnrollmentIDProfilePersonaldetailsPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.memberPersonalData == null ? '' : JSON.stringify(params.memberPersonalData),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Member Profile
     * The Update Member Profile API updates member-specific profile information. When a value for the Type query string parameter is included with tenantEnrollmentId in the request, this service responds with data for the specified types.  This API is used for both internal (i.e UI) as well as external (B2B) services.  The input parameter tenantEnrollmentId is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.updatedMemberProfile The new value of the Member Profile based on TennantEnrollmentId.
     */
    ProfileApi.prototype.memberTenantEnrollmentIDPutWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/member/${tenantEnrollmentID}'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling memberTenantEnrollmentIDPut.');
        }
        // verify required parameter 'params.updatedMemberProfile' is not null or undefined
        if (params.updatedMemberProfile === null || params.updatedMemberProfile === undefined) {
            throw new Error('Required parameter params.updatedMemberProfile was null or undefined when calling memberTenantEnrollmentIDPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: params.updatedMemberProfile == null ? '' : JSON.stringify(params.updatedMemberProfile),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Subscriber Dependent Details
     * The Get Subscriber Dependents API retrieves all of the dependents for a subscriber from the TranZform platform.    The input parameter subscriberId is required. The output of this service is a list of multiple member records.
     * @param params.subscriberId The subscriber (Policy, Contract, and so on) ID assigned to the subscriber. This is the ID that is shown on insurance cards.
     */
    ProfileApi.prototype.subscriberSubscriberIdDependentsGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/subscriber/${subscriberId}/dependents'
            .replace('${' + 'subscriberId' + '}', String(params.subscriberId));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.subscriberId' is not null or undefined
        if (params.subscriberId === null || params.subscriberId === undefined) {
            throw new Error('Required parameter params.subscriberId was null or undefined when calling subscriberSubscriberIdDependentsGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Subscriber Details by ID
     * Get the Subscriber Details based on Subscriber ID.
     * @param params.subscriberId The subscriber ID assigned to the subscriber.
     */
    ProfileApi.prototype.subscriberSubscriberIdGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/subscriber/${subscriberId}'
            .replace('${' + 'subscriberId' + '}', String(params.subscriberId));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.subscriberId' is not null or undefined
        if (params.subscriberId === null || params.subscriberId === undefined) {
            throw new Error('Required parameter params.subscriberId was null or undefined when calling subscriberSubscriberIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Member Temporary Contact Details
     * The Get Member Temporary Contact Details API retrieves specific member contact details from the TranZform platform.   action - contactdetails - To get the contact details associated with the specific member.   action - smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.   action - emailotp - To generate the OPT while updating new Email Id associated with the specific member. The input parameters tenantEnrollmentId and action is required.
     * @param params.tenantEnrollmentID Unique ID assigned by the Tenant to the member; internal Member ID; not external facing.
     * @param params.action contactdetails - To get the contact details associated with the specific member.  emailotp - To generate the OPT while updating new Email Id associated with the specific member.  smsotp - To generate the OPT while updating new Contact Number (phone) associated with the specific member.
     * @param params.contact Contact is the updated value(email or phone number) passed as a String.
     */
    ProfileApi.prototype.userTenantEnrollmentIDContactTemporaryActionGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/user/${tenantEnrollmentID}/contact/temporary/${action}'
            .replace('${' + 'tenantEnrollmentID' + '}', String(params.tenantEnrollmentID))
            .replace('${' + 'action' + '}', String(params.action));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.tenantEnrollmentID' is not null or undefined
        if (params.tenantEnrollmentID === null || params.tenantEnrollmentID === undefined) {
            throw new Error('Required parameter params.tenantEnrollmentID was null or undefined when calling userTenantEnrollmentIDContactTemporaryActionGet.');
        }
        // verify required parameter 'params.action' is not null or undefined
        if (params.action === null || params.action === undefined) {
            throw new Error('Required parameter params.action was null or undefined when calling userTenantEnrollmentIDContactTemporaryActionGet.');
        }
        if (params.contact !== undefined) {
            queryParameters.set('contact', params.contact);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    ProfileApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ProfileApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return ProfileApi;
}());
export { ProfileApi };
//# sourceMappingURL=ProfileApi.js.map