/**
 * TranZform Eligibility - Business Services
 * The YAML consists fo the following Service definitions.    1. Get Provider list.   2. Get Provider Address list   3. Get Users by user Type   4. Get list of provider users based on search
 *
 * OpenAPI spec version: 5.00.005.001
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var ProviderApi = /** @class */ (function () {
    function ProviderApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/msprovider';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    * Get List of Provider addresses for the providers
    * Retrieve List Of Provider address
    */
    ProviderApi.prototype.providerAddressGet = function (extraHttpRequestParams) {
        return this.providerAddressGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get the billing provider corresponding to the identity affiliation
    * Retrieve List Of Provider address
    */
    ProviderApi.prototype.providerBillingproviderGet = function (extraHttpRequestParams) {
        return this.providerBillingproviderGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    * @param params Parameters.
    */
    ProviderApi.prototype.providerUsersGet = function (params, extraHttpRequestParams) {
        return this.providerUsersGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    */
    ProviderApi.prototype.providersGet = function (extraHttpRequestParams) {
        return this.providersGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    * @param params Parameters.
    */
    ProviderApi.prototype.usersGet = function (params, extraHttpRequestParams) {
        return this.usersGetWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get List of Provider addresses for the providers
     * Retrieve List Of Provider address
     */
    ProviderApi.prototype.providerAddressGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/provider/address';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get the billing provider corresponding to the identity affiliation
     * Retrieve List Of Provider address
     */
    ProviderApi.prototype.providerBillingproviderGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/provider/billingprovider';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     * @param params.usertype Provider usertype.
     */
    ProviderApi.prototype.providerUsersGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/provider/users';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.usertype' is not null or undefined
        if (params.usertype === null || params.usertype === undefined) {
            throw new Error('Required parameter params.usertype was null or undefined when calling providerUsersGet.');
        }
        if (params.usertype !== undefined) {
            queryParameters.set('usertype', params.usertype);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     */
    ProviderApi.prototype.providersGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/providers';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     * @param params.usertype Provider usertype.
     * @param params.username Provider username.
     * @param params.userfirstname Provider user first name.
     * @param params.userlastname Provider user lastname.
     * @param params.sortby Attribute name that the current set of users are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the user records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    ProviderApi.prototype.usersGetWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/users';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.usertype !== undefined) {
            queryParameters.set('usertype', params.usertype);
        }
        if (params.username !== undefined) {
            queryParameters.set('username', params.username);
        }
        if (params.userfirstname !== undefined) {
            queryParameters.set('userfirstname', params.userfirstname);
        }
        if (params.userlastname !== undefined) {
            queryParameters.set('userlastname', params.userlastname);
        }
        if (params.sortby !== undefined) {
            queryParameters.set('sortby', params.sortby);
        }
        if (params.orderby !== undefined) {
            queryParameters.set('orderby', params.orderby);
        }
        if (params.pagenumber !== undefined) {
            queryParameters.set('pagenumber', params.pagenumber);
        }
        if (params.pagesize !== undefined) {
            queryParameters.set('pagesize', params.pagesize);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    ProviderApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ProviderApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return ProviderApi;
}());
export { ProviderApi };
//# sourceMappingURL=ProviderApi.js.map