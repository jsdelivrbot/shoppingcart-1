import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IproviderUsersGetParams {
    /** Provider usertype.   */
    usertype: string;
}
export interface IusersGetParams {
    /** Provider usertype.   */
    usertype?: string;
    /** Provider username.   */
    username?: string;
    /** Provider user first name.   */
    userfirstname?: string;
    /** Provider user lastname.   */
    userlastname?: string;
    /** Attribute name that the current set of users are sorted by */
    sortby?: string;
    /** Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default. */
    orderby?: string;
    /** Navigate to a specific page in the user records.  If no value is passed, the first page is returned. */
    pagenumber?: number;
    /** If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply. */
    pagesize?: number;
}
export declare class ProviderApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    * Get List of Provider addresses for the providers
    * Retrieve List Of Provider address
    */
    providerAddressGet(extraHttpRequestParams?: any): Observable<Array<models.ProviderAddress>>;
    /**
    * Get the billing provider corresponding to the identity affiliation
    * Retrieve List Of Provider address
    */
    providerBillingproviderGet(extraHttpRequestParams?: any): Observable<models.ProviderAddress>;
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    * @param params Parameters.
    */
    providerUsersGet(params: IproviderUsersGetParams, extraHttpRequestParams?: any): Observable<Array<models.UserDetail>>;
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    */
    providersGet(extraHttpRequestParams?: any): Observable<Array<models.ProviderDetail>>;
    /**
    * Get List of Provider details
    * Retrieve List Of Provider details
    * @param params Parameters.
    */
    usersGet(params: IusersGetParams, extraHttpRequestParams?: any): Observable<models.UserResponse>;
    /**
     * Get List of Provider addresses for the providers
     * Retrieve List Of Provider address
     */
    providerAddressGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get the billing provider corresponding to the identity affiliation
     * Retrieve List Of Provider address
     */
    providerBillingproviderGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     * @param params.usertype Provider usertype.
     */
    providerUsersGetWithHttpInfo(params: IproviderUsersGetParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     */
    providersGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get List of Provider details
     * Retrieve List Of Provider details
     * @param params.usertype Provider usertype.
     * @param params.username Provider username.
     * @param params.userfirstname Provider user first name.
     * @param params.userlastname Provider user lastname.
     * @param params.sortby Attribute name that the current set of users are sorted by
     * @param params.orderby Valid values are &#39;Asc&#39; or &#39;Desc&#39;.  Asc is the default.
     * @param params.pagenumber Navigate to a specific page in the user records.  If no value is passed, the first page is returned.
     * @param params.pagesize If pagenumber is there and pagesize is not passed as an input parameter, then a default pagenumber is used; If pagenumber and pagesize are not passed then pagination won&#39;t apply.
     */
    usersGetWithHttpInfo(params: IusersGetParams, extraHttpRequestParams?: any): Observable<Response>;
}
