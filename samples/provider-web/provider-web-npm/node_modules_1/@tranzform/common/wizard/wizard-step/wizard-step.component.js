import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
/**
 * A step in a wizard.
 */
var WizardStepComponent = (function () {
    function WizardStepComponent() {
        /**
         * Text to display in the navigation strip.
         */
        this.name = 'Name';
        /**
         * Text to display on the Next button.
         */
        this.nextButtonText = 'GLOBAL.NEXT_BUTTON_LABEL';
        /**
         * Notify that this step is about to become active.
         */
        this.prepare = new EventEmitter();
        /**
         * Notify that this step has been completed.
         */
        this.complete = new EventEmitter();
        this.formOutput = new EventEmitter(); // tslint:disable-line:no-output-rename
    }
    WizardStepComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.models) {
            this.models.forEach(function (control) { return _this.form.addControl(control); });
        }
        // This is for the form to be bound to a component in the content which will have already been initialized.
        // If emitted right away, the expression is changed within the change detection cycle and throws an error.
        setTimeout(function () {
            _this.formOutput.emit(_this.form);
        });
    };
    WizardStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-wizard-step',
                    template: "<form #form=\"ngForm\" (ngSubmit)=\"wizard.next()\"> <ng-container *ngIf=\"active\"> <h2 translate>{{ header || name }}</h2> <ng-content></ng-content> <div> <button type=\"submit\" [attr.id]=\"id && wizard.id && wizard.id + '-' + id + '-nextBtn'\" class=\"btn btn-primary\" [disabled]=\"form.invalid || wizard.waiting\" translate >{{ nextButtonText }}</button> </div> </ng-container> </form> ",
                    styles: [".btn-primary{margin-top:1.5rem}"],
                },] },
    ];
    /** @nocollapse */
    WizardStepComponent.ctorParameters = function () { return []; };
    WizardStepComponent.propDecorators = {
        'id': [{ type: Input },],
        'name': [{ type: Input },],
        'header': [{ type: Input },],
        'nextButtonText': [{ type: Input },],
        'models': [{ type: Input },],
        'prepare': [{ type: Output },],
        'complete': [{ type: Output },],
        'formOutput': [{ type: Output, args: ['form',] },],
        'form': [{ type: ViewChild, args: ['form',] },],
    };
    return WizardStepComponent;
}());
export { WizardStepComponent };
//# sourceMappingURL=wizard-step.component.js.map