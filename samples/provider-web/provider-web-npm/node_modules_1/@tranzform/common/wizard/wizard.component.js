import { Component, Input, ViewChild, ContentChildren, HostListener, HostBinding } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import 'rxjs/add/operator/finally';
import { WizardStepComponent } from './wizard-step/wizard-step.component';
import { DomUtilities } from '../shared/dom.utilities';
/**
 * Present the user with a series of steps that must be completed in order.
 */
var WizardComponent = (function () {
    function WizardComponent(sanitizer) {
        this.sanitizer = sanitizer;
        /**
         * The current step.
         */
        this.activeIndex = 0;
    }
    /**
     * Initialize the steps and responsive width.
     */
    WizardComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var steps = this.steps = this.stepQuery.toArray();
        if (steps.length) {
            steps.forEach(function (step) { return step.wizard = _this; });
            steps[0].active = true;
            if (!this.responsiveWidth) {
                // Provide a default responsive width based on the number of steps
                this.responsiveWidth = steps.length * 150;
            }
            this.checkSize();
        }
    };
    /**
     * Navigate back to a previously completed step.
     * @param state The history state to navigate to.
     */
    WizardComponent.prototype.back = function (state) {
        if (this.waiting) {
            this.waiting.unsubscribe();
            this.waiting = undefined;
        }
        var index = state ? state.index : 0;
        if (index > this.activeIndex) {
            // Prevent navigating forward
            window.history.go(this.activeIndex - index);
        }
        else {
            this.activeIndex = index;
            this.steps.forEach(function (step, i) { return step.active = (index === i); });
        }
    };
    /**
     * Generate the link to return to a step, marking the URL as safe.
     * @param index The step to generate this for.
     */
    WizardComponent.prototype.backLink = function (index) {
        return this.sanitizer.bypassSecurityTrustUrl('javascript:history.go(' + (index - this.activeIndex) + ')');
    };
    /**
     * Move to the next step.
     */
    WizardComponent.prototype.next = function () {
        var _this = this;
        var wait;
        var activeStep = this.steps[this.activeIndex];
        activeStep.complete.emit({
            wait: function (observable) {
                wait = true;
                _this.waiting = observable
                    .subscribe(function (success) {
                    _this.waiting = undefined;
                    _this.tryAdvanceStep();
                }, function (error) {
                    _this.waiting = undefined;
                });
            }
        });
        if (!wait) {
            this.tryAdvanceStep();
        }
    };
    WizardComponent.prototype.tryAdvanceStep = function () {
        var _this = this;
        var steps = this.steps;
        var activeIndex = this.activeIndex;
        var wait;
        if (activeIndex < steps.length - 1) {
            steps[activeIndex + 1].prepare.emit({
                wait: function (observable) {
                    wait = true;
                    _this.waiting = observable
                        .finally(function () { return _this.waiting = undefined; })
                        .subscribe(function (success) { return _this.advanceStep(); });
                }
            });
            if (!wait) {
                this.advanceStep();
            }
        }
    };
    WizardComponent.prototype.advanceStep = function () {
        var steps = this.steps;
        var activeIndex = this.activeIndex;
        steps[activeIndex].active = false;
        activeIndex = ++this.activeIndex;
        steps[activeIndex].active = true;
        window.history.pushState({ index: activeIndex }, 'Step ' + activeIndex);
        DomUtilities.scrollTo(this.wizardNav.nativeElement);
    };
    /**
     * Respond to a change in window size.
     */
    WizardComponent.prototype.checkSize = function () {
        this.hideTitles = window.innerWidth < this.responsiveWidth;
    };
    WizardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-wizard',
                    template: "<nav id=\"wizard-nav\" #nav> <ol id=\"wizard-nav-list\"> <li *ngFor=\"let step of steps; let i = index\" class=\"wizard-nav-item\" [class.complete]=\"activeIndex > i\" [class.active]=\"activeIndex === i\" > <a [href]=\"backLink(i)\" [attr.id]=\"id && step.id && id + '-' + step.id + '-link'\" class=\"back-link\" *ngIf=\"activeIndex > i\" > <span class=\"number\" inlineSVG=\"assets/common/icons/Done.svg\"></span> <span class=\"title\" translate>{{ step.name }}</span> </a> <ng-container *ngIf=\"activeIndex <= i\"> <span class=\"number\">{{ i + 1 }}</span> <span class=\"title\" translate>{{ step.name }}</span> </ng-container> </li> </ol> </nav> <div class=\"content-box\" [tzfLoading]=\"waiting\"> <ng-content></ng-content> </div> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}#wizard-nav{padding-top:1.5em}#wizard-nav-list{display:table;font-size:18px;font-weight:500;width:100%}.wizard-nav-item{background:#fafafa;border:solid #dfdfdf;border-width:1px 0;box-sizing:content-box;color:#5d5d5d;display:table-cell;line-height:1.2em;padding:.7em 1em .7em .6em;position:relative;text-align:center;vertical-align:middle}.wizard-nav-item .title{position:relative;z-index:1}.wizard-nav-item:first-child{border-radius:3px 0 0 3px}.wizard-nav-item:last-child{border-right-width:1px;border-radius:0 3px 3px 0}.wizard-nav-item:not(:first-child):after,.wizard-nav-item:not(:first-child):before{content:'';position:absolute;left:0;height:50%;width:34px;box-sizing:content-box;background:inherit;border-left:2px solid #dfdfdf}.wizard-nav-item:not(:first-child):before{top:-1px;border-top:inherit;transform:skewX(46deg);transform-origin:left bottom}.wizard-nav-item:not(:first-child):after{bottom:-1px;border-bottom:inherit;transform:skewX(-46deg);transform-origin:left top}.wizard-nav-item.complete{background:#00873f;border-color:#00873f}.wizard-nav-item.complete .title{color:inherit}.wizard-nav-item.complete .number{border-color:#fff}.wizard-nav-item.active{background:#326d81;border-color:#326d81;color:#fff}.wizard-nav-item.active .number{background:#fff;border-color:#326d81;color:#326d81}.wizard-nav-item .number{background:inherit;border:2px solid #dfdfdf;border-radius:100%;box-sizing:content-box;display:block;font-size:.85em;position:absolute;line-height:1.7em;width:1.7em;margin-left:-1.13333em;top:-1.4em;left:50%}.wizard-nav-item ::ng-deep svg{height:1em;width:1em;position:relative;top:2px}.wizard-nav-item ::ng-deep svg path{fill:#fff}.back-link{background:inherit;color:#fff}:host.hide-titles .wizard-nav-item{height:.5em}:host.hide-titles .title{display:none}#wizard-nav-list{margin-bottom:1.3rem}"]
                },] },
    ];
    /** @nocollapse */
    WizardComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    WizardComponent.propDecorators = {
        'id': [{ type: Input },],
        'responsiveWidth': [{ type: Input },],
        'wizardNav': [{ type: ViewChild, args: ['nav',] },],
        'stepQuery': [{ type: ContentChildren, args: [WizardStepComponent,] },],
        'hideTitles': [{ type: HostBinding, args: ['class.hide-titles',] },],
        'back': [{ type: HostListener, args: ['window:popstate', ['$event.state'],] },],
        'checkSize': [{ type: HostListener, args: ['window:resize',] },],
    };
    return WizardComponent;
}());
export { WizardComponent };
//# sourceMappingURL=wizard.component.js.map