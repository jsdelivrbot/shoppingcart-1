import { AfterViewInit, EventEmitter } from '@angular/core';
import 'rxjs/add/operator/first';
import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal.module';
import { ModalAction } from '../modal-action.model';
import { ModalEvent } from '../modal-event.model';
/**
 * Provide styles and plumbing for modal content in coordination with ng-boostrap.
 *
 * @example
 * <ng-template #modal>
 *   <tzf-modal-content
 *     [modal]="modalRef"
 *     headerText="FEATURE.MODAL_HEADER"
 *     backText="FEATURE.MODAL_BACK"
 *     (submit)="modalSubmitted($event)"
 *   >
 *     <div [main]>
 *       This is the main content.
 *     </div>
 *     <div [bottom]>
 *       This is additional content to put under the buttons, if necessary.
 *     </div>
 *   </tzf-modal-content>
 * </ng-template>
 *
 * @example
 * modalSubmitted (event: ModalEvent) {
 *   const obs = this.serviceClient.save();
 *
 *   // Setting the client return value to the event will automatically close the modal if it succeeds
 *   event.observe = obs;
 *
 *   obs.subscribe(response => {
 *     // Update the main screen
 *   }, err => {
 *     // Handle error
 *   });
 * }
 */
export declare class ModalContentComponent implements AfterViewInit {
    /**
     * A reference to the modal containing this content.
     */
    modal: NgbModalRef;
    /**
     * Text to show in header of modal.
     */
    headerText: string;
    /**
     * Text to show above header in modal that will close it when clicked.
     */
    backText: string;
    /**
     * Text to show on the leftmost Cancel button.
     */
    cancelText: string;
    /**
     * Show the cancel button.
     */
    cancelButton: boolean;
    /**
     * Disable the cancel button.
     */
    disableCancel: boolean;
    /**
     * Text to show on the submit button.
     */
    submitText: string;
    /**
     * Show the submit button.
     */
    submitButton: boolean;
    /**
     * A list of actions to create buttons for.
     */
    actions: ModalAction[];
    /**
     * Fired when the user submits the modal form.
     */
    submit: EventEmitter<ModalEvent>;
    /**
     * Disable the Submit button.
     */
    disableSubmit: boolean;
    /**
     * Fired when the user clicks a custom action.
     */
    action: EventEmitter<ModalEvent>;
    /**
     * Check that required inputs have been bound.
     */
    ngAfterViewInit(): void;
    /**
     * Notify that the modal form has been submitted.
     */
    doSubmit(): void;
    /**
     * Notify that the user has dismissed the modal.
     * @param reason Whether the user clicked Cancel or the Back text.
     */
    doDismiss(reason: string): void;
    /**
     * Notify that an action has been triggered.
     * @param id The action ID.
     */
    doAction(id: any): void;
    /**
     * If an observable was set to the event, close the modal when it succeeds.
     * @param event The event passed to the implementer.
     */
    private watch(event);
}
