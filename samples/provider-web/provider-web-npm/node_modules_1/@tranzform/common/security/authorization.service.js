import { Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { tzfCommonEnvironment as environment } from '../environment';
var settings = {
    authority: 'https://healthtranzformidentity.healthtranzform.com',
    client_id: '@!7625.8353.6A3F.2694!0001!9FBC.AB68!0008!BC66.E6DD.D362.5EC7',
    redirect_uri: 'http://localhost:4200/auth.html',
    post_logout_redirect_uri: 'http://localhost:4200/logout.html',
    response_type: 'id_token token',
    scope: 'openid email roles',
    silent_redirect_uri: 'http://localhost:4200/silent-renew.html',
    automaticSilentRenew: true,
    // silentRequestTimeout:10000,
    filterProtocolClaims: true,
    loadUserInfo: true
};
// This is not an Angular service since it needs to be initialized before the app is bootstrapped
var AuthorizationService = (function () {
    function AuthorizationService() {
        // This uses the object from oidc-client.min.js so oidc-client isn't made a dependency and included in the app bundle
        var Oidc = window.Oidc;
        // Oidc is not available during tests.
        if (Oidc && !environment.mockAuthHeaders) {
            this.userManager = new Oidc.UserManager(settings);
        }
    }
    AuthorizationService.instance = function () {
        return this._instance || (this._instance = new AuthorizationService());
    };
    AuthorizationService.prototype.signedIn = function () {
        var _this = this;
        var ready;
        function notifyReady() {
            ready.next();
            ready.complete();
        }
        if (environment.mockAuthHeaders) {
            setTimeout(notifyReady);
        }
        else {
            this.userManager.getUser()
                .then(function (user) {
                if (user) {
                    console.log(user);
                    _this.user = user;
                    notifyReady();
                }
                else {
                    _this.userManager.signinRedirect()
                        .catch(function (err) {
                        console.error(err);
                    });
                }
            })
                .catch(function (err) {
                console.error(err);
            });
        }
        return new Observable(function (observer) { return ready = observer; });
    };
    AuthorizationService.prototype.signOut = function () {
        this.userManager.signoutRedirect();
    };
    AuthorizationService.prototype.getHeaders = function (headers) {
        if (headers === void 0) { headers = new Headers(); }
        var mockHeaders = environment.mockAuthHeaders;
        if (mockHeaders) {
            for (var header in mockHeaders) {
                headers.set(header, mockHeaders[header]);
            }
        }
        return headers;
    };
    return AuthorizationService;
}());
export { AuthorizationService };
//# sourceMappingURL=authorization.service.js.map