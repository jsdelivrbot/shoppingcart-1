import { EventEmitter } from '@angular/core';
import { BaseShell } from './shell.base';
import { ShellService } from './shell.service';
import { MenuItem } from './menu-item.model';
/**
 * Provide the application shell: header, navigation, and footer. This should be placed in the root component.
 *
 * @example
 * <tzf-shell
 *   [menuItems]="menuItems"
 *   [searchBox]="true"
 *   (search)="doSearch($event.value)"
 *   [notifications]="true"
 * >
 *   <img header src="assets/Logo.png">
 *   <img footer src="assets/Logo_Footer.png">
 *   <router-outlet></router-outlet>
 * </tzf-shell>
 *
 * @example
 * public class AppComponent {
 *   menuItems: MenuItem[] = [{
 *     label: 'Claims',
 *     routerPath: '/claims',
 *     svgPath: 'assets/menu-icons/Claims.svg',
 *   }, {
 *     label: 'Providers',
 *     routerPath: '/providers',
 *     svgPath: 'assets/menu-icons/Providers.svg',
 *   }];
 *
 *   notifications: Notification[];
 *
 *   constructor (
 *     private shellService: ShellService
 *   ) {
 *   }
 *
 *   doSearch (value: string) {
 *     // Perform search logic here
 *   }
 *
 *   loadNotifications () {
 *     this.client.getNotifications().subscribe(notifications => this.shellService.notificationCount = notifications.length);
 *   }
 * }
 */
export declare class ShellComponent extends BaseShell {
    private shellService;
    /**
     * Configure the items to put in the navigation menu.
     */
    menuItems: MenuItem[];
    /**
     * Hide the navigation menu.
     */
    hideMenu: boolean;
    /**
     * Hide the user greeting and menu.
     */
    hideUser: boolean;
    /**
     * Show a search field in the header.
     */
    searchBox: boolean;
    /**
     * Show notifications in the header.
     */
    notifications: boolean;
    /**
     * Router link for messages. Setting this value will show the messages icon in the header.
     */
    messagesRouterLink: string | any[];
    /**
     * The user performed a search. The search term is available via $event.value
     *
     * @example
     * (search)="performSearch($event.value)"
     */
    search: EventEmitter<{}>;
    /**
     * The user wants to log out.
     *
     * @example
     * (logout)="performLogout()"
     */
    logout: EventEmitter<{}>;
    private searchValue;
    menuExpanded: boolean;
    userMenuOpen: boolean;
    constructor(shellService: ShellService);
    private doSearch();
    doLogOut(): void;
}
