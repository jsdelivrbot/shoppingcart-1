var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { BaseShell } from './shell.base';
import { ShellService } from './shell.service';
/**
 * Provide the application shell: header, navigation, and footer. This should be placed in the root component.
 *
 * @example
 * <tzf-shell
 *   [menuItems]="menuItems"
 *   [searchBox]="true"
 *   (search)="doSearch($event.value)"
 *   [notifications]="true"
 * >
 *   <img header src="assets/Logo.png">
 *   <img footer src="assets/Logo_Footer.png">
 *   <router-outlet></router-outlet>
 * </tzf-shell>
 *
 * @example
 * public class AppComponent {
 *   menuItems: MenuItem[] = [{
 *     label: 'Claims',
 *     routerPath: '/claims',
 *     svgPath: 'assets/menu-icons/Claims.svg',
 *   }, {
 *     label: 'Providers',
 *     routerPath: '/providers',
 *     svgPath: 'assets/menu-icons/Providers.svg',
 *   }];
 *
 *   notifications: Notification[];
 *
 *   constructor (
 *     private shellService: ShellService
 *   ) {
 *   }
 *
 *   doSearch (value: string) {
 *     // Perform search logic here
 *   }
 *
 *   loadNotifications () {
 *     this.client.getNotifications().subscribe(notifications => this.shellService.notificationCount = notifications.length);
 *   }
 * }
 */
var ShellComponent = (function (_super) {
    __extends(ShellComponent, _super);
    function ShellComponent(shellService) {
        var _this = _super.call(this) || this;
        _this.shellService = shellService;
        /**
         * Configure the items to put in the navigation menu.
         */
        _this.menuItems = [];
        /**
         * The user performed a search. The search term is available via $event.value
         *
         * @example
         * (search)="performSearch($event.value)"
         */
        _this.search = new EventEmitter();
        /**
         * The user wants to log out.
         *
         * @example
         * (logout)="performLogout()"
         */
        _this.logout = new EventEmitter();
        _this.searchValue = '';
        _this.userMenuOpen = false;
        return _this;
    }
    ShellComponent.prototype.doSearch = function () {
        this.search.emit({
            value: this.searchValue,
        });
    };
    ShellComponent.prototype.doLogOut = function () {
        this.logout.emit({});
    };
    ShellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-shell',
                    template: "<div id=\"container\"> <ng-content select=\"tzf-csr-header\"></ng-content> <header> <div id=\"header-content\"> <div id=\"header-logo\"> <a [routerLink]=\"''\"> <ng-content select=\"img[header]\"></ng-content> </a> </div> <div id=\"header-app-content\"> <ng-content select=\"[headerContent]\"></ng-content> </div> <form id=\"header-search-form\" *ngIf=\"searchBox\"> <input id=\"header-search\" type=\"search\" name=\"searchValue\" [(ngModel)]=\"searchValue\" placeholder=\"Search\" aria-label=\"Search\" > <button type=\"submit\" id=\"header-search-button\" (click)=\"doSearch()\" title=\"Search\" inlineSVG=\"assets/common/icons/SearchIcon.svg\"> </button> </form> <a *ngIf=\"messagesRouterLink\" id=\"open-messages\" title=\"Messages\" class=\"shell-header-action\" [routerLink]=\"messagesRouterLink\" inlineSVG=\"assets/common/icons/icon_Mail.svg\" [cacheSVG]=\"false\" [replaceContents]=\"false\" > <strong id=\"message-count\" *ngIf=\"shellService._messageCount\" class=\"shell-header-action-badge\" > {{ shellService._messageCount }} </strong> </a> <button type=\"button\" *ngIf=\"notifications\" id=\"open-notifications\" title=\"Notifications\" class=\"shell-header-action\" inlineSVG=\"assets/common/icons/Icon_Bell.svg\" [cacheSVG]=\"false\" [replaceContents]=\"false\"> <strong id=\"notification-count\" *ngIf=\"shellService._notificationCount\" class=\"shell-header-action-badge\" > {{ shellService._notificationCount }} </strong> </button> <div id=\"user-box\" *ngIf=\"!hideUser\" tzfClickOutside (clickOutside)=\"userMenuOpen = false\" > <button id=\"user\" (click)=\"userMenuOpen = !userMenuOpen\" aria-haspopup=\"true\" aria-owns=\"user-menu\" inlineSVG=\"assets/common/FemaleAvatar.svg\" [cacheSVG]=\"false\" [prepend]=\"true\" [replaceContents]=\"false\"> <span class=\"greeting\">Hello,</span> <span id=\"user-name\">Awesome User</span> </button> <div id=\"user-menu\" [attr.aria-hidden]=\"!userMenuOpen\" > <div id=\"user-menu-header\"> <p class=\"greeting\">Last login</p> <p id=\"last-login\"> <span id=\"last-login-date\">04/23/2017</span><span id=\"last-login-time\">8:57 AM (CDT)</span> </p> </div> <ul id=\"user-menu-list\"> <li> <a routerLink=\"/profile\" inlineSVG=\"assets/common/icons/Profile.svg\" [cacheSVG]=\"false\" [prepend]=\"true\" [replaceContents]=\"false\"> My Profile </a> <a routerLink=\"/preferences\" inlineSVG=\"assets/common/icons/Preferences.svg\" [cacheSVG]=\"false\" [prepend]=\"true\" [replaceContents]=\"false\"> Preferences </a> <a id=\"logout\" href=\"\" (click)=\"!!doLogOut()\" inlineSVG=\"assets/common/icons/Logout.svg\" [cacheSVG]=\"false\" [prepend]=\"true\" [replaceContents]=\"false\"> Logout </a> </li> </ul> </div> </div> </div> </header> <div id=\"menu-and-content\"> <!-- Need min-height to push footer down when expanded because overflow is position: absolute --> <nav id=\"app-nav\" *ngIf=\"!hideMenu\" [class.menu-expanded]=\"menuExpanded\" [style.minHeight.px]=\"53 + 58 * menuItems.length\" tzfClickOutside (clickOutside)=\"menuExpanded = false\" > <div class=\"nav-overflow\"> <button id=\"app-nav-expand\" (click)=\"menuExpanded = !menuExpanded\" inlineSVG=\"assets/common/icons/Hamburger.svg\" [cacheSVG]=\"false\" > </button> <a *ngFor=\"let item of menuItems\" [attr.title]=\"item.label\" (click)=\"menuExpanded ? (menuExpanded = !menuExpanded) : false\" [routerLink]=\"item.routerPath\" class=\"appNavLink\" routerLinkActive=\"active\" [inlineSVG]=\"item.svgPath\" [cacheSVG]=\"false\" [prepend]=\"true\" [replaceContents]=\"false\"> {{ item.label }} </a> <div id=\"nav-active-ind\"></div> </div> </nav> <main> <tzf-header-and-crumbs></tzf-header-and-crumbs> <ng-content select=\"router-outlet\"></ng-content> </main> </div> <footer> <ng-content select=\"img[footer]\"></ng-content> <p id=\"copyright\">Copyright 2017 &bull; All Rights Reserved</p> </footer> </div> ",
                },] },
    ];
    /** @nocollapse */
    ShellComponent.ctorParameters = function () { return [
        { type: ShellService, },
    ]; };
    ShellComponent.propDecorators = {
        'menuItems': [{ type: Input },],
        'hideMenu': [{ type: Input },],
        'hideUser': [{ type: Input },],
        'searchBox': [{ type: Input },],
        'notifications': [{ type: Input },],
        'messagesRouterLink': [{ type: Input },],
        'search': [{ type: Output },],
        'logout': [{ type: Output },],
    };
    return ShellComponent;
}(BaseShell));
export { ShellComponent };
//# sourceMappingURL=shell.component.js.map