import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AccessCheckProvider } from '../shared/access-check-aware';
/**
 * A standard dropdown that uses the native select tag.
 *
 * @example
 * <tzf-dropdown
 *   [options]="users"
 *   textField="name"
 *   valueField="id"
 *   placeholder="Select User"
 * ></tzf-dropdown>
 *
 * @example
 * users = [{
 *   name: 'Johnny Appleseed',
 *   id: 1,
 * }, {
 *   name: 'Billy Gates',
 *   id: 2,
 * }]
 */
var DropdownComponent = (function () {
    function DropdownComponent() {
        /**
         * The field in the objects in [options] to use as the text for options in the dropdown.
         */
        this.textField = 'text';
        /**
         * The field in the objects in [options] to use as the value for options in the dropdown.
         */
        this.valueField = 'value';
        this.PLACEHOLDER_VALUE = '__placeholder';
        this.propagateChange = function () { };
        this.propagateTouched = function () { };
    }
    /**
     * Check if default value needs to be set when options are changed.
     * @param changes Changes detected.
     */
    DropdownComponent.prototype.ngOnChanges = function (changes) {
        if (changes.options) {
            var options = changes.options.currentValue;
            this.setDefaultValueIfUndefined();
        }
    };
    /**
     * Disable the dropdown if the user doesn't have the update capability.
     * @param capabilities User capabilities.
     */
    DropdownComponent.prototype.applyAccessControl = function (capabilities) {
        if (!capabilities.update) {
            this.disabled = true;
        }
    };
    Object.defineProperty(DropdownComponent.prototype, "value", {
        /**
         * Get the selected value.
         */
        get: function () {
            return this._value;
        },
        /**
         * Set the selected value.
         */
        set: function (value) {
            if (value !== this._value) {
                this._value = value;
                if (this.propagateChange) {
                    this.propagateChange(value);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    DropdownComponent.prototype.setDefaultValueIfUndefined = function () {
        if (!this._value) {
            if (this.placeholder) {
                this._value = this.PLACEHOLDER_VALUE;
            }
            else {
                var options = this.options;
                if (options && options.length) {
                    this.value = options[0].value;
                }
            }
        }
    };
    /**
     * Set the value of the dropdown. Used by ngModel.
     * @param value Value to set.
     */
    DropdownComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.setDefaultValueIfUndefined();
    };
    /**
     * Set the callback when the dropdown value changes. Used by ngModel.
     * @param fn Change callback.
     */
    DropdownComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
        this.setDefaultValueIfUndefined();
    };
    /**
     * Set the callback when the dropdown is touched. Used by ngModel.
     * @param fn Touched callback.
     */
    DropdownComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-dropdown',
                    template: "<div class=\"arrow\" [class.disabled]=\"disabled\"></div> <select [attr.id]=\"id\" [(ngModel)]=\"value\" [attr.disabled]=\"disabled\" > <option *ngIf=\"placeholder\" [value]=\"PLACEHOLDER_VALUE\" style=\"display: none\" disabled translate>{{placeholder}}</option> <option *ngFor=\"let o of options\" [value]=\"o[valueField]\" translate>{{ o[textField] }}</option> </select> ",
                    styles: [":host{position:relative;display:inline-block}:host:hover .arrow:not(.disabled):before{border-top-color:#2f9cb1}select{background:#fff;border:1px solid #bfbfbf;border-radius:2px;box-shadow:0 1px 1px rgba(0,0,0,.2);font-size:13px;height:32px;padding:0 8px;padding-right:34px;width:100%;-webkit-appearance:none;-moz-appearance:none}select:not([disabled]):hover{border-color:#2f9cb1}select[disabled]{background:#bfbfbf;cursor:not-allowed}select.ng-invalid.ng-touched{border-color:#d93659}select::-ms-expand{display:none}.arrow{position:absolute;right:28px;top:12px;pointer-events:none}.arrow:before{left:0;border-top:9px solid #707070;border-left:9px solid transparent;border-right:9px solid transparent}.arrow:after,.arrow:before{content:'';position:absolute;top:0}.arrow:after{left:3px;border-top:6px solid #fff;border-left:6px solid transparent;border-right:6px solid transparent}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return DropdownComponent; }),
                            multi: true
                        }, {
                            provide: AccessCheckProvider,
                            useExisting: forwardRef(function () { return DropdownComponent; }),
                        }]
                },] },
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return []; };
    DropdownComponent.propDecorators = {
        'id': [{ type: Input },],
        'options': [{ type: Input },],
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'disabled': [{ type: Input },],
    };
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=dropdown.component.js.map