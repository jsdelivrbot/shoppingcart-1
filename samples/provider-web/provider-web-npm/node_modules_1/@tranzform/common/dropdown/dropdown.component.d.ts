import { OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AccessCheckAware, Capabilities } from '../shared/access-check-aware';
/**
 * A standard dropdown that uses the native select tag.
 *
 * @example
 * <tzf-dropdown
 *   [options]="users"
 *   textField="name"
 *   valueField="id"
 *   placeholder="Select User"
 * ></tzf-dropdown>
 *
 * @example
 * users = [{
 *   name: 'Johnny Appleseed',
 *   id: 1,
 * }, {
 *   name: 'Billy Gates',
 *   id: 2,
 * }]
 */
export declare class DropdownComponent implements OnChanges, ControlValueAccessor, AccessCheckAware {
    /**
     * ID to put on the <select> element.
     */
    id: string;
    /**
     * Objects available for selection in the dropdown.
     */
    options: any[];
    /**
     * The field in the objects in [options] to use as the text for options in the dropdown.
     */
    textField: string;
    /**
     * The field in the objects in [options] to use as the value for options in the dropdown.
     */
    valueField: string;
    /**
     * Text to display by default if no option is selected.
     */
    placeholder: string;
    /**
     * Disable the dropdown.
     */
    disabled: boolean;
    private PLACEHOLDER_VALUE;
    private _value;
    private propagateChange;
    private propagateTouched;
    /**
     * Check if default value needs to be set when options are changed.
     * @param changes Changes detected.
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Disable the dropdown if the user doesn't have the update capability.
     * @param capabilities User capabilities.
     */
    applyAccessControl(capabilities: Capabilities): void;
    /**
     * Get the selected value.
     */
    /**
     * Set the selected value.
     */
    value: string;
    private setDefaultValueIfUndefined();
    /**
     * Set the value of the dropdown. Used by ngModel.
     * @param value Value to set.
     */
    writeValue(value: any): void;
    /**
     * Set the callback when the dropdown value changes. Used by ngModel.
     * @param fn Change callback.
     */
    registerOnChange(fn: Function): void;
    /**
     * Set the callback when the dropdown is touched. Used by ngModel.
     * @param fn Touched callback.
     */
    registerOnTouched(fn: Function): void;
}
