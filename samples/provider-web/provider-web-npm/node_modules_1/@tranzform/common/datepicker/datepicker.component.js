import { Component, Input, HostBinding, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbDatepicker } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker';
import { NgbDatepickerConfig } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module';
import { ObjectUtilities } from '../shared/object.utilities';
/**
 * Provide a calendar for the user to navigate and choose a date from.
 *
 * The model must match the NgbDateStruct interface available in @ng-bootstrap/ng-bootstrap
 *
 * @example
 * <tzf-datepicker [(ngModel)]="myDate"></tzf-datepicker>
 */
var DatepickerComponent = (function () {
    /**
     * Generate the month names.
     */
    function DatepickerComponent(ngbDatepickerConfig) {
        this.ngbDatepickerConfig = ngbDatepickerConfig;
        /**
         * Month names.
         */
        this.monthNames = [];
        /**
         * The model bound to the Bootstrap datepicker.
         */
        this.model = {};
        /**
         * Notify the consumer of this component that the value was changed.
         */
        this.propagateChange = function () { };
        /**
         * Notify the consumer of this component that the field was touched.
         */
        this.propagateTouched = function () { };
        for (var m = 0; m < 12; m++) {
            this.monthNames.push(new Date(2017, m, 1).toLocaleString('en-US', { month: 'long' }));
        }
    }
    /**
     * Set min/max date defaults.
     */
    DatepickerComponent.prototype.ngOnInit = function () {
        if (!this.minDate) {
            this.minDate = this.ngbDatepickerConfig.minDate;
        }
        if (!this.maxDate) {
            this.maxDate = this.ngbDatepickerConfig.maxDate;
        }
        if (this.yearPicker) {
            this.generateYears();
        }
    };
    DatepickerComponent.prototype.generateYears = function () {
        var year = (this.maxDate && this.maxDate.year) || this.maxYear;
        var minYear = (this.minDate && this.minDate.year) || this.minYear;
        var years = this.years = [];
        for (; year >= minYear; year--) {
            years.push(year);
        }
    };
    /**
     * Set the model.
     */
    DatepickerComponent.prototype.writeValue = function (value) {
        if (!value) {
            value = {};
        }
        if (!ObjectUtilities.equals(value, this.model)) {
            this.firstChange = true;
            this.model = value;
        }
        // Scroll so the selected year is centered
        if (this.yearList && this.yearPicker) {
            var year = this.model.year || new Date().getFullYear();
            var diff = this.years[0] - year;
            var yearListEl = this.yearList.nativeElement;
            var selected = yearListEl.childNodes[diff + 2]; // Add 2 for text and comment nodes
            if (selected) {
                yearListEl.scrollTop = selected.offsetTop - ((yearListEl.offsetHeight - selected.offsetHeight) / 2);
            }
        }
    };
    /**
     * Navigate to a given year and month.
     * @param year Year to go to.
     * @param month Month to go to. If not passed, the current month will be maintained.
     */
    DatepickerComponent.prototype.navigateTo = function (year, month) {
        if (month === void 0) { month = this.datepickerMonth; }
        this.datepicker.navigateTo({
            year: year,
            month: month,
        });
    };
    /**
     * Propogate a model change.
     */
    DatepickerComponent.prototype.modelChanged = function () {
        if (this.firstChange) {
            this.firstChange = false;
        }
        else {
            this.propagateTouched();
            this.propagateChange(this.model);
        }
    };
    /**
     * Update the month and year displayed above the datepicker.
     */
    DatepickerComponent.prototype.updateMonthAndYear = function (next) {
        this.datepickerMonth = next.month;
        this.datepickerYear = next.year;
    };
    DatepickerComponent.prototype.selectYear = function (year) {
        this.navigateTo(year);
    };
    /**
     * Save the callback to notify the consumer of changes.
     */
    DatepickerComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    DatepickerComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    DatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-datepicker',
                    template: "<div class=\"calendar\"> <p class=\"monthYear\"> <span class=\"month\">{{ monthNames[datepickerMonth - 1] }}</span> <span class=\"year\">{{ datepickerYear }}</span> </p> <ngb-datepicker [(ngModel)]=\"model\" (ngModelChange)=\"modelChanged()\" [startDate]=\"model\" [firstDayOfWeek]=\"7\" navigation=\"arrows\" outsideDays=\"hidden\" [minDate]=\"minDate\" [maxDate]=\"maxDate\" (navigate)=\"updateMonthAndYear($event.next)\" [dayTemplate]=\"dayTemplate\" ></ngb-datepicker> </div> <ol *ngIf=\"yearPicker\" #yearList class=\"year-picker\" > <li *ngFor=\"let y of years\" class=\"year-item\" > <label class=\"year-label\"> <input type=\"radio\" class=\"year-radio\" [attr.name]=\"id + '-radio'\" [value]=\"y\" [ngModel]=\"model?.year\" (ngModelChange)=\"selectYear($event)\" > <span class=\"selected-bg\"></span> <span class=\"year-text\">{{ y }}</span> </label> </li> </ol> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}.calendar{padding:.5em}.monthYear{font-size:1.1em;font-weight:700;line-height:3em;margin-bottom:-2.4em;text-align:center}.year{font-size:.9em;font-weight:100}:host{display:flex}:host ::ng-deep .justify-content-between{justify-content:space-between}:host ::ng-deep .d-flex{display:flex}:host ::ng-deep ngb-datepicker{border:0}:host ::ng-deep div.ngb-dp-header{border-bottom:0}:host ::ng-deep button{background:none;border:0;padding:0 .8em}:host ::ng-deep .ngb-dp-navigation-chevron:before{border-color:#257f8e}:host ::ng-deep div.ngb-dp-month-name{display:none}:host ::ng-deep .ngb-dp-day,:host ::ng-deep .ngb-dp-month,:host ::ng-deep .ngb-dp-weekday{flex:auto;text-align:center}:host ::ng-deep .ngb-dp-month{padding-top:2.5em}:host ::ng-deep .ngb-dp-week{font-size:.85em;font-weight:500}:host ::ng-deep div.ngb-dp-day{color:#5d5d5d;width:4em}:host ::ng-deep div.ngb-dp-day div{display:inline-block;max-width:4em;width:100%}:host ::ng-deep .ngb-dp-weekday,:host ::ng-deep div.disabled{color:#bbb;font-weight:100;text-transform:uppercase}:host ::ng-deep div.bg-primary{background:#00873f;border-radius:0;color:#fff}.year-picker{background:#f5f5f5;border-left:1px solid #c2cbd4;height:290px;margin:0;overflow:auto}.year-label{cursor:pointer;display:block;margin:0;overflow:hidden;padding:.3em 2em}.year-label,.year-text{position:relative}.year-radio{position:absolute;left:-50px}.year-radio:checked+.selected-bg{background:#257f8e;position:absolute;top:0;left:0;width:100%;height:100%}.year-radio:checked~.year-text{color:#fff}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return DatepickerComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    DatepickerComponent.ctorParameters = function () { return [
        { type: NgbDatepickerConfig, },
    ]; };
    DatepickerComponent.propDecorators = {
        'id': [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        'minDate': [{ type: Input },],
        'maxDate': [{ type: Input },],
        'yearPicker': [{ type: Input },],
        'dayTemplate': [{ type: Input },],
        'datepicker': [{ type: ViewChild, args: [NgbDatepicker,] },],
        'yearList': [{ type: ViewChild, args: ['yearList',] },],
    };
    return DatepickerComponent;
}());
export { DatepickerComponent };
//# sourceMappingURL=datepicker.component.js.map