import { OnInit, TemplateRef, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgbDatepicker } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker';
import { NgbDatepickerConfig } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-date-struct';
import { DayTemplateContext } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker-day-template-context';
/**
 * Provide a calendar for the user to navigate and choose a date from.
 *
 * The model must match the NgbDateStruct interface available in @ng-bootstrap/ng-bootstrap
 *
 * @example
 * <tzf-datepicker [(ngModel)]="myDate"></tzf-datepicker>
 */
export declare class DatepickerComponent implements OnInit, ControlValueAccessor {
    private ngbDatepickerConfig;
    /**
     * ID for the datepicker.
     */
    id: string;
    /**
     * The minimum date that can be selected with the datepicker.
     */
    minDate: NgbDateStruct;
    /**
     * The maximum date that can be selected with the datepicker.
     */
    maxDate: NgbDateStruct;
    /**
     * Show a year picker in the popover.
     */
    yearPicker: boolean;
    dayTemplate: TemplateRef<DayTemplateContext>;
    datepicker: NgbDatepicker;
    /**
     * The ol element containing the year list.
     */
    yearList: ElementRef;
    /**
     * Month names.
     */
    monthNames: string[];
    /**
     * The currently selected month in the datepicker.
     */
    datepickerMonth: number;
    /**
     * The currently selected year in the datepicker.
     */
    datepickerYear: number;
    /**
     * Years to show in the year picker.
     */
    private years;
    /**
     * The earliest year available in the year picker. This will be used in minDate is not specified. Default is current year - 125.
     */
    private minYear;
    /**
     * The latest year available in the year picker. This will be used in maxDate is not specified. Default is current year + 20.
     */
    private maxYear;
    /**
     * The model bound to the Bootstrap datepicker.
     */
    model: NgbDateStruct;
    /**
     * When a value is first written to the component, it shouldn't fire a change event. This flag causes it to be ignored.
     */
    private firstChange;
    /**
     * Notify the consumer of this component that the value was changed.
     */
    private propagateChange;
    /**
     * Notify the consumer of this component that the field was touched.
     */
    private propagateTouched;
    /**
     * Generate the month names.
     */
    constructor(ngbDatepickerConfig: NgbDatepickerConfig);
    /**
     * Set min/max date defaults.
     */
    ngOnInit(): void;
    private generateYears();
    /**
     * Set the model.
     */
    writeValue(value: any): void;
    /**
     * Navigate to a given year and month.
     * @param year Year to go to.
     * @param month Month to go to. If not passed, the current month will be maintained.
     */
    navigateTo(year: number, month?: number): void;
    /**
     * Propogate a model change.
     */
    modelChanged(): void;
    /**
     * Update the month and year displayed above the datepicker.
     */
    updateMonthAndYear(next: NgbDateStruct): void;
    private selectYear(year);
    /**
     * Save the callback to notify the consumer of changes.
     */
    registerOnChange(fn: Function): void;
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    registerOnTouched(fn: Function): void;
}
