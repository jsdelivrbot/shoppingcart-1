import { EventEmitter, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ParentRouteDataService } from './parent-route-data.service';
/**
 * Use this component to wrap the content of a component that has child routes. It can provide a router-outlet
 * for the child routes and hide content when the child is navigated to. You can also bind data to it to be
 * used in the title and breadcrumb of the child.
 *
 * @example
 * <tzf-parent-route-content
 *   [childData]="childData"
 * >
 *   All content for a parent component goes here.
 * </tzf-parent-route-content>
 *
 * @example
 * <tzf-parent-route-content
 *   [childData]="childData"
 *   [sticky]="1"
 * >
 *   All content for a parent component goes here. This content will still be displayed when the child is active because sticky == 1.
 * </tzf-parent-route-content>
 *
 * @example
 * // my-route.component.ts
 * childData: any = {};
 *
 * viewRowDetail (rowSelected) {
 *   childData.name = rowSelected.name;
 *   // skipLocationChange is used to prevent the browser Back button from navigating to a detail component whose data went out of scope
 *   this.route.navigate(['myRoute', rowSelected.id], { skipLocationChange: true });
 * }
 *
 * @example
 * // Route configuration
 * const routes: Routes = [{
 *   path: 'myRoute',
 *   component: MyRouteComponent,
 *   data: {
 *     title: 'MY_ROUTE.TITLE',
 *   },
 *   children: [{
 *     path: ':id',
 *     component: MyRouteDetailComponent,
 *     data: {
 *      title: 'MY_ROUTE.DETAIL_TITLE',
 *     },
 *   }
 * }];
 *
 * @example
 * {
 *   "MY_ROUTE": {
 *     "TITLE": "My Route",
 *     "DETAIL_TITLE": "Details for {{ name }}"
 *   }
 * }
 */
export declare class ParentRouteContentComponent implements OnInit, OnChanges, OnDestroy {
    private myRoute;
    private router;
    private umbilical;
    /**
     * Data can be bound here for the child to receive. It can also be referenced in the resource value for the child's route title.
     */
    toChild: any;
    /**
     * Content can be made sticky to be shown when child routes are active.
     *
     * true: Always show this content.
     * <number>: The depth to which to show this content. (1) Show when a child is active, (2) Show when a child or grandchild is active, etc.
     */
    sticky: boolean | number;
    /**
     * Add a router outlet after the content.
     * Default true but can be set to false, for instance if you have two <tzf-route-parent-content> components on one page.
     */
    routerOutlet: boolean;
    /**
     * Add an ID if you need to pass data to or from here.
     */
    id: string;
    /**
     * Receive data from the child component.
     */
    fromChild: EventEmitter<any>;
    private sendToChild;
    /**
     * Show the content.
     */
    show: boolean;
    constructor(myRoute: ActivatedRoute, router: Router, umbilical: ParentRouteDataService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Detect changes to childData and send to child.
     * @param changes Changes to data bindings.
     */
    ngOnChanges(changes: SimpleChanges): void;
}
