import { Component, Input, Output, EventEmitter } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { ParentRouteDataService } from './parent-route-data.service';
/**
 * Use this component to wrap the content of a component that has child routes. It can provide a router-outlet
 * for the child routes and hide content when the child is navigated to. You can also bind data to it to be
 * used in the title and breadcrumb of the child.
 *
 * @example
 * <tzf-parent-route-content
 *   [childData]="childData"
 * >
 *   All content for a parent component goes here.
 * </tzf-parent-route-content>
 *
 * @example
 * <tzf-parent-route-content
 *   [childData]="childData"
 *   [sticky]="1"
 * >
 *   All content for a parent component goes here. This content will still be displayed when the child is active because sticky == 1.
 * </tzf-parent-route-content>
 *
 * @example
 * // my-route.component.ts
 * childData: any = {};
 *
 * viewRowDetail (rowSelected) {
 *   childData.name = rowSelected.name;
 *   // skipLocationChange is used to prevent the browser Back button from navigating to a detail component whose data went out of scope
 *   this.route.navigate(['myRoute', rowSelected.id], { skipLocationChange: true });
 * }
 *
 * @example
 * // Route configuration
 * const routes: Routes = [{
 *   path: 'myRoute',
 *   component: MyRouteComponent,
 *   data: {
 *     title: 'MY_ROUTE.TITLE',
 *   },
 *   children: [{
 *     path: ':id',
 *     component: MyRouteDetailComponent,
 *     data: {
 *      title: 'MY_ROUTE.DETAIL_TITLE',
 *     },
 *   }
 * }];
 *
 * @example
 * {
 *   "MY_ROUTE": {
 *     "TITLE": "My Route",
 *     "DETAIL_TITLE": "Details for {{ name }}"
 *   }
 * }
 */
var ParentRouteContentComponent = (function () {
    function ParentRouteContentComponent(
        // My route is the route containing this instance
        myRoute, router, umbilical) {
        var _this = this;
        this.myRoute = myRoute;
        this.router = router;
        this.umbilical = umbilical;
        /**
         * Add a router outlet after the content.
         * Default true but can be set to false, for instance if you have two <tzf-route-parent-content> components on one page.
         */
        this.routerOutlet = true;
        /**
         * Receive data from the child component.
         */
        this.fromChild = new EventEmitter();
        /**
         * Show the content.
         */
        this.show = true;
        router.events
            .filter(function (e) { return e instanceof NavigationEnd; })
            .map(function () { return myRoute; })
            .map(function (route) {
            var parent;
            for (; route.firstChild; route = route.firstChild) {
                parent = route;
            }
            return parent;
        })
            .subscribe(function (parentOfCurrentRoute) {
            if (parentOfCurrentRoute === myRoute) {
                // Copy the data bound to this to the child's route data
                if (_this.toChild) {
                    parentOfCurrentRoute.firstChild.snapshot.data._fromParent = _this.toChild;
                }
                ;
                // My route's child is active so we should be shown for any truthy value of sticky
                _this.show = !!_this.sticky;
            }
            else if (!parentOfCurrentRoute || _this.sticky === true) {
                // My route is active or I'm completely sticky so should be shown no matter what
                _this.show = true;
            }
            else {
                if (_this.sticky > 0) {
                    // My route's grandchild or deeper is active so find how deep it is from me
                    var routes = parentOfCurrentRoute.snapshot.pathFromRoot;
                    // Starting at current route's parent so already 1 deep
                    var depth = 1;
                    // Move through ancestors
                    for (var i = routes.length - 1; i > 0; i--) {
                        // Check if this is my route
                        if (routes[i] === myRoute.snapshot) {
                            // Show content if sticky enough
                            if (_this.sticky >= depth) {
                                _this.show = true;
                                return;
                            }
                            break;
                        }
                        depth++;
                    }
                }
                _this.show = false;
            }
        });
    }
    ParentRouteContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.id) {
            var observables = this.umbilical.registerParent(this.id);
            // Save this for sending data to the child
            this.sendToChild = observables.toChild;
            // Listen for data from child
            observables.fromChild
                .subscribe(function (data) {
                // Send data to parent.
                _this.fromChild.emit(data);
            });
        }
    };
    ParentRouteContentComponent.prototype.ngOnDestroy = function () {
        if (this.id) {
            this.umbilical.unregisterParent(this.id);
        }
    };
    /**
     * Detect changes to childData and send to child.
     * @param changes Changes to data bindings.
     */
    ParentRouteContentComponent.prototype.ngOnChanges = function (changes) {
        if (this.sendToChild && changes.toChild) {
            this.sendToChild.next(this.toChild);
            this.myRoute.snapshot.data._childData = this.toChild;
        }
    };
    ParentRouteContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-parent-route-content',
                    template: "<ng-content *ngIf=\"show\"></ng-content> <router-outlet *ngIf=\"routerOutlet\"></router-outlet> ",
                },] },
    ];
    /** @nocollapse */
    ParentRouteContentComponent.ctorParameters = function () { return [
        { type: ActivatedRoute, },
        { type: Router, },
        { type: ParentRouteDataService, },
    ]; };
    ParentRouteContentComponent.propDecorators = {
        'toChild': [{ type: Input },],
        'sticky': [{ type: Input },],
        'routerOutlet': [{ type: Input },],
        'id': [{ type: Input },],
        'fromChild': [{ type: Output },],
    };
    return ParentRouteContentComponent;
}());
export { ParentRouteContentComponent };
//# sourceMappingURL=parent-route-content.component.js.map