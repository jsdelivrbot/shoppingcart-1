import { DatePipe } from '@angular/common';
import { Component, Input, Output, EventEmitter, HostListener, ViewChild, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DomUtilities } from '../shared/dom.utilities';
import { DatepickerComponent } from '../datepicker/datepicker.component';
import { DatepickerUtil } from '../datepicker/datepicker-util';
/**
 * An input field for dates.
 */
var DateComponent = (function () {
    function DateComponent(element) {
        this.element = element;
        /**
         * Format of output via ngModel. Set to 'date' to get a Date object.
         */
        this.format = DateComponent.DEFAULT_FORMAT;
        /**
         * Format of date in text box.
         */
        this.displayFormat = 'M/d/yyyy';
        /**
         * Interpret 2 digit years within this many years from the current date as a future date. Otherwise it is in the past.
         *
         * Example #1
         * Current year: 2017
         * This value: 20
         * 2 digit year: 31
         * 31 - 17 = 14 < 20 so will be 2031.
         *
         * Example #2
         * Current year: 2017
         * This value: 20
         * 2 digit year: 41
         *
         * 41 - 17 = 24 > 20 so will be 1941.
         */
        this.twoDigitYearMaxYearsFromNow = 20;
        /**
         * Emit the value as a Date object when changed.
         */
        this.dateChange = new EventEmitter();
        // Allow tests to change this
        this.currentYear = new Date().getFullYear();
        this.showPicker = false;
        /**
         * Notify the consumer of this component that the value was changed.
         */
        this.propagateChange = function () { };
        /**
         * Notify the consumer of this component that the field was touched.
         */
        this.propagateTouched = function () { };
        var agent = navigator.userAgent;
        // Chrome desktop supports HTML5 date but we don't want to use it
        if (!agent.match(/Chrome/) || agent.match(/Mobile/)) {
            try {
                var testEl = document.createElement('input');
                testEl.type = 'date';
                this.supportsHtml5Date = testEl.type === 'date';
            }
            catch (e) { }
        }
    }
    /**
     * Convert to the output format for propogation. If [format] is 'date' the date
     * is passed through* otherwise the Angular DatePipe uses it to format a string.
     * @param date Date to format.
     */
    DateComponent.formatOutput = function (date, format) {
        if (format === void 0) { format = DateComponent.DEFAULT_FORMAT; }
        return date ? (format === 'date' ? date : new DatePipe('en-US').transform(date, format)) : undefined;
    };
    DateComponent.interpretDate = function (value) {
        if (value && typeof value === 'string') {
            // Convert - to / to get Date in local timezone
            var time = Date.parse(value.replace(/-/g, '/'));
            return isNaN(time) ? undefined : new Date(time);
        }
        return value;
    };
    DateComponent.prototype.ngOnChanges = function (changes) {
        if (changes.date) {
            this.setDate(this.date, true, false);
        }
    };
    /**
     * Get the current date value.
     */
    DateComponent.prototype.getDate = function () {
        return this.date;
    };
    /**
     * Set the current date value.
     * @param date Date to set.
     * @param propogate Notify this component's consumer of the new date.
     * @param emit Fire the dateChange event.
     */
    DateComponent.prototype.setDate = function (date, propogate, emit, updateInputValue) {
        if (propogate === void 0) { propogate = true; }
        if (emit === void 0) { emit = true; }
        if (updateInputValue === void 0) { updateInputValue = true; }
        this.date = date;
        if (updateInputValue) {
            this.textValue = this.formatForDisplay(date);
            this.html5Value = date ? new DatePipe('en-US').transform(date, 'yyyy-MM-dd') : '';
        }
        this.pickerValue = DatepickerUtil.toNgbDate(date);
        if (emit) {
            this.dateChange.emit(date);
        }
        if (propogate) {
            this.propagateChange(DateComponent.formatOutput(date, this.format));
        }
    };
    /**
     * Set the date.
     * @param value Value from HTML5 date input.
     */
    DateComponent.prototype.setHtml5Date = function (value) {
        var date;
        if (value.length) {
            // Covert from yyyy-mm-dd to mm/dd/yyyy for easy creation of date in current timezone
            var values = value.match(/(.{4})-(.{2})-(.{2})/);
            date = new Date(values[2] + '/' + values[3] + '/' + values[1]);
        }
        this.setDate(date, true, true, false);
    };
    DateComponent.prototype.pickDate = function (date) {
        this.setDate(DatepickerUtil.toDate(date));
        this.closePicker();
    };
    DateComponent.prototype.togglePicker = function () {
        var _this = this;
        if (this.showPicker) {
            this.closePicker();
        }
        else {
            this.openPicker();
            setTimeout(function () { return _this.keepPickerInBounds(); });
        }
    };
    DateComponent.prototype.openPicker = function () {
        this.showPicker = true;
        // If the date field is too low on the page, open the picker above it
        var el = this.element.nativeElement;
        var offset = DomUtilities.getAbsoluteOffset(el);
        var spaceBelow = window.innerHeight + window.scrollY - offset.top;
        this.pickerAbove = spaceBelow < 320 && window.innerHeight > 610;
    };
    DateComponent.prototype.closePicker = function () {
        this.showPicker = false;
        this.propagateTouched();
    };
    DateComponent.prototype.keepPickerInBounds = function () {
        if (this.showPicker) {
            // Find absolute offset in document
            var pickerEl = this.picker.nativeElement;
            var offset = window.innerWidth - pickerEl.offsetWidth - DomUtilities.getAbsoluteOffset(pickerEl.parentNode).left - 20;
            pickerEl.style.left = offset < 0 ? offset + 'px' : 0;
        }
    };
    /**
     * Process the value bound as the ngModel.
     */
    DateComponent.prototype.writeValue = function (value) {
        if (value && typeof value !== 'string') {
            this.format = 'date';
        }
        this.setDate(DateComponent.interpretDate(value), false);
    };
    /**
     * Format the date for the textbox.
     * @param date Date to format.
     */
    DateComponent.prototype.formatForDisplay = function (date) {
        return date ? new DatePipe('en-US').transform(date, this.displayFormat) : '';
    };
    /**
     * Parse a date from a string value.
     *
     * Valid values:
     * 040916
     * 04092016
     * 4/9/2016
     * 04/19/2016
     */
    DateComponent.prototype.parseUserInput = function (value) {
        var match = value && value.match(/^(\d{2}|\d[^\d])[^\d]*(\d{2}|\d[^\d])[^\d]*(\d{2}|\d{4})$/);
        return match && new Date(this.yearToInt(match[3]), parseInt(match[1].replace(/[^\d]/g, ''), 10) - 1, parseInt(match[2].replace(/[^\d]/g, ''), 10));
    };
    DateComponent.prototype.setTextValue = function (value) {
        this.textValue = value;
        this.setDate(this.parseUserInput(value), true, true, false);
    };
    /**
     * Parse user input and propogate to consumer when textbox blurs.
     */
    DateComponent.prototype.checkUserInput = function () {
        this.setDate(this.parseUserInput(this.textValue));
        this.propagateTouched();
    };
    /**
     * Parse the year from a string. 2 digit years will be in the future if within 20 years, otherwise moved to previous century.
     * @param yearStr 2 or 4 digit year.
     */
    DateComponent.prototype.yearToInt = function (yearStr) {
        var year = parseInt(yearStr, 10);
        if (year < 100) {
            var currentYear = this.currentYear;
            year += (currentYear - currentYear % 100);
            // Year should be in future so roll over to next century
            if (year < currentYear) {
                year += 100;
            }
            // Too far in future, roll back to previous century
            if (year - currentYear > this.twoDigitYearMaxYearsFromNow) {
                year -= 100;
            }
        }
        return year;
    };
    /**
     * Save the callback to notify the consumer of changes.
     */
    DateComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    DateComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    DateComponent.DEFAULT_FORMAT = 'MM/dd/yyyy';
    DateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-date',
                    template: "<div *ngIf=\"!supportsHtml5Date\" class=\"wrapper\" [tzfClickOutside]=\"showPicker\" (clickOutside)=\"closePicker()\" > <tzf-input-button [id]=\"id && id + '-calBtn'\" (btnClick)=\"togglePicker()\" [btnSVG]=\"'assets/common/icons/Calendar.svg'\" btnTitle=\"Open calendar\" [btnTabindex]=\"-1\" > <input [attr.id]=\"id\" type=\"text\" [attr.placeholder]=\"placeholder\" [ngModel]=\"textValue\" (ngModelChange)=\"setTextValue($event)\" (blur)=\"checkUserInput()\" (focus)=\"showPicker = false\" > </tzf-input-button> <tzf-datepicker *ngIf=\"showPicker\" [id]=\"id && id + '-picker'\" [class.above]=\"pickerAbove\" [ngModel]=\"pickerValue\" (ngModelChange)=\"pickDate($event)\" [yearPicker]=\"yearPicker\" ></tzf-datepicker> </div> <input type=\"date\" *ngIf=\"supportsHtml5Date\" [attr.id]=\"id\" [ngModel]=\"html5Value\" (ngModelChange)=\"setHtml5Date($event)\" (blur)=\"propagateTouched()\" > ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}.wrapper{position:relative}tzf-datepicker{background:#fff;border:1px solid #bfbfbf;border-radius:2px;position:absolute;z-index:1;top:100%;left:0;margin-top:-1px}tzf-datepicker.above{top:auto;bottom:100%;margin:0 0 -1px}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return DateComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    DateComponent.propDecorators = {
        'id': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'format': [{ type: Input },],
        'displayFormat': [{ type: Input },],
        'twoDigitYearMaxYearsFromNow': [{ type: Input },],
        'date': [{ type: Input },],
        'yearPicker': [{ type: Input },],
        'dateChange': [{ type: Output },],
        'picker': [{ type: ViewChild, args: [DatepickerComponent, { read: ElementRef },] },],
        'keepPickerInBounds': [{ type: HostListener, args: ['window:resize',] },],
    };
    return DateComponent;
}());
export { DateComponent };
//# sourceMappingURL=date.component.js.map