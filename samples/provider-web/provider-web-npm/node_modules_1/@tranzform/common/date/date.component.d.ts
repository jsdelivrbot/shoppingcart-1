import { EventEmitter, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module';
/**
 * An input field for dates.
 */
export declare class DateComponent implements OnChanges, ControlValueAccessor {
    private element;
    static DEFAULT_FORMAT: string;
    /**
     * ID for the date input.
     */
    id: string;
    /**
     * Text to show when no date is chosen.
     */
    placeholder: string;
    /**
     * Format of output via ngModel. Set to 'date' to get a Date object.
     */
    format: string;
    /**
     * Format of date in text box.
     */
    displayFormat: string;
    /**
     * Interpret 2 digit years within this many years from the current date as a future date. Otherwise it is in the past.
     *
     * Example #1
     * Current year: 2017
     * This value: 20
     * 2 digit year: 31
     * 31 - 17 = 14 < 20 so will be 2031.
     *
     * Example #2
     * Current year: 2017
     * This value: 20
     * 2 digit year: 41
     *
     * 41 - 17 = 24 > 20 so will be 1941.
     */
    twoDigitYearMaxYearsFromNow: number;
    date: Date;
    /**
     * Allow the user to quickly select years.
     */
    yearPicker: boolean;
    /**
     * Emit the value as a Date object when changed.
     */
    dateChange: EventEmitter<Date>;
    picker: ElementRef;
    currentYear: number;
    /**
     * The current value of this component displayed in the textbox.
     */
    textValue: string;
    /**
     * Open the datepicker above the input field.
     */
    pickerAbove: boolean;
    /**
     * The current value of this component displayed in an HTML5 date input.
     */
    private html5Value;
    private pickerValue;
    supportsHtml5Date: boolean;
    private showPicker;
    /**
     * Convert to the output format for propogation. If [format] is 'date' the date
     * is passed through* otherwise the Angular DatePipe uses it to format a string.
     * @param date Date to format.
     */
    static formatOutput(date?: Date, format?: string): string | Date;
    static interpretDate(value: Date | string): Date;
    /**
     * Notify the consumer of this component that the value was changed.
     */
    private propagateChange;
    /**
     * Notify the consumer of this component that the field was touched.
     */
    private propagateTouched;
    constructor(element: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Get the current date value.
     */
    getDate(): Date;
    /**
     * Set the current date value.
     * @param date Date to set.
     * @param propogate Notify this component's consumer of the new date.
     * @param emit Fire the dateChange event.
     */
    setDate(date?: Date, propogate?: boolean, emit?: boolean, updateInputValue?: boolean): void;
    /**
     * Set the date.
     * @param value Value from HTML5 date input.
     */
    private setHtml5Date(value);
    pickDate(date: NgbDateStruct): void;
    togglePicker(): void;
    private openPicker();
    private closePicker();
    keepPickerInBounds(): void;
    /**
     * Process the value bound as the ngModel.
     */
    writeValue(value: string | Date): void;
    /**
     * Format the date for the textbox.
     * @param date Date to format.
     */
    formatForDisplay(date?: Date): string;
    /**
     * Parse a date from a string value.
     *
     * Valid values:
     * 040916
     * 04092016
     * 4/9/2016
     * 04/19/2016
     */
    parseUserInput(value: string): Date;
    setTextValue(value: string): void;
    /**
     * Parse user input and propogate to consumer when textbox blurs.
     */
    checkUserInput(): void;
    /**
     * Parse the year from a string. 2 digit years will be in the future if within 20 years, otherwise moved to previous century.
     * @param yearStr 2 or 4 digit year.
     */
    yearToInt(yearStr: string): number;
    /**
     * Save the callback to notify the consumer of changes.
     */
    registerOnChange(fn: Function): void;
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    registerOnTouched(fn: Function): void;
}
