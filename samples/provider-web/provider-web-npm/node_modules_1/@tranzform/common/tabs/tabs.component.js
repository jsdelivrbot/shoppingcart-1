import { Component, Input, ContentChildren } from '@angular/core';
import { TabContentDirective } from './tab-content.directive';
/**
 * Content is shown based on which tab is selected.
 *
 * There are 3 modes of operation:
 *
 * Routes
 * Tabs are configured to specify child routes. This allows linking to a tab and adds tab switches to the history stack.
 * Note: Only 1 allowed per page.
 *
 * Auxiliary Routes
 * Tabs are configured to specify auxiliary child routes. Works like routes above but allows multiple per page.
 * Note: This is probably preferred to regular Routes as the URL has better semantic meaning for tabs.
 *
 * Contents
 * Children of this component using the TabContentDirective are hidden until selected. Their state is maintained.
 *
 * @example
 * <!-- Routes -->
 * <tzf-tabs [items]="tabRoutes">
 *   <router-outlet></router-outlet>
 * </tzf-tabs>
 *
 * <!-- Auxiliary Routes -->
 * <tzf-tabs
 *   [items]="tabRoutes"
 *   outlet="auxTabs"
 * >
 *   <router-outlet name="auxTabs"></router-outlet>
 * </tzf-tabs>
 *
 * tabRoutes: TabItem[] = [{
 *   id: 'child1',
 *   label: 'Child 1',
 *   routerPath: 'childRoute1',
 *   svgPath: 'assets/tabOneIcon.svg',
 * }, {
 *   id: 'child2',
 *   label: 'Child 2',
 *   routerPath: 'childRoute2',
 *   svgPath: 'assets/tabTwoIcon.svg',
 * }];
 *
 * @example
 * <tzf-tabs>
 *   <div tzfTabContent id="first" [tabLabel]="First" [tabSvgPath]="assets/tabOneIcon.svg">
 *     This is the content of the first tab.
 *   </div>
 *   <div tzfTabContent id="second" [tabLabel]="Second" [tabSvgPath]="assets/tabTwoIcon.svg">
 *     This is the content of the second tab.
 *   </div>
 * </tzf-tabs>
 */
var TabsComponent = (function () {
    function TabsComponent() {
    }
    /**
     * Initialize child tabs.
     */
    TabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.tabs.length) {
            if (!this.selected) {
                this.selected = this.tabs.first.id;
            }
            this.initTabs(true);
        }
        else {
            this.routing = true;
            if (this.outlet) {
                this.items.forEach(function (item) {
                    var outletPath = item.routerPath;
                    item.routerPath = {
                        outlets: {},
                    };
                    item.routerPath.outlets[_this.outlet] = [outletPath];
                });
            }
        }
    };
    /**
     * Create TabItems from directives.
     */
    TabsComponent.prototype.initTabs = function (initial) {
        var _this = this;
        this.items = [];
        this.tabs.forEach(function (tab) {
            if (initial) {
                if (tab.id === _this.selected) {
                    _this.selectedTab = tab;
                }
                else {
                    tab.show(false);
                }
                tab.parent = _this;
            }
            _this.items.push({
                id: tab.id,
                label: tab.tabLabel,
                badge: tab.tabBadge,
                svgPath: tab.tabSvgPath,
                routerPath: '',
                instance: tab,
                disabled: tab.disabled
            });
        });
    };
    /**
     * Used by non-route tabs to show their content.
     */
    TabsComponent.prototype.select = function (tab) {
        this.selected = tab.id;
        this.selectedTab.show(false);
        tab.show();
        this.selectedTab = tab;
    };
    /**
     * Used by non-route tabs to show their content.
     */
    TabsComponent.prototype.isDisabled = function (tab) {
        return tab._disabled;
    };
    /**
     * Only show badge if it has a valid value to display.
     * @param value Badge value.
     */
    TabsComponent.prototype.showBadge = function (value) {
        return value !== undefined && value !== false && (typeof value === 'number' || value.length);
    };
    TabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-tabs',
                    template: "<ul role=\"tablist\" > <li *ngFor=\"let tab of items; let i = index\" role=\"presentation\" class=\"tab\" > <a *ngIf=\"routing\" [attr.id]=\"tab.id && tab.id + '-tab'\" role=\"tab\" [class.disabled]=\"tab.disabled\" [routerLink]=\"tab.routerPath\" routerLinkActive=\"active\" [inlineSVG]=\"tab.svgPath\" [prepend]=\"true\" > {{ tab.label | translate }} <strong class=\"badge\" *ngIf=\"showBadge(tab.badge)\" translate> <span class=\"badge-value\">{{ tab.badge }}</span> </strong> </a> <button *ngIf=\"!routing\" [attr.id]=\"tab.id && tab.id + '-tab'\" (click)=\"select(tab.instance)\" role=\"tab\" [disabled]=\"tab.disabled\" [attr.aria-selected]=\"tab.id === selected\" [attr.aria-controls]=\"tab.id\" [inlineSVG]=\"tab.svgPath\" [prepend]=\"true\" > {{ tab.label | translate }} <strong class=\"badge\" *ngIf=\"showBadge(tab.badge)\" translate> <span class=\"badge-value\">{{ tab.badge }}</span> </strong> </button> </li> </ul> <ng-content></ng-content> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}[role=tablist]{border-bottom:1px solid #69b488;height:3.5em;padding:0 .8em}.tab,[role=tab]{display:inline-block;height:3.5em}[role=tab]{background:none;border:solid transparent;border-radius:3px 3px 0 0;border-width:5px 1px 0;color:#257f8e;cursor:pointer;font-weight:700;line-height:2em;padding:.5em 1.2em;text-decoration:none}[role=tab]:focus{background:#e1e1e1;outline:none}[role=tab]:disabled{color:#8c8c8c;pointer-events:none;cursor:default}[role=tab] ::ng-deep svg{height:2em;margin:0 .5em -.5em 0}[role=tab] ::ng-deep path,[role=tab] ::ng-deep use{fill:currentColor}.active,[aria-selected=true]{background:#fafafa;border-color:#69b488;color:#5d5d5d}.badge{background:currentColor;border-radius:2em;display:inline-block;font-size:.8em;line-height:1.6em;margin-left:.3em;padding:0 .8em}.badge-value{color:#fff}a[role=tab].disabled{color:#8c8c8c;pointer-events:none;cursor:default}"]
                },] },
    ];
    /** @nocollapse */
    TabsComponent.ctorParameters = function () { return []; };
    TabsComponent.propDecorators = {
        'items': [{ type: Input },],
        'outlet': [{ type: Input },],
        'selected': [{ type: Input },],
        'tabs': [{ type: ContentChildren, args: [TabContentDirective,] },],
    };
    return TabsComponent;
}());
export { TabsComponent };
//# sourceMappingURL=tabs.component.js.map