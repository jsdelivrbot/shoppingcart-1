import { Directive, Input, ElementRef } from '@angular/core';
/**
 * Configuration for content tabs.
 */
var TabContentDirective = (function () {
    /**
     * Save the reference to the element this directive is attached to.
     */
    function TabContentDirective(_element) {
        this._element = _element;
    }
    Object.defineProperty(TabContentDirective.prototype, "parent", {
        set: function (tabs) {
            this._parent = tabs;
        },
        enumerable: true,
        configurable: true
    });
    TabContentDirective.prototype.ngOnChanges = function (changes) {
        if (this._parent) {
            this._parent.initTabs();
        }
    };
    TabContentDirective.prototype.ngAfterViewInit = function () {
        var el = this._element.nativeElement;
        el.setAttribute('role', 'tabpanel');
        if (this.id) {
            el.setAttribute('aria-labelledby', this.id + '-tab');
        }
    };
    /**
     * Specify if the content of this tab should be shown.
     */
    TabContentDirective.prototype.show = function (show) {
        if (show === void 0) { show = true; }
        this._element.nativeElement.style.display = show ? '' : 'none';
    };
    TabContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tzfTabContent]',
                },] },
    ];
    /** @nocollapse */
    TabContentDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    TabContentDirective.propDecorators = {
        'id': [{ type: Input },],
        'tabLabel': [{ type: Input },],
        'tabBadge': [{ type: Input },],
        'tabSvgPath': [{ type: Input },],
        'disabled': [{ type: Input },],
    };
    return TabContentDirective;
}());
export { TabContentDirective };
//# sourceMappingURL=tab-content.directive.js.map