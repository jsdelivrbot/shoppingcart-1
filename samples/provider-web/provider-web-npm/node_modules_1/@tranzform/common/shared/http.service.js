var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { Http, Headers } from '@angular/http';
import { ConfigModule } from './config.constant';
import { TzfTranslateService } from './translate.service';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { AuthorizationService } from '../security';
export function HttpServiceFactory(backend, options) {
    return new HttpService(backend, options);
}
var HttpService = (function (_super) {
    __extends(HttpService, _super);
    function HttpService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.appConfig = new ConfigModule();
        _this.authService = AuthorizationService.instance();
        return _this;
    }
    HttpService.prototype.getHeaders = function (existingHeaders) {
        return this.authService.getHeaders(existingHeaders);
    };
    HttpService.prototype.request = function (url, options) {
        var headers;
        if (typeof url === 'string') {
            if (!options) {
                // let's make option object
                options = { headers: new Headers() };
            }
            headers = this.getHeaders(options.headers);
        }
        else {
            // we have to add the token to the url object
            headers = url.headers = this.getHeaders(url.headers);
        }
        headers.set(this.appConfig.X_HEADER_PREFERRED_LANGUAGE, TzfTranslateService.currentLang);
        return _super.prototype.request.call(this, url, options).catch(this.catchAuthError(this));
    };
    HttpService.prototype.catchAuthError = function (self) {
        // we have to pass HttpService's own instance here as `self`
        return function (res) {
            if (res.status === 401 || res.status === 403) {
                // if not authenticated
                console.warn(res);
            }
            return Observable.throw(res);
        };
    };
    HttpService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return []; };
    return HttpService;
}(Http));
export { HttpService };
//# sourceMappingURL=http.service.js.map