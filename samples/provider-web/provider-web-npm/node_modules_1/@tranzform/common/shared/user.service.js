import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import 'rxjs/add/operator/first';
import { TranslateService } from '@ngx-translate/core';
import { WebAuthenticationApi } from '@tranzform/client-auth';
/**
 * Load and cache user info.
 */
var UserService = (function () {
    function UserService(webAuthApi, translate) {
        var _this = this;
        this.readySubject = new ReplaySubject(1);
        webAuthApi.getUserDetails().subscribe(function (user) {
            _this._user = user;
            translate.use(user.language.substring(0, 2));
            _this.readySubject.next(user);
        });
    }
    Object.defineProperty(UserService.prototype, "user", {
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserService.prototype, "ready", {
        /**
         * An observable that will notify when user info is available.
         */
        get: function () {
            return this.readySubject.asObservable().first();
        },
        enumerable: true,
        configurable: true
    });
    UserService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    UserService.ctorParameters = function () { return [
        { type: WebAuthenticationApi, },
        { type: TranslateService, },
    ]; };
    return UserService;
}());
export { UserService };
//# sourceMappingURL=user.service.js.map