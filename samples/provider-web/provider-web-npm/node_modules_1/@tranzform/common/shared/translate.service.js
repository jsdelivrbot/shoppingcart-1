var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
/**
 * Drop in replacement for TranslateService that listens for language changes.
 *
 * TranslateService depends on Http so our HttpService can't depend on it.
 * This makes the language available to it without having to inject it.
 */
var TzfTranslateService = (function (_super) {
    __extends(TzfTranslateService, _super);
    function TzfTranslateService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TzfTranslateService, "currentLang", {
        get: function () {
            return TzfTranslateService.lang;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Intercept the new language to use and make it available in a static way.
     * @param lang
     */
    TzfTranslateService.prototype.use = function (lang) {
        TzfTranslateService.lang = lang;
        return _super.prototype.use.call(this, lang);
    };
    TzfTranslateService.lang = 'en-US';
    TzfTranslateService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TzfTranslateService.ctorParameters = function () { return []; };
    return TzfTranslateService;
}(TranslateService));
export { TzfTranslateService };
//# sourceMappingURL=translate.service.js.map