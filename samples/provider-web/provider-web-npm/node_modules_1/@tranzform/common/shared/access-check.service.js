import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/do';
import { RoleBasedAccessControlApi } from '@tranzform/client-authorization';
import { CapabilityConstantUtil } from '../shared/capability.constants';
// export const ACCESSCHECK = new OpaqueToken('accessCheck');
var AccessCheckService = (function () {
    function AccessCheckService(rolesService, http) {
        this.rolesService = rolesService;
        this.http = http;
        this.capabilitiesObservable = null;
        this.cachedData = null;
    }
    AccessCheckService.prototype.initPermissions = function () {
        this.getCapabilitesCached().subscribe(function (result) { });
    };
    AccessCheckService.prototype.getAllPermissions = function () {
        var _this = this;
        if (!this.cachedData) {
            this.capabilitiesObservable.subscribe(function (result) {
                _this.cachedData = result;
            });
        }
        ;
        return this.capabilitiesObservable;
    };
    AccessCheckService.prototype.getCapabilities = function (capabilityKey) {
        var list = [];
        if (this.cachedData) {
            var capabilityId = CapabilityConstantUtil.getCapabilityId(capabilityKey);
            if (capabilityId) {
                list = this.cachedData[capabilityId];
            }
        }
        return list;
    };
    AccessCheckService.prototype.getCapabilitesCached = function () {
        var _this = this;
        if (this.cachedData) {
            return Observable.of(this.cachedData);
        }
        else {
            return this.http.request('/assets/data/capabilities.json')
                .map(function (res) { return res.json(); })
                .do(function (data) {
                _this.cachedData = data;
            });
        }
    };
    AccessCheckService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AccessCheckService.ctorParameters = function () { return [
        { type: RoleBasedAccessControlApi, },
        { type: Http, },
    ]; };
    return AccessCheckService;
}());
export { AccessCheckService };
//# sourceMappingURL=access-check.service.js.map