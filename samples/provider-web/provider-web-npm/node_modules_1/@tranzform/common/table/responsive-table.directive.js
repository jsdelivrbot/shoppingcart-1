import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, ElementRef, ContentChildren } from '@angular/core';
import { Column } from 'primeng/components/common/shared';
import { ResponsiveColumnDirective } from './responsive-column.directive';
/**
 * Provide responsive functionality for data tables where columns will be moved
 * to the expandable area when there isn't enough room to fit them all.
 *
 * @example
 * <p-dataTable
 *   [value]="data"
 *   [expandableRows]="true"
 *   (responsiveColumns)="columns = $event"
 *   [responsiveExpander]="true"
 * >
 *   <p-column expander="true" styleClass="expander"></p-column>
 *   <p-column field="field1" header="Field 1" [responsiveMinWidth]="50"></p-column>
 *   ... more columns ...
 *   <ng-template pTemplate="rowexpansion" let-row>
 *     <tzf-responsive-columns
 *       [row]="row"
 *       [columns]="columns"
 *     ></tzf-responsive-columns>
 *     ... additional expandable content if desired ...
 *   </ng-template>
 * </p-dataTable>
 */
var ResponsiveTableDirective = (function () {
    function ResponsiveTableDirective(elRef) {
        this.elRef = elRef;
        /**
         * Provide the responsive columns to be bound to tzf-responsive-columns.
         */
        this.responsiveColumns = new EventEmitter();
    }
    /**
     * Emit columns, save the column widths, and find the columns that should be visible right away.
     */
    ResponsiveTableDirective.prototype.ngAfterViewInit = function () {
        this.responsiveColumns.emit(this.columnQuery.toArray().splice(1));
        this.columnWidths = this.responsiveColumnQuery.map(function (column) { return column.responsiveWidth; });
        this.updateVisible();
    };
    /**
     * Calculate how many columns can be shown while maintaining minimum column widths.
     */
    ResponsiveTableDirective.prototype.updateVisible = function () {
        var colWidths = this.columnWidths;
        var tableWidth = this.elRef.nativeElement.getBoundingClientRect().width - 60; // 60 for expander
        var visibleColumns;
        for (var i = 0; i < colWidths.length; i++) {
            tableWidth -= colWidths[i];
            if (tableWidth < 0) {
                visibleColumns = i;
                break;
            }
        }
        this.visibleColumns = visibleColumns;
    };
    ResponsiveTableDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'p-dataTable[responsiveColumns]' // tslint:disable-line:directive-selector
                },] },
    ];
    /** @nocollapse */
    ResponsiveTableDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    ResponsiveTableDirective.propDecorators = {
        'responsiveExpander': [{ type: HostBinding, args: ['class.responsiveExpander',] }, { type: Input },],
        'responsiveColumns': [{ type: Output },],
        'columnQuery': [{ type: ContentChildren, args: [Column,] },],
        'responsiveColumnQuery': [{ type: ContentChildren, args: [ResponsiveColumnDirective,] },],
        'visibleColumns': [{ type: HostBinding, args: ['attr.visibleColumns',] },],
        'updateVisible': [{ type: HostListener, args: ['window:resize',] },],
    };
    return ResponsiveTableDirective;
}());
export { ResponsiveTableDirective };
//# sourceMappingURL=responsive-table.directive.js.map