import { ControlValueAccessor } from '@angular/forms';
/**
 * Provide a row of options to select from.
 *
 * @example
 * <tzf-segmented
 *   [(ngModel)]="selection"
 *   [options]="choices"
 *   [textField]="label"
 *   [valueField]="value"
 * ></tzf-segmented>
 *
 * @example
 * choices = [{
 *   label: 'Choice #1',
 *   value: 1,
 * }, {
 *   label: 'Choice #2',
 *   value: 2,
 * }];
 *
 * // The initial selection
 * selection = 1;
 */
export declare class SegmentedComponent implements ControlValueAccessor {
    /**
     * ID for the segmented field.
     */
    id: string;
    /**
     * Source of options to present.
     */
    options: any[];
    /**
     * Text label for the segment option.
     */
    textField: string;
    /**
     * If not set, the option index will be used.
     */
    valueField: string;
    /**
     * The current value.
     */
    private value;
    /**
     * One of the options has focus.
     */
    focus: boolean;
    /**
     * Notify the consumer of this component that the value was changed.
     */
    private propagateChange;
    /**
     * Notify the consumer of this component that the field was touched.
     */
    private propagateTouched;
    /**
     * A different option was selected.
     * @param value The new value.
     */
    changed(value: any): void;
    /**
     * Set the value of this component via ngModel.
     * @param value The new value.
     */
    writeValue(value: string): void;
    /**
     * Save the callback to notify the consumer of changes.
     */
    registerOnChange(fn: Function): void;
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    registerOnTouched(fn: Function): void;
}
