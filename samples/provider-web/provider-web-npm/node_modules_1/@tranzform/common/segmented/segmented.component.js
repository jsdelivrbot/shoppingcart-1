import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * Provide a row of options to select from.
 *
 * @example
 * <tzf-segmented
 *   [(ngModel)]="selection"
 *   [options]="choices"
 *   [textField]="label"
 *   [valueField]="value"
 * ></tzf-segmented>
 *
 * @example
 * choices = [{
 *   label: 'Choice #1',
 *   value: 1,
 * }, {
 *   label: 'Choice #2',
 *   value: 2,
 * }];
 *
 * // The initial selection
 * selection = 1;
 */
var SegmentedComponent = (function () {
    function SegmentedComponent() {
        /**
         * Text label for the segment option.
         */
        this.textField = 'text';
        /**
         * Notify the consumer of this component that the value was changed.
         */
        this.propagateChange = function () { };
        /**
         * Notify the consumer of this component that the field was touched.
         */
        this.propagateTouched = function () { };
    }
    /**
     * A different option was selected.
     * @param value The new value.
     */
    SegmentedComponent.prototype.changed = function (value) {
        this.propagateChange(value);
        this.propagateTouched();
    };
    /**
     * Set the value of this component via ngModel.
     * @param value The new value.
     */
    SegmentedComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * Save the callback to notify the consumer of changes.
     */
    SegmentedComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    SegmentedComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    SegmentedComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-segmented',
                    template: "<div [attr.id]=\"id\" class=\"segmented-container\" [class.focus]=\"focus\" role=\"group\" > <label *ngFor=\"let option of options; let i = index\" class=\"option\"> <input type=\"radio\" class=\"input\" name=\"{{ id }}-radio\" (focus)=\"focus = true\" (blur)=\"focus = false\" [ngModel]=\"value\" (ngModelChange)=\"changed($event)\" [value]=\"valueField ? option[valueField] : i\" > <span class=\"content\" translate> {{ option[textField] }} </span> </label> </div> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}.segmented-container{display:flex;border:1px solid #d2d2d2;border-radius:2px;box-shadow:0 1px 1px rgba(0,0,0,.15);margin-bottom:1em}.segmented-container.focus{box-shadow:0 0 3px 1px #257f8e}.option{overflow:hidden;position:relative;flex:auto;margin:0}.option:not(:first-child){border-left:1px solid #d2d2d2}.input{position:absolute;left:-100%}.content{background:#f5f5f5;color:#777;display:block;padding:.2em 1em;text-align:center}.input:checked+.content{background:#d6d6d6;box-shadow:inset 0 0 2px rgba(0,0,0,.25)}.input:not(:checked)+.content{cursor:pointer}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return SegmentedComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    SegmentedComponent.ctorParameters = function () { return []; };
    SegmentedComponent.propDecorators = {
        'id': [{ type: Input },],
        'options': [{ type: Input },],
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
    };
    return SegmentedComponent;
}());
export { SegmentedComponent };
//# sourceMappingURL=segmented.component.js.map