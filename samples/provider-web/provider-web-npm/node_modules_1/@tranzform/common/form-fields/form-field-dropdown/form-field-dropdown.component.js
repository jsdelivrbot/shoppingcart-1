var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Input, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormFieldChild } from '../form-field-child';
import { FormFieldPopoverComponent } from '../form-field-popover/form-field-popover.component';
/**
 * A dropdown to be used in form fields.
 */
var FormFieldDropdownComponent = (function (_super) {
    __extends(FormFieldDropdownComponent, _super);
    function FormFieldDropdownComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Objects available for selection in the dropdown.
         */
        _this.options = [];
        /**
         * The field in the objects in [options] to use as the text for options in the dropdown.
         */
        _this.textField = 'text';
        /**
         * The field in the objects in [options] to use as the value for options in the dropdown.
         */
        _this.valueField = 'value';
        /**
         * Amount of selections to show when closed before appending "n more..."
         */
        _this.maxSelectedVisible = 10;
        /**
         * Text for option to select all and show that all are selected.
         */
        _this.allText = 'All';
        /**
         * Text to show if [options] is empty.
         */
        _this.noOptionsText = 'There are no options available.';
        _this.valueMap = {};
        _this.selectedValueArray = [];
        _this.selectedValueMap = {};
        _this.selectedOptions = [];
        _this.propagateChange = function () { };
        _this.propagateTouched = function () { };
        return _this;
    }
    FormFieldDropdownComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.options) {
            if (!this.options) {
                this.options = [];
            }
            if (!this.multi) {
                this.valueMap = {};
                this.options.forEach(function (option) { return _this.valueMap[option[_this.valueField]] = option[_this.textField]; });
            }
        }
    };
    FormFieldDropdownComponent.prototype.editValueChanged = function (value) {
        this.editValue = value;
        this.ngModelChanged = true;
    };
    /**
     * Update map of selected values.
     */
    FormFieldDropdownComponent.prototype.updateValueMap = function () {
        var _this = this;
        if (this.multi) {
            this.selectedValueMap = {};
            this.selectedValueArray.forEach(function (entry) { return _this.selectedValueMap[entry] = true; });
            this.updateAll();
        }
        else {
            this.editValue = this.value;
        }
        this.ngModelChanged = false;
    };
    /**
     * Update the list of currently selected options.
     */
    FormFieldDropdownComponent.prototype.updateSelectedOptions = function () {
        var _this = this;
        this.selectedOptions = this.options.filter(function (option) {
            return _this.selectedValueMap[option[_this.valueField]];
        });
    };
    /**
     * Accept the current changes and propogate them.
     */
    FormFieldDropdownComponent.prototype.accept = function () {
        var _this = this;
        if (this.ngModelChanged) {
            if (this.multi) {
                this.updateSelectedOptions();
                this.selectedValueArray = this.selectedOptions.map(function (option) { return option[_this.valueField]; });
                this.propagateChange(this.selectedValueArray);
            }
            else {
                this.value = this.editValue;
                this.propagateChange(this.value);
            }
        }
    };
    /**
     * Set the value of the dropdown. Used by ngModel.
     * @param value Value to set.
     */
    FormFieldDropdownComponent.prototype.writeValue = function (value) {
        if (Array.isArray(value) && this.multi !== false) {
            this.multi = true;
        }
        if (this.multi) {
            this.selectedValueArray = value || [];
            this.updateValueMap();
            this.updateSelectedOptions();
        }
        else {
            this.value = value;
        }
    };
    FormFieldDropdownComponent.prototype.reset = function () {
        if (this.multi) {
            this.toggleAll(false);
        }
        else {
            this.editValue = undefined;
            this.ngModelChanged = true;
        }
    };
    /**
     * Check or uncheck all options.
     * @param checkAll Options should be checked.
     */
    FormFieldDropdownComponent.prototype.toggleAll = function (checkAll) {
        var _this = this;
        this.allSelected = checkAll;
        this.options.forEach(function (option) { return _this.selectedValueMap[option[_this.valueField]] = checkAll; });
        this.ngModelChanged = true;
    };
    /**
     * Update whether all options are selected or not.
     */
    FormFieldDropdownComponent.prototype.updateAll = function () {
        var numSelected = 0;
        for (var value in this.selectedValueMap) {
            if (this.selectedValueMap[value]) {
                numSelected++;
            }
            else {
                break;
            }
        }
        this.allSelected = (numSelected === this.options.length);
        this.ngModelChanged = true;
    };
    FormFieldDropdownComponent.prototype.setDisabled = function (disabled) {
        this.popover.disabled = disabled;
    };
    /**
     * Set the callback when the dropdown value changes. Used by ngModel.
     * @param fn Change callback.
     */
    FormFieldDropdownComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Set the callback when the dropdown is touched. Used by ngModel.
     * @param fn Touched callback.
     */
    FormFieldDropdownComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    FormFieldDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-form-field-dropdown',
                    template: "<tzf-form-field-popover [id]=\"id && id + '-popover'\" (prepare)=\"updateValueMap()\" (accept)=\"accept()\" (reset)=\"reset()\"> <span button> <span *ngIf=\"multi && selectedOptions.length && selectedOptions.length === options.length\" translate> {{ allText }} </span> <span *ngIf=\"multi && selectedOptions.length && selectedOptions.length < options.length\"> <span *ngFor=\"let option of selectedOptions; let last = last; let i = index\"> <ng-container *ngIf=\"i < maxSelectedVisible\"> <span class=\"option-{{ option[valueField] }}\" translate>{{ option[textField] }}</span>{{ !last ? ',' : '' }} </ng-container> </span> <span *ngIf=\"selectedOptions.length > maxSelectedVisible\"> {{ selectedOptions.length - maxSelectedVisible }} more... </span> </span> <span *ngIf=\"value\" translate> {{ valueMap[value] }} </span> <span *ngIf=\"multi ? !selectedOptions.length : !value\" translate> {{ placeholder }} </span> </span> <div content> <ng-container *ngIf=\"options.length\"> <label *ngIf=\"multi\"> <input type=\"checkbox\" [checked]=\"allSelected\" (click)=\"toggleAll($event.target.checked)\" ><span class=\"styledInput\"></span> {{ allText | translate }} </label> <label *ngFor=\"let option of options\" class=\"option-{{ option[valueField] }}\"> <input *ngIf=\"!multi\" type=\"radio\" name=\"{{ id }}-radio\" [ngModel]=\"editValue\" (ngModelChange)=\"editValueChanged($event)\" [value]=\"option[valueField]\" ><input *ngIf=\"multi\" type=\"checkbox\" [(ngModel)]=\"selectedValueMap[option[valueField]]\" (change)=\"updateAll()\" ><span class=\"styledInput\"></span> {{ option[textField] | translate }} </label> </ng-container> <span *ngIf=\"!options.length\" translate> {{ noOptionsText }} </span> </div> </tzf-form-field-popover> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}label{display:block;font-size:16px;font-weight:100;margin:0;padding:.2em 0 1em;white-space:nowrap}label:first-child{padding-top:0}[content]{max-height:200px}input{opacity:0;width:0}input+.styledInput{border:1px solid #bfbfbf;border-radius:2px;box-shadow:0 1px 1px 0 rgba(0,0,0,.2);display:inline-block;height:16px;width:16px;position:relative;top:2px;margin-right:.4em}input[type=radio]+.styledInput{border-radius:100%}input[type=checkbox]:checked+.styledInput:before{content:'\\2713';color:#fff;display:inline-block;position:relative;font-size:14px;top:-4px;font-weight:700;margin-left:2px}input:checked+.styledInput{background:#257f8e;border-color:#257f8e;overflow:hidden}input:focus+.styledInput{box-shadow:0 1px 8px 0 rgba(0,0,0,.6)}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return FormFieldDropdownComponent; }),
                            multi: true
                        }, {
                            provide: FormFieldChild,
                            useExisting: forwardRef(function () { return FormFieldDropdownComponent; })
                        }]
                },] },
    ];
    /** @nocollapse */
    FormFieldDropdownComponent.ctorParameters = function () { return []; };
    FormFieldDropdownComponent.propDecorators = {
        'placeholder': [{ type: Input },],
        'options': [{ type: Input },],
        'textField': [{ type: Input },],
        'valueField': [{ type: Input },],
        'maxSelectedVisible': [{ type: Input },],
        'allText': [{ type: Input },],
        'noOptionsText': [{ type: Input },],
        'id': [{ type: Input },],
        'multi': [{ type: Input },],
        'popover': [{ type: ViewChild, args: [FormFieldPopoverComponent,] },],
    };
    return FormFieldDropdownComponent;
}(FormFieldChild));
export { FormFieldDropdownComponent };
//# sourceMappingURL=form-field-dropdown.component.js.map