import { SimpleChanges, OnChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FormFieldChild } from '../form-field-child';
import { FormFieldPopoverComponent } from '../form-field-popover/form-field-popover.component';
/**
 * A dropdown to be used in form fields.
 */
export declare class FormFieldDropdownComponent extends FormFieldChild implements OnChanges, ControlValueAccessor {
    /**
     * Text to display by default if no option is selected.
     */
    placeholder: string;
    /**
     * Objects available for selection in the dropdown.
     */
    options: any[];
    /**
     * The field in the objects in [options] to use as the text for options in the dropdown.
     */
    textField: string;
    /**
     * The field in the objects in [options] to use as the value for options in the dropdown.
     */
    valueField: string;
    /**
     * Amount of selections to show when closed before appending "n more..."
     */
    maxSelectedVisible: number;
    /**
     * Text for option to select all and show that all are selected.
     */
    allText: string;
    /**
     * Text to show if [options] is empty.
     */
    noOptionsText: string;
    /**
     * ID of dropdown element, also used to prefix popover ID. Required if [multi] is false.
     */
    id: string;
    /**
     * Allow multiple selections. This defaults to true if an array is bound to [ngModel].
     */
    multi: boolean;
    /**
     * Reference to the popover used to show the dropdown.
     */
    popover: FormFieldPopoverComponent;
    value: any;
    private editValue;
    private valueMap;
    private selectedValueArray;
    private selectedValueMap;
    selectedOptions: any[];
    private allSelected;
    private ngModelChanged;
    private propagateChange;
    private propagateTouched;
    ngOnChanges(changes: SimpleChanges): void;
    private editValueChanged(value);
    /**
     * Update map of selected values.
     */
    updateValueMap(): void;
    /**
     * Update the list of currently selected options.
     */
    private updateSelectedOptions();
    /**
     * Accept the current changes and propogate them.
     */
    accept(): void;
    /**
     * Set the value of the dropdown. Used by ngModel.
     * @param value Value to set.
     */
    writeValue(value: any | any[]): void;
    reset(): void;
    /**
     * Check or uncheck all options.
     * @param checkAll Options should be checked.
     */
    private toggleAll(checkAll);
    /**
     * Update whether all options are selected or not.
     */
    private updateAll();
    setDisabled(disabled: boolean): void;
    /**
     * Set the callback when the dropdown value changes. Used by ngModel.
     * @param fn Change callback.
     */
    registerOnChange(fn: Function): void;
    /**
     * Set the callback when the dropdown is touched. Used by ngModel.
     * @param fn Touched callback.
     */
    registerOnTouched(fn: Function): void;
}
