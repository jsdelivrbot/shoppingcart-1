import { EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { FormFieldChild } from '../form-field-child';
/**
 * Provide a button in the place of a field to open a large popover with a custom template.
 *
 * @example
 * <tzf-form-field-popover
 *   [actions]="true"
 *   (prepare)="preparePopoverData()"
 *   (accept)="copyDataFromPopover()"
 *   (reset)="clearPopoverData()"
 * >
 *   I can put whatever content I want here! How about a text box.
 *   <input type="text" [(ngModel)]="popoverData.value">
 * </tzf-form-field-popover>
 */
export declare class FormFieldPopoverComponent extends FormFieldChild implements OnInit, OnDestroy {
    /**
     * Display Reset and Done buttons at the bottom of the popover.
     */
    actions: boolean;
    /**
     * ID of popover element, also used to prefix action button IDs.
     */
    id: string;
    /**
     * Prevent keyboard access to the toggle button. Used when the button is needed for mouse users but there is an input for keybaord users.
     */
    disableToggleKeyAccess: boolean;
    /**
     * Disable this field. This should be handled by tzfFormField or other common component.
     */
    disabled: boolean;
    /**
     * Called before the popover is opened. If necessary, set up the
     * data bound to the fields in the popover.
     */
    prepare: EventEmitter<{}>;
    /**
     * Called when the user has finished using the popover.
     */
    accept: EventEmitter<{}>;
    /**
     * The data bound to the fields in the popover should be reset.
     */
    reset: EventEmitter<{}>;
    /**
     * The container element of the popover.
     */
    private popoverRef;
    /**
     * The toggle button.
     */
    private toggleButtonRef;
    /**
     * Initialized by FormFieldComponent parent.
     */
    label: string;
    /**
     * The popover should be displayed.
     *
     * Initialized to false instead of undefined for aria attributes.
     */
    open: boolean;
    /**
     * Global listener for focus events.
     */
    private docFocusListener;
    /**
     * Set up listener for focus events to automatically close the popover.
     * @private
     */
    ngOnInit(): void;
    /**
     * Remove the focus event listener.
     * @private
     */
    ngOnDestroy(): void;
    /**
     * Accept the edits in the popover and close it.
     */
    doAccept(focusToggleOnClose?: boolean): void;
    /**
     * Reset the data in the popover and accept it, then close it.
     */
    private doReset();
    /**
     * Close the popover and return focus to the toggle button if desired.
     */
    private close(focusToggle?);
    /**
     * Close the popup when Escape is pressed.
     */
    private closeOnEsc(event);
    /**
     * Act as if Done was clicked when Enter is pressed.
     */
    closeOnEnter(event: KeyboardEvent): boolean;
    /**
     * Open or close the popover.
     */
    toggle(): void;
    /**
     * Attempt to focus on the first field in the popover.
     */
    private autoFocus();
    /**
     * Check if the popover is wide enough to go offscreen
     * and move to the left enough to bring it back on.
     */
    keepPopoverOnScreen(): void;
    /**
     * Get the popover container's native element.
     */
    private readonly popoverEl;
}
