import { Component, HostBinding, ContentChild, Input, } from '@angular/core';
import { FormFieldChild } from './form-field-child';
import { FormFieldPopoverComponent } from './form-field-popover/form-field-popover.component';
/**
 * Provide layout for base and custom form fields.
 */
var FormFieldComponent = (function () {
    function FormFieldComponent() {
    }
    FormFieldComponent.prototype.ngOnInit = function () {
        if (this.text) {
            console.warn('The text attribute is deprecated on tzfFormField. Use label instead. (' + this.text + ')');
            this.label = this.text;
        }
    };
    /**
     * Forward the text label to a child popover if there is one.
     */
    FormFieldComponent.prototype.ngAfterContentInit = function () {
        if (this.popover) {
            this.popover.label = this.text;
        }
        if (this.childField) {
            this.childField.setDisabled(this.disabled);
        }
    };
    FormFieldComponent.prototype.ngOnChanges = function (changes) {
        if (changes.disabled) {
            if (this.childField) {
                this.childField.setDisabled(this.disabled);
            }
        }
    };
    FormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: '[tzfFormField]',
                    template: "<div [class.short-label-and-content]=\"short\" > <p class=\"label-content\"> <label [attr.for]=\"labelFor\" translate >{{ label }}</label> <span *ngIf=\"hasInfo\" class=\"info-container\" tzfClickOutside (clickOutside)=\"showInfo = false\" > <button type=\"button\" [attr.id]=\"id && id + '-infoBtn'\" class=\"info-btn\" inlineSVG=\"assets/common/icons/Icon_Info.svg\" (click)=\"showInfo = true\" ></button ><div class=\"info-box\"> <div class=\"info-box-content\"> <ng-content select=\"[info]\"></ng-content> </div> <button type=\"button\" [attr.id]=\"id && id + '-infoCloseBtn'\" class=\"info-close\" (click)=\"showInfo = false\" >âœ•</button> </div> </span> </p> <p *ngIf=\"hint && !short\" class=\"hint\" translate>{{ hint }}</p> <ng-content></ng-content> </div> <p *ngIf=\"hint && short\" class=\"hint\" translate>{{ hint }}</p> <ng-container *ngIf=\"validation && validation.errors && (validation.dirty || validation.touched)\"> <ng-container *ngFor=\"let msg of validationMessages\"> <p style=\"color: red;\" *ngIf=\"validation.errors[msg.validator]\" translate>{{ msg.message }}</p> </ng-container> </ng-container> ",
                },] },
    ];
    /** @nocollapse */
    FormFieldComponent.ctorParameters = function () { return []; };
    FormFieldComponent.propDecorators = {
        'popover': [{ type: ContentChild, args: [FormFieldPopoverComponent,] },],
        'childField': [{ type: ContentChild, args: [FormFieldChild,] },],
        'id': [{ type: Input },],
        'text': [{ type: Input },],
        'label': [{ type: Input },],
        'labelFor': [{ type: Input },],
        'hint': [{ type: Input },],
        'hasInfo': [{ type: Input },],
        'validation': [{ type: Input },],
        'validationMessages': [{ type: Input },],
        'disabled': [{ type: HostBinding, args: ['class.disabled',] }, { type: Input },],
        'fullWidth': [{ type: HostBinding, args: ['class.fullWidth',] },],
        'showInfo': [{ type: HostBinding, args: ['class.show-info',] },],
    };
    return FormFieldComponent;
}());
export { FormFieldComponent };
//# sourceMappingURL=form-field.component.js.map