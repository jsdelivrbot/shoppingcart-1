var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Input, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbDatepickerConfig } from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module';
import { FormFieldChild } from '../form-field-child';
import { DateComponent } from '../../date/date.component';
import { DatepickerComponent } from '../../datepicker/datepicker.component';
/**
 * Provide a field for a user to type a date or choose one from a calendar.
 *
 * The value bound with ngModel can be:
 * -A string of the format yyy-MM-dd
 * -A Date object
 * -The internal datepicker structure NgbDateStruct, available in @ng-bootstrap/ng-bootstrap
 *
 * Text is interpretted leniently and the following are all acceptable:
 * 042517
 * 04252017
 * 4/25/17
 * 4/25/2017
 * 4-25-2017
 * 04-25-2017
 *
 * @example
 * <div tzfFormField text="My Date">
 *   <tzf-form-field-datepicker
 *     [(ngModel)]="myDate"
 *     placeholder="Enter a date"
 *   >
 *   </tzf-form-field-datepicker>
 * </div>
 */
var FormFieldDatepickerComponent = (function (_super) {
    __extends(FormFieldDatepickerComponent, _super);
    function FormFieldDatepickerComponent(ngbDatepickerConfig) {
        var _this = _super.call(this, null) || this;
        /**
         * The model for the datepicker.
         */
        _this.ngbDate = {};
        _this.minYear = ngbDatepickerConfig.minDate.year;
        _this.maxYear = ngbDatepickerConfig.maxDate.year;
        return _this;
    }
    /**
     * Set the datepicker date and mark that it was changed.
     * @param value
     */
    FormFieldDatepickerComponent.prototype.ngbDateChange = function (value) {
        this.ngbDate = value;
        this.ngbDateChanged = true;
    };
    /**
     * Update using the value selected in the datepicker.
     */
    FormFieldDatepickerComponent.prototype.updateFromDatepicker = function () {
        if (this.ngbDateChanged) {
            var ngbDate = this.ngbDate;
            // Check if day exists because "undefined" ngbDate is {}
            _super.prototype.setDate.call(this, ngbDate && ngbDate.day && new Date(ngbDate.year, ngbDate.month - 1, ngbDate.day));
        }
    };
    /**
     * Override to update date for datepicker model as well.
     * @param date Date to set.
     */
    FormFieldDatepickerComponent.prototype.setDate = function (date, propogate, emit, updateInputValue) {
        if (propogate === void 0) { propogate = true; }
        if (emit === void 0) { emit = true; }
        if (updateInputValue === void 0) { updateInputValue = true; }
        this.ngbDate = date ? {
            month: date.getMonth() + 1,
            day: date.getDate(),
            year: date.getFullYear(),
        } : {};
        _super.prototype.setDate.call(this, date, propogate, emit, updateInputValue);
    };
    FormFieldDatepickerComponent.prototype.prepare = function () {
        this.ngbDateChanged = false;
    };
    /**
     * Reset the value to undefined.
     */
    FormFieldDatepickerComponent.prototype.reset = function () {
        this.ngbDate = {};
        this.ngbDateChanged = true;
    };
    /**
     * @param disabled Disable this field.
     */
    FormFieldDatepickerComponent.prototype.setDisabled = function (disabled) {
        this.disabled = disabled;
    };
    FormFieldDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-form-field-datepicker',
                    template: "<tzf-form-field-popover (prepare)=\"prepare()\" (accept)=\"updateFromDatepicker()\" (reset)=\"reset()\" [disableToggleKeyAccess]=\"true\" [disabled]=\"disabled\" > <input type=\"text\" [id]=\"id\" [ngModel]=\"textValue\" (ngModelChange)=\"setTextValue($event)\" (blur)=\"checkUserInput()\" [disabled]=\"disabled\" > <div class=\"cal-and-year\" content> <tzf-datepicker [ngModel]=\"ngbDate\" (ngModelChange)=\"ngbDateChange($event)\" [minDate]=\"minDate\" [maxDate]=\"maxDate\" [dayTemplate]=\"dayTemplate\" [yearPicker]=\"yearPicker\" ></tzf-datepicker> </div> <span button>{{ textValue && textValue.length ? '' : placeholder }}</span> </tzf-form-field-popover> <ng-template #dayTemplate let-date=\"date\" let-selected=\"selected\"> <div class=\"day\" [class.bg-primary]=\"selected\" (mousedown)=\"ngbDateChange(date)\" >{{ date.day }}</div> </ng-template> ",
                    styles: [":host div.cal-and-year{padding:0}.day{line-height:1.9rem;width:100%}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return FormFieldDatepickerComponent; }),
                            multi: true
                        }, {
                            provide: FormFieldChild,
                            useExisting: forwardRef(function () { return FormFieldDatepickerComponent; })
                        }],
                },] },
    ];
    /** @nocollapse */
    FormFieldDatepickerComponent.ctorParameters = function () { return [
        { type: NgbDatepickerConfig, },
    ]; };
    FormFieldDatepickerComponent.propDecorators = {
        'id': [{ type: Input },],
        'minDate': [{ type: Input },],
        'maxDate': [{ type: Input },],
        'datepicker': [{ type: ViewChild, args: [DatepickerComponent,] },],
        'yearList': [{ type: ViewChild, args: ['yearList',] },],
    };
    return FormFieldDatepickerComponent;
}(DateComponent));
export { FormFieldDatepickerComponent };
//# sourceMappingURL=form-field-datepicker.component.js.map