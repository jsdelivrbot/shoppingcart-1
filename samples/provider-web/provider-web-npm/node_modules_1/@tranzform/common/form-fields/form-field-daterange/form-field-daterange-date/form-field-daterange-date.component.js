var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DateComponent } from '../../../date/date.component';
import { DatepickerUtil } from '../../../datepicker/datepicker-util';
/**
 * Input and datepicker for date range popover. This is not intended to be used outside the common framework.
 */
var FormFieldDaterangeDateComponent = (function (_super) {
    __extends(FormFieldDaterangeDateComponent, _super);
    function FormFieldDaterangeDateComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Detect a date override.
     * @param changes Detected changes.
     */
    FormFieldDaterangeDateComponent.prototype.ngOnChanges = function (changes) {
        if (changes.overrideDate) {
            this.setDate(this.overrideDate);
        }
        if (changes.minDate) {
            this.ngbMinDate = DatepickerUtil.toNgbDate(DateComponent.interpretDate(this.minDate));
        }
        if (changes.maxDate) {
            this.ngbMaxDate = DatepickerUtil.toNgbDate(DateComponent.interpretDate(this.maxDate));
        }
    };
    /**
     * Override DateComponent implementation to update datepicker value as well.
     * @param date The new date.
     */
    FormFieldDaterangeDateComponent.prototype.setDate = function (date) {
        this.pickerDate = DatepickerUtil.toNgbDate(date);
        _super.prototype.setDate.call(this, date);
    };
    /**
       * On click handler to set the date
       * @param date The new date.
       */
    FormFieldDaterangeDateComponent.prototype.setDateOnClick = function (date) {
        this.pickerDate = date;
        _super.prototype.setDate.call(this, DatepickerUtil.toDate(date));
    };
    /**
     * Determine if a date is in the start/end range to be highlighted.
     * @param date A date.
     */
    FormFieldDaterangeDateComponent.prototype.inRange = function (date) {
        if (!this.pickerDate) {
            return false;
        }
        var rangeMin = this.ngbMinDate;
        var rangeMax = this.ngbMaxDate;
        // By default, highlight the min/max
        var rangeMinCompareValue = 0;
        var rangeMaxCompareValue = 0;
        if (this.startDate) {
            rangeMin = this.pickerDate;
            // Don't highlight the min which is the picker date
            rangeMinCompareValue = 1;
        }
        else {
            rangeMax = this.pickerDate;
            // Don't highlight the max which is the picker date
            rangeMaxCompareValue = -1;
        }
        return rangeMin && rangeMax
            && DatepickerUtil.compare(date, rangeMin) >= rangeMinCompareValue
            && DatepickerUtil.compare(date, rangeMax) <= rangeMaxCompareValue;
    };
    FormFieldDaterangeDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-form-field-daterange-date',
                    template: "<div class=\"field\"> <tzf-form-fields> <div class=\"calIcon\" inlineSVG=\"assets/common/icons/Calendar.svg\"></div> <label tzfFormField [label]=\"label\"> <input type=\"text\" [attr.id]=\"id\" [(ngModel)]=\"textValue\" (blur)=\"checkUserInput()\" (keydown.enter)=\"checkUserInput()\" > </label> </tzf-form-fields> </div> <tzf-datepicker [(ngModel)]=\"pickerDate\" (ngModelChange)=\"pickDate($event)\" [minDate]=\"ngbMinDate\" [maxDate]=\"ngbMaxDate\" [dayTemplate]=\"dayTemplate\" ></tzf-datepicker> <ng-template #dayTemplate let-date=\"date\" let-selected=\"selected\"> <div class=\"day\" [class.range]=\"!selected && inRange(date)\" [class.bg-primary]=\"selected\" (mousedown)=\"setDateOnClick(date)\" >{{ date.day }}</div> </ng-template> ",
                    styles: [":root{--side-padding:50px}@media (max-width:1000px){:root{--side-padding:5vw}}.field{border-top:2px solid #f1f1f1}.calIcon{padding:1.5em 0 0 2rem}.calIcon ::ng-deep svg{height:3.6em;width:2.2em}.day{line-height:1.9rem;width:100%}.range{background:#cce7d9;color:#5d5d5d}:host ::ng-deep div.ngb-dp-day{border:solid #fff;border-width:1px 1px 0 0;width:3em;height:auto}tzf-datepicker{border:solid #f1f1f1;border-width:2px 2px 2px 0;display:block;padding:.5rem 1.5rem 1rem}:host:first-child tzf-datepicker{border-width:2px 0 2px 2px;padding-right:0}:host:last-child .calIcon{padding-left:4rem}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return FormFieldDaterangeDateComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    FormFieldDaterangeDateComponent.ctorParameters = function () { return []; };
    FormFieldDaterangeDateComponent.propDecorators = {
        'id': [{ type: Input },],
        'label': [{ type: Input },],
        'startDate': [{ type: Input },],
        'overrideDate': [{ type: Input },],
        'minDate': [{ type: Input },],
        'maxDate': [{ type: Input },],
    };
    return FormFieldDaterangeDateComponent;
}(DateComponent));
export { FormFieldDaterangeDateComponent };
//# sourceMappingURL=form-field-daterange-date.component.js.map