import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as DateArithmetic from 'date-arithmetic';
import { DateComponent } from '../../date/date.component';
var FormFieldDaterangeComponent = (function () {
    function FormFieldDaterangeComponent() {
        /**
         * Format of output via ngModel. Set to 'date' to get a Date object.
         */
        this.format = DateComponent.DEFAULT_FORMAT;
        /**
         * Label for the start date textbox.
         */
        this.startLabel = 'Start Date';
        /**
         * Label for the end date textbox.
         */
        this.endLabel = 'End Date';
        /**
         * Model field containing the start date.
         */
        this.startField = 'start';
        /**
         * Model field containing the end date.
         */
        this.endField = 'end';
        /**
         * This is an alternative to ngModel. When the fields are undefined, they will be passed here. Useful when using Object.assign.
         */
        this.fields = new EventEmitter();
        /**
         * Number of times to prevent dateChange from resetting the predefined selection.
         */
        this.predefinedChange = 1;
        /**
         * The ngModel value.
         */
        this.range = {};
        /**
         * The values being edited.
         */
        this.editRange = {};
        this.propagateChange = function () { };
        this.propagateTouched = function () { };
    }
    /**
     * Process the value bound as the ngModel.
     */
    FormFieldDaterangeComponent.prototype.writeValue = function (value) {
        if (value) {
            this.range = value;
        }
        else {
            this.reset();
        }
        // Initialize to a predefined range if configured.
        var range = this.range;
        if (!range[this.startField] && !range[this.endField] && !isNaN(this.predefined) && this.predefinedRanges) {
            var predefined = this.predefinedRanges[this.predefined];
            // Calculate the predefined dates keeping the correct format
            this.range[this.startField] = DateComponent.formatOutput(this.getPredefinedDate(predefined.start), this.format);
            this.range[this.endField] = DateComponent.formatOutput(this.getPredefinedDate(predefined.end), this.format);
            // Ignore initial date change and one when first opened
            this.predefinedChange = 2;
        }
        this.prepare();
    };
    /**
     * Set dates based on a predefined range.
     * @param i Predefined index.
     */
    FormFieldDaterangeComponent.prototype.selectPredefined = function (i) {
        var predefined = this.predefinedRanges[i];
        var minDate = DateComponent.interpretDate(this.minDate);
        var maxDate = DateComponent.interpretDate(this.maxDate);
        // If using minDate/maxDate, make new instances to make sure changes are detected
        var predefinedStart = this.getPredefinedDate(predefined.start);
        this.predefinedStart = minDate && minDate > predefinedStart ? new Date(minDate) : predefinedStart;
        var predefinedEnd = this.getPredefinedDate(predefined.end);
        this.predefinedEnd = maxDate && maxDate < predefinedEnd ? new Date(maxDate) : predefinedEnd;
        this.predefinedChange = 1;
    };
    /**
     * Convert a predefined date definition to a Date.
     * @param value Date definition.
     */
    FormFieldDaterangeComponent.prototype.getPredefinedDate = function (value) {
        // Default to today
        if (!value) {
            return new Date();
        }
        // Use manual date
        if (value instanceof Date) {
            return value;
        }
        // Calculate date
        return DateArithmetic.add(new Date(), value.offset, value.unit);
    };
    /**
     * One of the dates was changed.
     * @param value The new date.
     * @param field The date field that was changed.
     */
    FormFieldDaterangeComponent.prototype.dateChanged = function (value, field) {
        var _this = this;
        // Update the model
        this.editRange[field] = value;
        if (field === 'end') {
            // This field was already checked during change detection so delay until the next tick
            setTimeout(function () {
                _this.delayedEndDate = value;
            });
        }
        if (this.predefinedChange) {
            // Subtract half because it happens for start and end dates
            this.predefinedChange -= 0.5;
        }
        else {
            // Use time to set an unused value to deselect all ranges
            this.predefined = new Date().getTime();
        }
        this.ngModelChanged = true;
    };
    /**
     * Set the edit values.
     */
    FormFieldDaterangeComponent.prototype.prepare = function () {
        var editRange = this.editRange;
        var range = this.range;
        editRange.start = range[this.startField];
        editRange.end = range[this.endField];
        this.ngModelChanged = false;
    };
    /**
     * Copy edit values back to the model and propogate.
     */
    FormFieldDaterangeComponent.prototype.accept = function () {
        var range = this.range = {};
        var editRange = this.editRange;
        range[this.startField] = editRange.start;
        range[this.endField] = editRange.end;
        this.propagateTouched();
        if (this.ngModelChanged) {
            this.propagateChange(editRange.start || editRange.end ? range : undefined);
            this.fields.emit(range);
        }
    };
    /**
     * Clear all values.
     */
    FormFieldDaterangeComponent.prototype.reset = function () {
        var range = this.editRange = this.range = {};
        this.ngModelChanged = true;
    };
    /**
     * Save the callback to notify the consumer of changes.
     */
    FormFieldDaterangeComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    FormFieldDaterangeComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouched = fn;
    };
    FormFieldDaterangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tzf-form-field-daterange',
                    template: "<tzf-form-field-popover (prepare)=\"prepare()\" (accept)=\"accept()\" (reset)=\"reset()\" > <span button> <ng-container *ngIf=\"!range[startField] && !range[endField]\"> {{ placeholder | translate }} </ng-container> <ng-container *ngIf=\"range[startField] || range[endField]\"> {{ range[startField] | date:'M/d/y' }} - {{ range[endField] | date:'M/d/y' }} </ng-container> </span> <div style=\"white-space: nowrap;\" content> <div *ngIf=\"predefinedRanges\" class=\"predefined\" > <tzf-segmented [options]=\"predefinedRanges\" [ngModel]=\"predefined\" (ngModelChange)=\"selectPredefined($event)\" ></tzf-segmented> </div> <div class=\"dates\"> <tzf-form-field-daterange-date [id]=\"id + '-start'\" [ngModel]=\"editRange.start\" (ngModelChange)=\"dateChanged($event, 'start')\" [overrideDate]=\"predefinedStart\" [label]=\"startLabel\" [format]=\"format\" [startDate]=\"true\" [maxDate]=\"delayedEndDate || maxDate\" [minDate]=\"minDate\" class=\"start\" ></tzf-form-field-daterange-date> <tzf-form-field-daterange-date [id]=\"id + '-end'\" [ngModel]=\"editRange.end\" (ngModelChange)=\"dateChanged($event, 'end')\" [overrideDate]=\"predefinedEnd\" [label]=\"endLabel\" [format]=\"format\" [minDate]=\"editRange.start || minDate\" [maxDate]=\"maxDate\" class=\"end\" ></tzf-form-field-daterange-date> </div> </div> </tzf-form-field-popover> ",
                    styles: [".dates{display:flex}.predefined{margin:.5em 0 2em}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return FormFieldDaterangeComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    FormFieldDaterangeComponent.ctorParameters = function () { return []; };
    FormFieldDaterangeComponent.propDecorators = {
        'id': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'format': [{ type: Input },],
        'startLabel': [{ type: Input },],
        'endLabel': [{ type: Input },],
        'startField': [{ type: Input },],
        'endField': [{ type: Input },],
        'predefinedRanges': [{ type: Input },],
        'predefined': [{ type: Input, args: ['defaultPredefined',] },],
        'fields': [{ type: Output },],
        'maxDate': [{ type: Input },],
        'minDate': [{ type: Input },],
    };
    return FormFieldDaterangeComponent;
}());
export { FormFieldDaterangeComponent };
//# sourceMappingURL=form-field-daterange.component.js.map