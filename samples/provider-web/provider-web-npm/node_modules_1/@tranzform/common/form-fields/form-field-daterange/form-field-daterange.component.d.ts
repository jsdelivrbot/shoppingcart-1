import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { PredefinedDateRange } from './predefined-date-range.model';
export declare class FormFieldDaterangeComponent implements ControlValueAccessor {
    /**
     * Start and end textboxes will be given this ID with -start and -end suffixes.
     */
    id: string;
    /**
     * Text to show when no values are selected.
     */
    placeholder: string;
    /**
     * Format of output via ngModel. Set to 'date' to get a Date object.
     */
    format: string;
    /**
     * Label for the start date textbox.
     */
    startLabel: string;
    /**
     * Label for the end date textbox.
     */
    endLabel: string;
    /**
     * Model field containing the start date.
     */
    startField: string;
    /**
     * Model field containing the end date.
     */
    endField: string;
    /**
     * Predefined ranges that can be quickly selected by the user.
     */
    predefinedRanges: PredefinedDateRange[];
    /**
     * Predefined range to initialize with if no values are set.
     */
    predefined: number;
    /**
     * This is an alternative to ngModel. When the fields are undefined, they will be passed here. Useful when using Object.assign.
     */
    fields: EventEmitter<{}>;
    /**
     * Computed start date to set.
     */
    predefinedStart: Date;
    /**
     * Computed end date to set.
     */
    predefinedEnd: Date;
    /**
     * Number of times to prevent dateChange from resetting the predefined selection.
     */
    predefinedChange: number;
    /**
     * The ngModel value.
     */
    range: any;
    /**
     * Workaround issue when maxDate is updated for first datepicker during change detection.
     */
    delayedEndDate: Date;
    /**
     * The values being edited.
     */
    editRange: any;
    ngModelChanged: boolean;
    /**
     * Predefined range to set max and minimum dates for the date range
     */
    maxDate: any;
    minDate: any;
    propagateChange: Function;
    propagateTouched: Function;
    /**
     * Process the value bound as the ngModel.
     */
    writeValue(value: any): void;
    /**
     * Set dates based on a predefined range.
     * @param i Predefined index.
     */
    selectPredefined(i: number): void;
    /**
     * Convert a predefined date definition to a Date.
     * @param value Date definition.
     */
    getPredefinedDate(value: Date | any): Date;
    /**
     * One of the dates was changed.
     * @param value The new date.
     * @param field The date field that was changed.
     */
    dateChanged(value: any, field: string): void;
    /**
     * Set the edit values.
     */
    prepare(): void;
    /**
     * Copy edit values back to the model and propogate.
     */
    accept(): void;
    /**
     * Clear all values.
     */
    reset(): void;
    /**
     * Save the callback to notify the consumer of changes.
     */
    registerOnChange(fn: () => {}): void;
    /**
     * Save the callback to notify the consumer when the field is touched.
     */
    registerOnTouched(fn: () => {}): void;
}
