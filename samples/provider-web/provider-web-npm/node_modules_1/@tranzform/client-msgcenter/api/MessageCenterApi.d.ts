import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IdeleteMessageParams {
    /**  */
    messageid: string;
    /**  */
    type: string;
}
export interface IgetConversationMessagesParams {
    /**  */
    type: string;
    /**  */
    sortby: string;
    /**  */
    orderby: string;
    /** conversationCategory  in the converasation */
    conversationcategory?: string;
    /** Read Indicator specifying if the message has been read or unread */
    readindicator?: boolean;
}
export interface IgetTrailMessagesParams {
    /**  */
    messageid: string;
    /**  */
    type: string;
}
export interface IsaveConversationParams {
    /** Indicates whether the conversation is to be sent or saved to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts. */
    action: string;
    /** All the mandatory information that is needed. */
    conversationData: models.SaveConversation;
}
export interface IsaveMessageParams {
    /**  */
    action: string;
    /**  */
    messageBody: models.SaveMessage;
}
export interface IsaveMessageReplyParams {
    /**  */
    messageBody: models.SaveMessageReply;
}
export interface IupdateReadIndicatorParams {
    /**  */
    messageid: string;
    /**  */
    readtype: string;
}
export declare class MessageCenterApi {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    * Delete Message
    * Delete a message by ID.
    * @param params Parameters.
    */
    deleteMessage(params: IdeleteMessageParams, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Get Conversation Messages
    * Get messages in a conversation, based on query parameters.
    * @param params Parameters.
    */
    getConversationMessages(params: IgetConversationMessagesParams, extraHttpRequestParams?: any): Observable<models.MessageListVO>;
    /**
    * Get Trail Messages
    * Get trail messages. The messages that are returned are determined using the messagetype query parameter.
    * @param params Parameters.
    */
    getTrailMessages(params: IgetTrailMessagesParams, extraHttpRequestParams?: any): Observable<models.MessageListTrailVO>;
    /**
    * Create a Conversation
    * Member initiates a conversation. They can either send it to CSR or can save it to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
    * @param params Parameters.
    */
    saveConversation(params: IsaveConversationParams, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Send Message in Existing Conversation
    * This API will be used by the member to send a message in the existing conversation.
    * @param params Parameters.
    */
    saveMessage(params: IsaveMessageParams, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Create CSR Reply to Message
    * This API will be used by the CSR to reply a message in the existing conversation.
    * @param params Parameters.
    */
    saveMessageReply(params: IsaveMessageReplyParams, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Update Read Indicator on Message
    * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
    * @param params Parameters.
    */
    updateReadIndicator(params: IupdateReadIndicatorParams, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
     * Delete Message
     * Delete a message by ID.
     * @param params.messageid
     * @param params.type
     */
    deleteMessageWithHttpInfo(params: IdeleteMessageParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Conversation Messages
     * Get messages in a conversation, based on query parameters.
     * @param params.type
     * @param params.sortby
     * @param params.orderby
     * @param params.conversationcategory conversationCategory  in the converasation
     * @param params.readindicator Read Indicator specifying if the message has been read or unread
     */
    getConversationMessagesWithHttpInfo(params: IgetConversationMessagesParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Trail Messages
     * Get trail messages. The messages that are returned are determined using the messagetype query parameter.
     * @param params.messageid
     * @param params.type
     */
    getTrailMessagesWithHttpInfo(params: IgetTrailMessagesParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create a Conversation
     * Member initiates a conversation. They can either send it to CSR or can save it to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
     * @param params.action Indicates whether the conversation is to be sent or saved to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
     * @param params.conversationData All the mandatory information that is needed.
     */
    saveConversationWithHttpInfo(params: IsaveConversationParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Send Message in Existing Conversation
     * This API will be used by the member to send a message in the existing conversation.
     * @param params.action
     * @param params.messageBody
     */
    saveMessageWithHttpInfo(params: IsaveMessageParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create CSR Reply to Message
     * This API will be used by the CSR to reply a message in the existing conversation.
     * @param params.messageBody
     */
    saveMessageReplyWithHttpInfo(params: IsaveMessageReplyParams, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Read Indicator on Message
     * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
     * @param params.messageid
     * @param params.readtype
     */
    updateReadIndicatorWithHttpInfo(params: IupdateReadIndicatorParams, extraHttpRequestParams?: any): Observable<Response>;
}
