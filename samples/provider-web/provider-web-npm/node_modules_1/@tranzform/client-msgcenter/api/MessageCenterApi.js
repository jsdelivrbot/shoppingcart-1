/**
 * Message Center
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.00.004.001
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var MessageCenterApi = /** @class */ (function () {
    function MessageCenterApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://127.0.0.1:8080/msgcenter-web/tzf';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
    * Delete Message
    * Delete a message by ID.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.deleteMessage = function (params, extraHttpRequestParams) {
        return this.deleteMessageWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Conversation Messages
    * Get messages in a conversation, based on query parameters.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.getConversationMessages = function (params, extraHttpRequestParams) {
        return this.getConversationMessagesWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Get Trail Messages
    * Get trail messages. The messages that are returned are determined using the messagetype query parameter.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.getTrailMessages = function (params, extraHttpRequestParams) {
        return this.getTrailMessagesWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Create a Conversation
    * Member initiates a conversation. They can either send it to CSR or can save it to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.saveConversation = function (params, extraHttpRequestParams) {
        return this.saveConversationWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Send Message in Existing Conversation
    * This API will be used by the member to send a message in the existing conversation.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.saveMessage = function (params, extraHttpRequestParams) {
        return this.saveMessageWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Create CSR Reply to Message
    * This API will be used by the CSR to reply a message in the existing conversation.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.saveMessageReply = function (params, extraHttpRequestParams) {
        return this.saveMessageReplyWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * Update Read Indicator on Message
    * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
    * @param params Parameters.
    */
    MessageCenterApi.prototype.updateReadIndicator = function (params, extraHttpRequestParams) {
        return this.updateReadIndicatorWithHttpInfo(params, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Delete Message
     * Delete a message by ID.
     * @param params.messageid
     * @param params.type
     */
    MessageCenterApi.prototype.deleteMessageWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/message/${messageid}'
            .replace('${' + 'messageid' + '}', String(params.messageid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.messageid' is not null or undefined
        if (params.messageid === null || params.messageid === undefined) {
            throw new Error('Required parameter params.messageid was null or undefined when calling deleteMessage.');
        }
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling deleteMessage.');
        }
        if (params.type !== undefined) {
            queryParameters.set('type', params.type);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Conversation Messages
     * Get messages in a conversation, based on query parameters.
     * @param params.type
     * @param params.sortby
     * @param params.orderby
     * @param params.conversationcategory conversationCategory  in the converasation
     * @param params.readindicator Read Indicator specifying if the message has been read or unread
     */
    MessageCenterApi.prototype.getConversationMessagesWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/messages';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling getConversationMessages.');
        }
        // verify required parameter 'params.sortby' is not null or undefined
        if (params.sortby === null || params.sortby === undefined) {
            throw new Error('Required parameter params.sortby was null or undefined when calling getConversationMessages.');
        }
        // verify required parameter 'params.orderby' is not null or undefined
        if (params.orderby === null || params.orderby === undefined) {
            throw new Error('Required parameter params.orderby was null or undefined when calling getConversationMessages.');
        }
        if (params.type !== undefined) {
            queryParameters.set('type', params.type);
        }
        if (params.sortby !== undefined) {
            queryParameters.set('sortby', params.sortby);
        }
        if (params.orderby !== undefined) {
            queryParameters.set('orderby', params.orderby);
        }
        if (params.conversationcategory !== undefined) {
            queryParameters.set('conversationcategory', params.conversationcategory);
        }
        if (params.readindicator !== undefined) {
            queryParameters.set('readindicator', params.readindicator);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Trail Messages
     * Get trail messages. The messages that are returned are determined using the messagetype query parameter.
     * @param params.messageid
     * @param params.type
     */
    MessageCenterApi.prototype.getTrailMessagesWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/message/${messageid}'
            .replace('${' + 'messageid' + '}', String(params.messageid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.messageid' is not null or undefined
        if (params.messageid === null || params.messageid === undefined) {
            throw new Error('Required parameter params.messageid was null or undefined when calling getTrailMessages.');
        }
        // verify required parameter 'params.type' is not null or undefined
        if (params.type === null || params.type === undefined) {
            throw new Error('Required parameter params.type was null or undefined when calling getTrailMessages.');
        }
        if (params.type !== undefined) {
            queryParameters.set('type', params.type);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create a Conversation
     * Member initiates a conversation. They can either send it to CSR or can save it to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
     * @param params.action Indicates whether the conversation is to be sent or saved to drafts. The actiontype should be \&quot;send\&quot; when sending it to the CSR, and \&quot;draft\&quot; when saving it to drafts.
     * @param params.conversationData All the mandatory information that is needed.
     */
    MessageCenterApi.prototype.saveConversationWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/conversation';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.action' is not null or undefined
        if (params.action === null || params.action === undefined) {
            throw new Error('Required parameter params.action was null or undefined when calling saveConversation.');
        }
        // verify required parameter 'params.conversationData' is not null or undefined
        if (params.conversationData === null || params.conversationData === undefined) {
            throw new Error('Required parameter params.conversationData was null or undefined when calling saveConversation.');
        }
        if (params.action !== undefined) {
            queryParameters.set('action', params.action);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: params.conversationData == null ? '' : JSON.stringify(params.conversationData),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Send Message in Existing Conversation
     * This API will be used by the member to send a message in the existing conversation.
     * @param params.action
     * @param params.messageBody
     */
    MessageCenterApi.prototype.saveMessageWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/message';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.action' is not null or undefined
        if (params.action === null || params.action === undefined) {
            throw new Error('Required parameter params.action was null or undefined when calling saveMessage.');
        }
        // verify required parameter 'params.messageBody' is not null or undefined
        if (params.messageBody === null || params.messageBody === undefined) {
            throw new Error('Required parameter params.messageBody was null or undefined when calling saveMessage.');
        }
        if (params.action !== undefined) {
            queryParameters.set('action', params.action);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: params.messageBody == null ? '' : JSON.stringify(params.messageBody),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create CSR Reply to Message
     * This API will be used by the CSR to reply a message in the existing conversation.
     * @param params.messageBody
     */
    MessageCenterApi.prototype.saveMessageReplyWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/message/reply';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.messageBody' is not null or undefined
        if (params.messageBody === null || params.messageBody === undefined) {
            throw new Error('Required parameter params.messageBody was null or undefined when calling saveMessageReply.');
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: params.messageBody == null ? '' : JSON.stringify(params.messageBody),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Read Indicator on Message
     * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
     * @param params.messageid
     * @param params.readtype
     */
    MessageCenterApi.prototype.updateReadIndicatorWithHttpInfo = function (params, extraHttpRequestParams) {
        var path = this.basePath + '/message/${messageid}'
            .replace('${' + 'messageid' + '}', String(params.messageid));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'params.messageid' is not null or undefined
        if (params.messageid === null || params.messageid === undefined) {
            throw new Error('Required parameter params.messageid was null or undefined when calling updateReadIndicator.');
        }
        // verify required parameter 'params.readtype' is not null or undefined
        if (params.readtype === null || params.readtype === undefined) {
            throw new Error('Required parameter params.readtype was null or undefined when calling updateReadIndicator.');
        }
        if (params.readtype !== undefined) {
            queryParameters.set('readtype', params.readtype);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    MessageCenterApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MessageCenterApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return MessageCenterApi;
}());
export { MessageCenterApi };
//# sourceMappingURL=MessageCenterApi.js.map