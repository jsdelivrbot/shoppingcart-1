import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import * as models from '../model/models';
import { Configuration } from '../configuration';
export interface IdeleteMessageV2Params {
    /**  */
    messageid: string;
    /**  */
    type: string;
}
export interface IgetConversationMessagesV2Params {
    /**  */
    type: string;
    /**  */
    sortby: string;
    /**  */
    orderby: string;
    /** conversationCategory  in the converasation */
    conversationcategory?: string;
    /** Read Indicator specifying if the message has been read or unread */
    readindicator?: boolean;
}
export interface IgetTrailMessagesV2Params {
    /**  */
    messageid: string;
}
export interface IsaveMessageReplyV2Params {
    /**  */
    messageBody: models.SaveMessageReplyV2;
}
export interface IsaveMessageV2Params {
    /**  */
    action: string;
    /**  */
    messageBody: models.SaveMessageV2;
    /** Indicates whether the conversation was initiated from MEMBER/PROVIDER */
    context?: string;
}
export interface IupdateReadIndicatorV2Params {
    /**  */
    messageid: string;
    /**  */
    readtype: string;
}
export declare class MessageCenterV2Api {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
    * Delete Message
    * Delete a message by ID.
    * @param params Parameters.
    */
    deleteMessageV2(params: IdeleteMessageV2Params, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Get Messages
    * Get messages in a conversation, based on query parameters.
    * @param params Parameters.
    */
    getConversationMessagesV2(params: IgetConversationMessagesV2Params, extraHttpRequestParams?: any): Observable<models.MessageListVOV2>;
    /**
    * Get Message detail and Trail Messages
    * Get message detail and trail messages. The messages that are returned are determined using the messagetype query parameter.
    * @param params Parameters.
    */
    getTrailMessagesV2(params: IgetTrailMessagesV2Params, extraHttpRequestParams?: any): Observable<models.MessageListTrailVOV2>;
    /**
    * Create CSR Reply to Message
    * This API will be used by the CSR to reply a message in the existing conversation.
    * @param params Parameters.
    */
    saveMessageReplyV2(params: IsaveMessageReplyV2Params, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Send Message
    * This API will be used by the member/provider to send a message
    * @param params Parameters.
    */
    saveMessageV2(params: IsaveMessageV2Params, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
    * Update Read Indicator on Message
    * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
    * @param params Parameters.
    */
    updateReadIndicatorV2(params: IupdateReadIndicatorV2Params, extraHttpRequestParams?: any): Observable<models.StatusInfo>;
    /**
     * Delete Message
     * Delete a message by ID.
     * @param params.messageid
     * @param params.type
     */
    deleteMessageV2WithHttpInfo(params: IdeleteMessageV2Params, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Messages
     * Get messages in a conversation, based on query parameters.
     * @param params.type
     * @param params.sortby
     * @param params.orderby
     * @param params.conversationcategory conversationCategory  in the converasation
     * @param params.readindicator Read Indicator specifying if the message has been read or unread
     */
    getConversationMessagesV2WithHttpInfo(params: IgetConversationMessagesV2Params, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Message detail and Trail Messages
     * Get message detail and trail messages. The messages that are returned are determined using the messagetype query parameter.
     * @param params.messageid
     */
    getTrailMessagesV2WithHttpInfo(params: IgetTrailMessagesV2Params, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create CSR Reply to Message
     * This API will be used by the CSR to reply a message in the existing conversation.
     * @param params.messageBody
     */
    saveMessageReplyV2WithHttpInfo(params: IsaveMessageReplyV2Params, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Send Message
     * This API will be used by the member/provider to send a message
     * @param params.action
     * @param params.messageBody
     * @param params.context Indicates whether the conversation was initiated from MEMBER/PROVIDER
     */
    saveMessageV2WithHttpInfo(params: IsaveMessageV2Params, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update Read Indicator on Message
     * This API will be used by the member to update the read indicator. THey can mark the message as READ or UNREAD.
     * @param params.messageid
     * @param params.readtype
     */
    updateReadIndicatorV2WithHttpInfo(params: IupdateReadIndicatorV2Params, extraHttpRequestParams?: any): Observable<Response>;
}
